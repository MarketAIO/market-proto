//
//Описание API Статистики
//
//С помощью этих методов можно получить отчёты.
//
//The version of the OpenAPI document:
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: wb/statistics/v1/orders_item.proto

package wbStatistics

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrdersItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Дата и время заказа. Это поле соответствует параметру `dateFrom` в запросе, если параметр `flag`=1. Если часовой пояс не указан, то берется Московское время (UTC+3).
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// Дата и время обновления информации в сервисе. Это поле соответствует параметру `dateFrom` в запросе, если параметр `flag`=0 или не указан. Если часовой пояс не указан, то берется Московское время (UTC+3).
	LastChangeDate string `protobuf:"bytes,2,opt,name=lastChangeDate,proto3" json:"lastChangeDate,omitempty"`
	// Склад отгрузки
	WarehouseName string `protobuf:"bytes,3,opt,name=warehouseName,proto3" json:"warehouseName,omitempty"`
	// Страна
	CountryName string `protobuf:"bytes,4,opt,name=countryName,proto3" json:"countryName,omitempty"`
	// Округ
	OblastOkrugName string `protobuf:"bytes,5,opt,name=oblastOkrugName,proto3" json:"oblastOkrugName,omitempty"`
	// Регион
	RegionName string `protobuf:"bytes,6,opt,name=regionName,proto3" json:"regionName,omitempty"`
	// Артикул продавца
	SupplierArticle string `protobuf:"bytes,7,opt,name=supplierArticle,proto3" json:"supplierArticle,omitempty"`
	// Артикул WB
	NmId int32 `protobuf:"varint,8,opt,name=nmId,proto3" json:"nmId,omitempty"`
	// Баркод
	Barcode string `protobuf:"bytes,9,opt,name=barcode,proto3" json:"barcode,omitempty"`
	// Категория
	Category string `protobuf:"bytes,10,opt,name=category,proto3" json:"category,omitempty"`
	// Предмет
	Subject string `protobuf:"bytes,11,opt,name=subject,proto3" json:"subject,omitempty"`
	// Бренд
	Brand string `protobuf:"bytes,12,opt,name=brand,proto3" json:"brand,omitempty"`
	// Размер товара
	TechSize string `protobuf:"bytes,13,opt,name=techSize,proto3" json:"techSize,omitempty"`
	// Номер поставки
	IncomeID int32 `protobuf:"varint,14,opt,name=incomeID,proto3" json:"incomeID,omitempty"`
	// Договор поставки
	IsSupply bool `protobuf:"varint,15,opt,name=isSupply,proto3" json:"isSupply,omitempty"`
	// Договор реализации
	IsRealization bool `protobuf:"varint,16,opt,name=isRealization,proto3" json:"isRealization,omitempty"`
	// Цена без скидок
	TotalPrice float32 `protobuf:"fixed32,17,opt,name=totalPrice,proto3" json:"totalPrice,omitempty"`
	// Скидка продавца
	DiscountPercent int32 `protobuf:"varint,18,opt,name=discountPercent,proto3" json:"discountPercent,omitempty"`
	// Скидка WB
	Spp float32 `protobuf:"fixed32,19,opt,name=spp,proto3" json:"spp,omitempty"`
	// Цена с учетом всех скидок, кроме суммы по WB Кошельку
	FinishedPrice float32 `protobuf:"fixed32,20,opt,name=finishedPrice,proto3" json:"finishedPrice,omitempty"`
	// Цена со скидкой продавца (= `totalPrice` * (1 - `discountPercent`/100))
	PriceWithDisc float32 `protobuf:"fixed32,21,opt,name=priceWithDisc,proto3" json:"priceWithDisc,omitempty"`
	// Отмена заказа. true - заказ отменен
	IsCancel bool `protobuf:"varint,22,opt,name=isCancel,proto3" json:"isCancel,omitempty"`
	// Дата и время отмены заказа. Если заказ не был отменен, то \"0001-01-01T00:00:00\".Если часовой пояс не указан, то берется Московское время UTC+3.
	CancelDate string `protobuf:"bytes,23,opt,name=cancelDate,proto3" json:"cancelDate,omitempty"`
	// Тип заказа <ul> <li> `Клиентский` — заказ, поступивший от покупателя <li> `Возврат Брака` — возврат товара продавцу <li> `Принудительный возврат` — возврат товара продавцу <li> `Возврат обезлички` — возврат товара продавцу <li> `Возврат Неверного Вложения` — возврат товара продавцу <li> `Возврат Продавца` — возврат товара продавцу </ul>
	OrderType string `protobuf:"bytes,24,opt,name=orderType,proto3" json:"orderType,omitempty"`
	// Идентификатор стикера
	Sticker string `protobuf:"bytes,25,opt,name=sticker,proto3" json:"sticker,omitempty"`
	// Номер заказа
	GNumber string `protobuf:"bytes,26,opt,name=gNumber,proto3" json:"gNumber,omitempty"`
	// Уникальный идентификатор заказа.<br> Примечание для использующих API Маркетплейс: `srid` равен `rid` в ответах методов сборочных заданий.
	Srid string `protobuf:"bytes,27,opt,name=srid,proto3" json:"srid,omitempty"`
}

func (x *OrdersItem) Reset() {
	*x = OrdersItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_statistics_v1_orders_item_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersItem) ProtoMessage() {}

func (x *OrdersItem) ProtoReflect() protoreflect.Message {
	mi := &file_wb_statistics_v1_orders_item_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersItem.ProtoReflect.Descriptor instead.
func (*OrdersItem) Descriptor() ([]byte, []int) {
	return file_wb_statistics_v1_orders_item_proto_rawDescGZIP(), []int{0}
}

func (x *OrdersItem) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *OrdersItem) GetLastChangeDate() string {
	if x != nil {
		return x.LastChangeDate
	}
	return ""
}

func (x *OrdersItem) GetWarehouseName() string {
	if x != nil {
		return x.WarehouseName
	}
	return ""
}

func (x *OrdersItem) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *OrdersItem) GetOblastOkrugName() string {
	if x != nil {
		return x.OblastOkrugName
	}
	return ""
}

func (x *OrdersItem) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

func (x *OrdersItem) GetSupplierArticle() string {
	if x != nil {
		return x.SupplierArticle
	}
	return ""
}

func (x *OrdersItem) GetNmId() int32 {
	if x != nil {
		return x.NmId
	}
	return 0
}

func (x *OrdersItem) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *OrdersItem) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *OrdersItem) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *OrdersItem) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *OrdersItem) GetTechSize() string {
	if x != nil {
		return x.TechSize
	}
	return ""
}

func (x *OrdersItem) GetIncomeID() int32 {
	if x != nil {
		return x.IncomeID
	}
	return 0
}

func (x *OrdersItem) GetIsSupply() bool {
	if x != nil {
		return x.IsSupply
	}
	return false
}

func (x *OrdersItem) GetIsRealization() bool {
	if x != nil {
		return x.IsRealization
	}
	return false
}

func (x *OrdersItem) GetTotalPrice() float32 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

func (x *OrdersItem) GetDiscountPercent() int32 {
	if x != nil {
		return x.DiscountPercent
	}
	return 0
}

func (x *OrdersItem) GetSpp() float32 {
	if x != nil {
		return x.Spp
	}
	return 0
}

func (x *OrdersItem) GetFinishedPrice() float32 {
	if x != nil {
		return x.FinishedPrice
	}
	return 0
}

func (x *OrdersItem) GetPriceWithDisc() float32 {
	if x != nil {
		return x.PriceWithDisc
	}
	return 0
}

func (x *OrdersItem) GetIsCancel() bool {
	if x != nil {
		return x.IsCancel
	}
	return false
}

func (x *OrdersItem) GetCancelDate() string {
	if x != nil {
		return x.CancelDate
	}
	return ""
}

func (x *OrdersItem) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *OrdersItem) GetSticker() string {
	if x != nil {
		return x.Sticker
	}
	return ""
}

func (x *OrdersItem) GetGNumber() string {
	if x != nil {
		return x.GNumber
	}
	return ""
}

func (x *OrdersItem) GetSrid() string {
	if x != nil {
		return x.Srid
	}
	return ""
}

var File_wb_statistics_v1_orders_item_proto protoreflect.FileDescriptor

var file_wb_statistics_v1_orders_item_proto_rawDesc = []byte{
	0x0a, 0x22, 0x77, 0x62, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x77, 0x62, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x22, 0xc2, 0x06, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x62, 0x6c,
	0x61, 0x73, 0x74, 0x4f, 0x6b, 0x72, 0x75, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6f, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x6b, 0x72, 0x75, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6d, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x6d, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x63, 0x68, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x63, 0x68, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x44, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x69,
	0x73, 0x52, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x52, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x70, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x73, 0x70, 0x70, 0x12, 0x24, 0x0a,
	0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x44, 0x69, 0x73, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x72, 0x69, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x72, 0x69, 0x64, 0x42, 0x48, 0x5a, 0x46, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x41, 0x49, 0x4f, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x77, 0x62, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x77, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wb_statistics_v1_orders_item_proto_rawDescOnce sync.Once
	file_wb_statistics_v1_orders_item_proto_rawDescData = file_wb_statistics_v1_orders_item_proto_rawDesc
)

func file_wb_statistics_v1_orders_item_proto_rawDescGZIP() []byte {
	file_wb_statistics_v1_orders_item_proto_rawDescOnce.Do(func() {
		file_wb_statistics_v1_orders_item_proto_rawDescData = protoimpl.X.CompressGZIP(file_wb_statistics_v1_orders_item_proto_rawDescData)
	})
	return file_wb_statistics_v1_orders_item_proto_rawDescData
}

var file_wb_statistics_v1_orders_item_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wb_statistics_v1_orders_item_proto_goTypes = []interface{}{
	(*OrdersItem)(nil), // 0: wb.statistics.v1.OrdersItem
}
var file_wb_statistics_v1_orders_item_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_wb_statistics_v1_orders_item_proto_init() }
func file_wb_statistics_v1_orders_item_proto_init() {
	if File_wb_statistics_v1_orders_item_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wb_statistics_v1_orders_item_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wb_statistics_v1_orders_item_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wb_statistics_v1_orders_item_proto_goTypes,
		DependencyIndexes: file_wb_statistics_v1_orders_item_proto_depIdxs,
		MessageInfos:      file_wb_statistics_v1_orders_item_proto_msgTypes,
	}.Build()
	File_wb_statistics_v1_orders_item_proto = out.File
	file_wb_statistics_v1_orders_item_proto_rawDesc = nil
	file_wb_statistics_v1_orders_item_proto_goTypes = nil
	file_wb_statistics_v1_orders_item_proto_depIdxs = nil
}
