//
//Описание API Статистики
//
//С помощью этих методов можно получить отчёты.
//
//The version of the OpenAPI document:
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: wb/statistics/v1/service.proto

package wbStatistics

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApiV1SupplierIncomesGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Дата и время последнего изменения по поставке. <br> Дата в формате RFC3339. Можно передать дату или дату со временем.  Время можно указывать с точностью до секунд или миллисекунд. <br> Время передаётся в часовом поясе Мск (UTC+3). <br>Примеры: <ul> <li> `2019-06-20` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul>
	DateFrom string `protobuf:"bytes,1,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
}

func (x *ApiV1SupplierIncomesGetRequest) Reset() {
	*x = ApiV1SupplierIncomesGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_statistics_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1SupplierIncomesGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1SupplierIncomesGetRequest) ProtoMessage() {}

func (x *ApiV1SupplierIncomesGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_statistics_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1SupplierIncomesGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1SupplierIncomesGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_statistics_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *ApiV1SupplierIncomesGetRequest) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

type ApiV1SupplierIncomesGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*IncomesItem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ApiV1SupplierIncomesGetResponse) Reset() {
	*x = ApiV1SupplierIncomesGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_statistics_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1SupplierIncomesGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1SupplierIncomesGetResponse) ProtoMessage() {}

func (x *ApiV1SupplierIncomesGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wb_statistics_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1SupplierIncomesGetResponse.ProtoReflect.Descriptor instead.
func (*ApiV1SupplierIncomesGetResponse) Descriptor() ([]byte, []int) {
	return file_wb_statistics_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *ApiV1SupplierIncomesGetResponse) GetData() []*IncomesItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiV1SupplierOrdersGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Дата и время последнего изменения по заказу. <br> Дата в формате RFC3339. Можно передать дату или дату со временем.  Время можно указывать с точностью до секунд или миллисекунд. <br> Время передаётся в часовом поясе Мск (UTC+3). <br>Примеры: <ul> <li> `2019-06-20` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul>
	DateFrom string `protobuf:"bytes,1,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
	// Если параметр `flag=0` (или не указан в строке запроса), при вызове API возвращаются данные,  у которых значение поля `lastChangeDate` (дата время обновления информации в сервисе) больше или равно переданному  значению параметра `dateFrom`.  При этом количество возвращенных строк данных варьируется в интервале от 0 до примерно 100 000. <br> Если параметр `flag=1`, то будет выгружена информация обо всех заказах или продажах с датой,  равной переданному параметру `dateFrom` (в данном случае время в дате значения не имеет).  При этом количество возвращенных строк данных будет равно количеству всех заказов или продаж,  сделанных в указанную дату, переданную в параметре `dateFrom`.
	Flag int32 `protobuf:"varint,2,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *ApiV1SupplierOrdersGetRequest) Reset() {
	*x = ApiV1SupplierOrdersGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_statistics_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1SupplierOrdersGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1SupplierOrdersGetRequest) ProtoMessage() {}

func (x *ApiV1SupplierOrdersGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_statistics_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1SupplierOrdersGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1SupplierOrdersGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_statistics_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *ApiV1SupplierOrdersGetRequest) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *ApiV1SupplierOrdersGetRequest) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

type ApiV1SupplierOrdersGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*OrdersItem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ApiV1SupplierOrdersGetResponse) Reset() {
	*x = ApiV1SupplierOrdersGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_statistics_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1SupplierOrdersGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1SupplierOrdersGetResponse) ProtoMessage() {}

func (x *ApiV1SupplierOrdersGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wb_statistics_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1SupplierOrdersGetResponse.ProtoReflect.Descriptor instead.
func (*ApiV1SupplierOrdersGetResponse) Descriptor() ([]byte, []int) {
	return file_wb_statistics_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *ApiV1SupplierOrdersGetResponse) GetData() []*OrdersItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiV1SupplierSalesGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Дата и время последнего изменения по продаже/возврату. <br> Дата в формате RFC3339. Можно передать дату или дату со временем.  Время можно указывать с точностью до секунд или миллисекунд. <br> Время передаётся в часовом поясе Мск (UTC+3). <br>Примеры: <ul> <li> `2019-06-20` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul>
	DateFrom string `protobuf:"bytes,1,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
	// Если параметр `flag=0` (или не указан в строке запроса), при вызове API возвращаются данные,  у которых значение поля `lastChangeDate` (дата время обновления информации в сервисе) больше или равно переданному  значению параметра `dateFrom`.  При этом количество возвращенных строк данных варьируется в интервале от 0 до примерно 100 000. <br> Если параметр `flag=1`, то будет выгружена информация обо всех заказах или продажах с датой,  равной переданному параметру `dateFrom` (в данном случае время в дате значения не имеет).  При этом количество возвращенных строк данных будет равно количеству всех заказов или продаж,  сделанных в указанную дату, переданную в параметре `dateFrom`.
	Flag int32 `protobuf:"varint,2,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *ApiV1SupplierSalesGetRequest) Reset() {
	*x = ApiV1SupplierSalesGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_statistics_v1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1SupplierSalesGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1SupplierSalesGetRequest) ProtoMessage() {}

func (x *ApiV1SupplierSalesGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_statistics_v1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1SupplierSalesGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1SupplierSalesGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_statistics_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *ApiV1SupplierSalesGetRequest) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *ApiV1SupplierSalesGetRequest) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

type ApiV1SupplierSalesGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*SalesItem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ApiV1SupplierSalesGetResponse) Reset() {
	*x = ApiV1SupplierSalesGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_statistics_v1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1SupplierSalesGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1SupplierSalesGetResponse) ProtoMessage() {}

func (x *ApiV1SupplierSalesGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wb_statistics_v1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1SupplierSalesGetResponse.ProtoReflect.Descriptor instead.
func (*ApiV1SupplierSalesGetResponse) Descriptor() ([]byte, []int) {
	return file_wb_statistics_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *ApiV1SupplierSalesGetResponse) GetData() []*SalesItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiV1SupplierStocksGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Дата и время последнего изменения по товару. <br> Для получения полного остатка следует указывать максимально раннее значение. <br> Например, `2019-06-20` <br> Дата в формате RFC3339. Можно передать дату или дату со временем.  Время можно указывать с точностью до секунд или миллисекунд. <br> Время передаётся в часовом поясе Мск (UTC+3). <br>Примеры: <ul> <li> `2019-06-20` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul>
	DateFrom string `protobuf:"bytes,1,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
}

func (x *ApiV1SupplierStocksGetRequest) Reset() {
	*x = ApiV1SupplierStocksGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_statistics_v1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1SupplierStocksGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1SupplierStocksGetRequest) ProtoMessage() {}

func (x *ApiV1SupplierStocksGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_statistics_v1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1SupplierStocksGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1SupplierStocksGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_statistics_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *ApiV1SupplierStocksGetRequest) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

type ApiV1SupplierStocksGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*StocksItem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ApiV1SupplierStocksGetResponse) Reset() {
	*x = ApiV1SupplierStocksGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_statistics_v1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1SupplierStocksGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1SupplierStocksGetResponse) ProtoMessage() {}

func (x *ApiV1SupplierStocksGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wb_statistics_v1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1SupplierStocksGetResponse.ProtoReflect.Descriptor instead.
func (*ApiV1SupplierStocksGetResponse) Descriptor() ([]byte, []int) {
	return file_wb_statistics_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *ApiV1SupplierStocksGetResponse) GetData() []*StocksItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiV5SupplierReportDetailByPeriodGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Начальная дата отчета.<br> Дата в формате RFC3339. Можно передать дату или дату со временем.  Время можно указывать с точностью до секунд или миллисекунд. <br> Время передаётся в часовом поясе Мск (UTC+3). <br>Примеры: <ul> <li> `2019-06-20` <li> `2019-06-20T23:59:59` <li> `2019-06-20T00:00:00.12345` <li> `2017-03-25T00:00:00` </ul>
	DateFrom string `protobuf:"bytes,1,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
	// Конечная дата отчета
	DateTo string `protobuf:"bytes,2,opt,name=dateTo,proto3" json:"dateTo,omitempty"`
	// Максимальное количество строк отчета, возвращаемых методом. Не может быть более 100000.
	Limit int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// Уникальный идентификатор строки отчета. Необходим для получения отчета частями.  <br> Загрузку отчета нужно начинать с `rrdid = 0` и при последующих вызовах API передавать в запросе значение `rrd_id` из последней строки, полученной в результате предыдущего вызова.  <br> Таким образом для загрузки одного отчета может понадобиться вызывать API до тех пор, пока количество возвращаемых строк не станет равным нулю.
	Rrdid int32 `protobuf:"varint,4,opt,name=rrdid,proto3" json:"rrdid,omitempty"`
}

func (x *ApiV5SupplierReportDetailByPeriodGetRequest) Reset() {
	*x = ApiV5SupplierReportDetailByPeriodGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_statistics_v1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV5SupplierReportDetailByPeriodGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV5SupplierReportDetailByPeriodGetRequest) ProtoMessage() {}

func (x *ApiV5SupplierReportDetailByPeriodGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_statistics_v1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV5SupplierReportDetailByPeriodGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV5SupplierReportDetailByPeriodGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_statistics_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *ApiV5SupplierReportDetailByPeriodGetRequest) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *ApiV5SupplierReportDetailByPeriodGetRequest) GetDateTo() string {
	if x != nil {
		return x.DateTo
	}
	return ""
}

func (x *ApiV5SupplierReportDetailByPeriodGetRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ApiV5SupplierReportDetailByPeriodGetRequest) GetRrdid() int32 {
	if x != nil {
		return x.Rrdid
	}
	return 0
}

type ApiV5SupplierReportDetailByPeriodGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*DetailReportItem `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ApiV5SupplierReportDetailByPeriodGetResponse) Reset() {
	*x = ApiV5SupplierReportDetailByPeriodGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_statistics_v1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV5SupplierReportDetailByPeriodGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV5SupplierReportDetailByPeriodGetResponse) ProtoMessage() {}

func (x *ApiV5SupplierReportDetailByPeriodGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wb_statistics_v1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV5SupplierReportDetailByPeriodGetResponse.ProtoReflect.Descriptor instead.
func (*ApiV5SupplierReportDetailByPeriodGetResponse) Descriptor() ([]byte, []int) {
	return file_wb_statistics_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *ApiV5SupplierReportDetailByPeriodGetResponse) GetData() []*DetailReportItem {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_wb_statistics_v1_service_proto protoreflect.FileDescriptor

var file_wb_statistics_v1_service_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x77, 0x62, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x77, 0x62, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x4e, 0x77, 0x62, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x35, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x62, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x34, 0x32, 0x39,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x29, 0x77, 0x62, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x77, 0x62, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x22, 0x77, 0x62, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x77, 0x62, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x34, 0x32,
	0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x77, 0x62, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x77, 0x62, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x61, 0x6c, 0x65,
	0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x77, 0x62,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x3c, 0x0a, 0x1e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0x54,
	0x0a, 0x1f, 0x41, 0x70, 0x69, 0x56, 0x31, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x77, 0x62, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x4f, 0x0a, 0x1d, 0x41, 0x70, 0x69, 0x56, 0x31, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x52, 0x0a, 0x1e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x62, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4e, 0x0a, 0x1c, 0x41, 0x70, 0x69,
	0x56, 0x31, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x22, 0x50, 0x0a, 0x1d, 0x41, 0x70, 0x69,
	0x56, 0x31, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x62, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6c, 0x65,
	0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a, 0x1d, 0x41,
	0x70, 0x69, 0x56, 0x31, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x22, 0x52, 0x0a, 0x1e, 0x41, 0x70, 0x69, 0x56,
	0x31, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x62, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x01, 0x0a,
	0x2b, 0x41, 0x70, 0x69, 0x56, 0x35, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x72, 0x64, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x72, 0x64, 0x69, 0x64, 0x22, 0x66, 0x0a, 0x2c,
	0x41, 0x70, 0x69, 0x56, 0x35, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x62, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0xaf, 0x05, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7e, 0x0a, 0x17, 0x41, 0x70,
	0x69, 0x56, 0x31, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x73, 0x47, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x77, 0x62, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x77, 0x62, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x16, 0x41, 0x70,
	0x69, 0x56, 0x31, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x47, 0x65, 0x74, 0x12, 0x2f, 0x2e, 0x77, 0x62, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x77, 0x62, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x15, 0x41, 0x70, 0x69, 0x56, 0x31,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x47, 0x65, 0x74,
	0x12, 0x2e, 0x2e, 0x77, 0x62, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x77, 0x62, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x7b, 0x0a, 0x16, 0x41, 0x70, 0x69, 0x56, 0x31, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x47, 0x65, 0x74, 0x12, 0x2f, 0x2e, 0x77, 0x62,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x69, 0x56, 0x31, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x77,
	0x62, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x69, 0x56, 0x31, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa5,
	0x01, 0x0a, 0x24, 0x41, 0x70, 0x69, 0x56, 0x35, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x12, 0x3d, 0x2e, 0x77, 0x62, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x35,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x77, 0x62, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x35, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x42, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x48, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x49, 0x4f, 0x2f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x6f, 0x2f, 0x77, 0x62, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2f, 0x76, 0x31, 0x3b, 0x77, 0x62, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wb_statistics_v1_service_proto_rawDescOnce sync.Once
	file_wb_statistics_v1_service_proto_rawDescData = file_wb_statistics_v1_service_proto_rawDesc
)

func file_wb_statistics_v1_service_proto_rawDescGZIP() []byte {
	file_wb_statistics_v1_service_proto_rawDescOnce.Do(func() {
		file_wb_statistics_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_wb_statistics_v1_service_proto_rawDescData)
	})
	return file_wb_statistics_v1_service_proto_rawDescData
}

var file_wb_statistics_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_wb_statistics_v1_service_proto_goTypes = []interface{}{
	(*ApiV1SupplierIncomesGetRequest)(nil),               // 0: wb.statistics.v1.ApiV1SupplierIncomesGetRequest
	(*ApiV1SupplierIncomesGetResponse)(nil),              // 1: wb.statistics.v1.ApiV1SupplierIncomesGetResponse
	(*ApiV1SupplierOrdersGetRequest)(nil),                // 2: wb.statistics.v1.ApiV1SupplierOrdersGetRequest
	(*ApiV1SupplierOrdersGetResponse)(nil),               // 3: wb.statistics.v1.ApiV1SupplierOrdersGetResponse
	(*ApiV1SupplierSalesGetRequest)(nil),                 // 4: wb.statistics.v1.ApiV1SupplierSalesGetRequest
	(*ApiV1SupplierSalesGetResponse)(nil),                // 5: wb.statistics.v1.ApiV1SupplierSalesGetResponse
	(*ApiV1SupplierStocksGetRequest)(nil),                // 6: wb.statistics.v1.ApiV1SupplierStocksGetRequest
	(*ApiV1SupplierStocksGetResponse)(nil),               // 7: wb.statistics.v1.ApiV1SupplierStocksGetResponse
	(*ApiV5SupplierReportDetailByPeriodGetRequest)(nil),  // 8: wb.statistics.v1.ApiV5SupplierReportDetailByPeriodGetRequest
	(*ApiV5SupplierReportDetailByPeriodGetResponse)(nil), // 9: wb.statistics.v1.ApiV5SupplierReportDetailByPeriodGetResponse
	(*IncomesItem)(nil),                                  // 10: wb.statistics.v1.IncomesItem
	(*OrdersItem)(nil),                                   // 11: wb.statistics.v1.OrdersItem
	(*SalesItem)(nil),                                    // 12: wb.statistics.v1.SalesItem
	(*StocksItem)(nil),                                   // 13: wb.statistics.v1.StocksItem
	(*DetailReportItem)(nil),                             // 14: wb.statistics.v1.DetailReportItem
}
var file_wb_statistics_v1_service_proto_depIdxs = []int32{
	10, // 0: wb.statistics.v1.ApiV1SupplierIncomesGetResponse.data:type_name -> wb.statistics.v1.IncomesItem
	11, // 1: wb.statistics.v1.ApiV1SupplierOrdersGetResponse.data:type_name -> wb.statistics.v1.OrdersItem
	12, // 2: wb.statistics.v1.ApiV1SupplierSalesGetResponse.data:type_name -> wb.statistics.v1.SalesItem
	13, // 3: wb.statistics.v1.ApiV1SupplierStocksGetResponse.data:type_name -> wb.statistics.v1.StocksItem
	14, // 4: wb.statistics.v1.ApiV5SupplierReportDetailByPeriodGetResponse.data:type_name -> wb.statistics.v1.DetailReportItem
	0,  // 5: wb.statistics.v1.StatisticsService.ApiV1SupplierIncomesGet:input_type -> wb.statistics.v1.ApiV1SupplierIncomesGetRequest
	2,  // 6: wb.statistics.v1.StatisticsService.ApiV1SupplierOrdersGet:input_type -> wb.statistics.v1.ApiV1SupplierOrdersGetRequest
	4,  // 7: wb.statistics.v1.StatisticsService.ApiV1SupplierSalesGet:input_type -> wb.statistics.v1.ApiV1SupplierSalesGetRequest
	6,  // 8: wb.statistics.v1.StatisticsService.ApiV1SupplierStocksGet:input_type -> wb.statistics.v1.ApiV1SupplierStocksGetRequest
	8,  // 9: wb.statistics.v1.StatisticsService.ApiV5SupplierReportDetailByPeriodGet:input_type -> wb.statistics.v1.ApiV5SupplierReportDetailByPeriodGetRequest
	1,  // 10: wb.statistics.v1.StatisticsService.ApiV1SupplierIncomesGet:output_type -> wb.statistics.v1.ApiV1SupplierIncomesGetResponse
	3,  // 11: wb.statistics.v1.StatisticsService.ApiV1SupplierOrdersGet:output_type -> wb.statistics.v1.ApiV1SupplierOrdersGetResponse
	5,  // 12: wb.statistics.v1.StatisticsService.ApiV1SupplierSalesGet:output_type -> wb.statistics.v1.ApiV1SupplierSalesGetResponse
	7,  // 13: wb.statistics.v1.StatisticsService.ApiV1SupplierStocksGet:output_type -> wb.statistics.v1.ApiV1SupplierStocksGetResponse
	9,  // 14: wb.statistics.v1.StatisticsService.ApiV5SupplierReportDetailByPeriodGet:output_type -> wb.statistics.v1.ApiV5SupplierReportDetailByPeriodGetResponse
	10, // [10:15] is the sub-list for method output_type
	5,  // [5:10] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_wb_statistics_v1_service_proto_init() }
func file_wb_statistics_v1_service_proto_init() {
	if File_wb_statistics_v1_service_proto != nil {
		return
	}
	file_wb_statistics_v1_api_v5_supplier_report_detail_by_period_get429_response_proto_init()
	file_wb_statistics_v1_detail_report_item_proto_init()
	file_wb_statistics_v1_incomes_item_proto_init()
	file_wb_statistics_v1_orders_item_proto_init()
	file_wb_statistics_v1_response429_proto_init()
	file_wb_statistics_v1_response_error_statistics_proto_init()
	file_wb_statistics_v1_sales_item_proto_init()
	file_wb_statistics_v1_stocks_item_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_wb_statistics_v1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1SupplierIncomesGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_statistics_v1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1SupplierIncomesGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_statistics_v1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1SupplierOrdersGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_statistics_v1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1SupplierOrdersGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_statistics_v1_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1SupplierSalesGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_statistics_v1_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1SupplierSalesGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_statistics_v1_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1SupplierStocksGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_statistics_v1_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1SupplierStocksGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_statistics_v1_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV5SupplierReportDetailByPeriodGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_statistics_v1_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV5SupplierReportDetailByPeriodGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wb_statistics_v1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wb_statistics_v1_service_proto_goTypes,
		DependencyIndexes: file_wb_statistics_v1_service_proto_depIdxs,
		MessageInfos:      file_wb_statistics_v1_service_proto_msgTypes,
	}.Build()
	File_wb_statistics_v1_service_proto = out.File
	file_wb_statistics_v1_service_proto_rawDesc = nil
	file_wb_statistics_v1_service_proto_goTypes = nil
	file_wb_statistics_v1_service_proto_depIdxs = nil
}
