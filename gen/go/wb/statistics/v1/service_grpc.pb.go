//
//Описание API Статистики
//
//С помощью этих методов можно получить отчёты.
//
//The version of the OpenAPI document:
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: wb/statistics/v1/service.proto

package wbStatistics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StatisticsService_ApiV1SupplierIncomesGet_FullMethodName              = "/wb.statistics.v1.StatisticsService/ApiV1SupplierIncomesGet"
	StatisticsService_ApiV1SupplierOrdersGet_FullMethodName               = "/wb.statistics.v1.StatisticsService/ApiV1SupplierOrdersGet"
	StatisticsService_ApiV1SupplierSalesGet_FullMethodName                = "/wb.statistics.v1.StatisticsService/ApiV1SupplierSalesGet"
	StatisticsService_ApiV1SupplierStocksGet_FullMethodName               = "/wb.statistics.v1.StatisticsService/ApiV1SupplierStocksGet"
	StatisticsService_ApiV5SupplierReportDetailByPeriodGet_FullMethodName = "/wb.statistics.v1.StatisticsService/ApiV5SupplierReportDetailByPeriodGet"
)

// StatisticsServiceClient is the client API for StatisticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatisticsServiceClient interface {
	ApiV1SupplierIncomesGet(ctx context.Context, in *ApiV1SupplierIncomesGetRequest, opts ...grpc.CallOption) (*ApiV1SupplierIncomesGetResponse, error)
	ApiV1SupplierOrdersGet(ctx context.Context, in *ApiV1SupplierOrdersGetRequest, opts ...grpc.CallOption) (*ApiV1SupplierOrdersGetResponse, error)
	ApiV1SupplierSalesGet(ctx context.Context, in *ApiV1SupplierSalesGetRequest, opts ...grpc.CallOption) (*ApiV1SupplierSalesGetResponse, error)
	ApiV1SupplierStocksGet(ctx context.Context, in *ApiV1SupplierStocksGetRequest, opts ...grpc.CallOption) (*ApiV1SupplierStocksGetResponse, error)
	ApiV5SupplierReportDetailByPeriodGet(ctx context.Context, in *ApiV5SupplierReportDetailByPeriodGetRequest, opts ...grpc.CallOption) (*ApiV5SupplierReportDetailByPeriodGetResponse, error)
}

type statisticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatisticsServiceClient(cc grpc.ClientConnInterface) StatisticsServiceClient {
	return &statisticsServiceClient{cc}
}

func (c *statisticsServiceClient) ApiV1SupplierIncomesGet(ctx context.Context, in *ApiV1SupplierIncomesGetRequest, opts ...grpc.CallOption) (*ApiV1SupplierIncomesGetResponse, error) {
	out := new(ApiV1SupplierIncomesGetResponse)
	err := c.cc.Invoke(ctx, StatisticsService_ApiV1SupplierIncomesGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) ApiV1SupplierOrdersGet(ctx context.Context, in *ApiV1SupplierOrdersGetRequest, opts ...grpc.CallOption) (*ApiV1SupplierOrdersGetResponse, error) {
	out := new(ApiV1SupplierOrdersGetResponse)
	err := c.cc.Invoke(ctx, StatisticsService_ApiV1SupplierOrdersGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) ApiV1SupplierSalesGet(ctx context.Context, in *ApiV1SupplierSalesGetRequest, opts ...grpc.CallOption) (*ApiV1SupplierSalesGetResponse, error) {
	out := new(ApiV1SupplierSalesGetResponse)
	err := c.cc.Invoke(ctx, StatisticsService_ApiV1SupplierSalesGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) ApiV1SupplierStocksGet(ctx context.Context, in *ApiV1SupplierStocksGetRequest, opts ...grpc.CallOption) (*ApiV1SupplierStocksGetResponse, error) {
	out := new(ApiV1SupplierStocksGetResponse)
	err := c.cc.Invoke(ctx, StatisticsService_ApiV1SupplierStocksGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) ApiV5SupplierReportDetailByPeriodGet(ctx context.Context, in *ApiV5SupplierReportDetailByPeriodGetRequest, opts ...grpc.CallOption) (*ApiV5SupplierReportDetailByPeriodGetResponse, error) {
	out := new(ApiV5SupplierReportDetailByPeriodGetResponse)
	err := c.cc.Invoke(ctx, StatisticsService_ApiV5SupplierReportDetailByPeriodGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatisticsServiceServer is the server API for StatisticsService service.
// All implementations must embed UnimplementedStatisticsServiceServer
// for forward compatibility
type StatisticsServiceServer interface {
	ApiV1SupplierIncomesGet(context.Context, *ApiV1SupplierIncomesGetRequest) (*ApiV1SupplierIncomesGetResponse, error)
	ApiV1SupplierOrdersGet(context.Context, *ApiV1SupplierOrdersGetRequest) (*ApiV1SupplierOrdersGetResponse, error)
	ApiV1SupplierSalesGet(context.Context, *ApiV1SupplierSalesGetRequest) (*ApiV1SupplierSalesGetResponse, error)
	ApiV1SupplierStocksGet(context.Context, *ApiV1SupplierStocksGetRequest) (*ApiV1SupplierStocksGetResponse, error)
	ApiV5SupplierReportDetailByPeriodGet(context.Context, *ApiV5SupplierReportDetailByPeriodGetRequest) (*ApiV5SupplierReportDetailByPeriodGetResponse, error)
	mustEmbedUnimplementedStatisticsServiceServer()
}

// UnimplementedStatisticsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatisticsServiceServer struct {
}

func (UnimplementedStatisticsServiceServer) ApiV1SupplierIncomesGet(context.Context, *ApiV1SupplierIncomesGetRequest) (*ApiV1SupplierIncomesGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiV1SupplierIncomesGet not implemented")
}
func (UnimplementedStatisticsServiceServer) ApiV1SupplierOrdersGet(context.Context, *ApiV1SupplierOrdersGetRequest) (*ApiV1SupplierOrdersGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiV1SupplierOrdersGet not implemented")
}
func (UnimplementedStatisticsServiceServer) ApiV1SupplierSalesGet(context.Context, *ApiV1SupplierSalesGetRequest) (*ApiV1SupplierSalesGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiV1SupplierSalesGet not implemented")
}
func (UnimplementedStatisticsServiceServer) ApiV1SupplierStocksGet(context.Context, *ApiV1SupplierStocksGetRequest) (*ApiV1SupplierStocksGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiV1SupplierStocksGet not implemented")
}
func (UnimplementedStatisticsServiceServer) ApiV5SupplierReportDetailByPeriodGet(context.Context, *ApiV5SupplierReportDetailByPeriodGetRequest) (*ApiV5SupplierReportDetailByPeriodGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiV5SupplierReportDetailByPeriodGet not implemented")
}
func (UnimplementedStatisticsServiceServer) mustEmbedUnimplementedStatisticsServiceServer() {}

// UnsafeStatisticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatisticsServiceServer will
// result in compilation errors.
type UnsafeStatisticsServiceServer interface {
	mustEmbedUnimplementedStatisticsServiceServer()
}

func RegisterStatisticsServiceServer(s grpc.ServiceRegistrar, srv StatisticsServiceServer) {
	s.RegisterService(&StatisticsService_ServiceDesc, srv)
}

func _StatisticsService_ApiV1SupplierIncomesGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiV1SupplierIncomesGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).ApiV1SupplierIncomesGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticsService_ApiV1SupplierIncomesGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).ApiV1SupplierIncomesGet(ctx, req.(*ApiV1SupplierIncomesGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_ApiV1SupplierOrdersGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiV1SupplierOrdersGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).ApiV1SupplierOrdersGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticsService_ApiV1SupplierOrdersGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).ApiV1SupplierOrdersGet(ctx, req.(*ApiV1SupplierOrdersGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_ApiV1SupplierSalesGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiV1SupplierSalesGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).ApiV1SupplierSalesGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticsService_ApiV1SupplierSalesGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).ApiV1SupplierSalesGet(ctx, req.(*ApiV1SupplierSalesGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_ApiV1SupplierStocksGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiV1SupplierStocksGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).ApiV1SupplierStocksGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticsService_ApiV1SupplierStocksGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).ApiV1SupplierStocksGet(ctx, req.(*ApiV1SupplierStocksGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_ApiV5SupplierReportDetailByPeriodGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiV5SupplierReportDetailByPeriodGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).ApiV5SupplierReportDetailByPeriodGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticsService_ApiV5SupplierReportDetailByPeriodGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).ApiV5SupplierReportDetailByPeriodGet(ctx, req.(*ApiV5SupplierReportDetailByPeriodGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatisticsService_ServiceDesc is the grpc.ServiceDesc for StatisticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatisticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wb.statistics.v1.StatisticsService",
	HandlerType: (*StatisticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApiV1SupplierIncomesGet",
			Handler:    _StatisticsService_ApiV1SupplierIncomesGet_Handler,
		},
		{
			MethodName: "ApiV1SupplierOrdersGet",
			Handler:    _StatisticsService_ApiV1SupplierOrdersGet_Handler,
		},
		{
			MethodName: "ApiV1SupplierSalesGet",
			Handler:    _StatisticsService_ApiV1SupplierSalesGet_Handler,
		},
		{
			MethodName: "ApiV1SupplierStocksGet",
			Handler:    _StatisticsService_ApiV1SupplierStocksGet_Handler,
		},
		{
			MethodName: "ApiV5SupplierReportDetailByPeriodGet",
			Handler:    _StatisticsService_ApiV5SupplierReportDetailByPeriodGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wb/statistics/v1/service.proto",
}
