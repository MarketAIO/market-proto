//
//Описание API Вопросов и Отзывов
//
//`Важно.` Допускается 1 запрос в секунду на методы вопросов и отзывов в целом. При превышении лимита до 3 запросов в секунду последует блокировка на 60 секунд.
//
//The version of the OpenAPI document:
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: wb/feedbacks/v1/service.proto

package wbFeedbacks

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApiV1FeedbackGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор отзыва
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ApiV1FeedbackGetRequest) Reset() {
	*x = ApiV1FeedbackGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_feedbacks_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1FeedbackGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1FeedbackGetRequest) ProtoMessage() {}

func (x *ApiV1FeedbackGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_feedbacks_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1FeedbackGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1FeedbackGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_feedbacks_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *ApiV1FeedbackGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ApiV1FeedbacksArchiveGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Количество отзывов (max. 5 000)
	Take int32 `protobuf:"varint,1,opt,name=take,proto3" json:"take,omitempty"`
	// Количество отзывов для пропуска
	Skip int32 `protobuf:"varint,2,opt,name=skip,proto3" json:"skip,omitempty"`
	// Артикул WB
	NmId int32 `protobuf:"varint,3,opt,name=nmId,proto3" json:"nmId,omitempty"`
	// Сортировка отзывов по дате (dateAsc/dateDesc)
	Order string `protobuf:"bytes,4,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *ApiV1FeedbacksArchiveGetRequest) Reset() {
	*x = ApiV1FeedbacksArchiveGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_feedbacks_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1FeedbacksArchiveGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1FeedbacksArchiveGetRequest) ProtoMessage() {}

func (x *ApiV1FeedbacksArchiveGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_feedbacks_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1FeedbacksArchiveGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1FeedbacksArchiveGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_feedbacks_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *ApiV1FeedbacksArchiveGetRequest) GetTake() int32 {
	if x != nil {
		return x.Take
	}
	return 0
}

func (x *ApiV1FeedbacksArchiveGetRequest) GetSkip() int32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *ApiV1FeedbacksArchiveGetRequest) GetNmId() int32 {
	if x != nil {
		return x.NmId
	}
	return 0
}

func (x *ApiV1FeedbacksArchiveGetRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type ApiV1FeedbacksCountGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Дата начала периода в формате Unix timestamp
	DateFrom int32 `protobuf:"varint,1,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
	// Дата конца периода в формате Unix timestamp
	DateTo int32 `protobuf:"varint,2,opt,name=dateTo,proto3" json:"dateTo,omitempty"`
	// Обработанные отзывы(`true`) или необработанные отзывы(`false`).<br> Если не указать, вернутся обработанные отзывы.
	IsAnswered bool `protobuf:"varint,3,opt,name=isAnswered,proto3" json:"isAnswered,omitempty"`
}

func (x *ApiV1FeedbacksCountGetRequest) Reset() {
	*x = ApiV1FeedbacksCountGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_feedbacks_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1FeedbacksCountGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1FeedbacksCountGetRequest) ProtoMessage() {}

func (x *ApiV1FeedbacksCountGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_feedbacks_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1FeedbacksCountGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1FeedbacksCountGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_feedbacks_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *ApiV1FeedbacksCountGetRequest) GetDateFrom() int32 {
	if x != nil {
		return x.DateFrom
	}
	return 0
}

func (x *ApiV1FeedbacksCountGetRequest) GetDateTo() int32 {
	if x != nil {
		return x.DateTo
	}
	return 0
}

func (x *ApiV1FeedbacksCountGetRequest) GetIsAnswered() bool {
	if x != nil {
		return x.IsAnswered
	}
	return false
}

type ApiV1FeedbacksGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Обработанные отзывы (`true`) или необработанные отзывы(`false`)
	IsAnswered bool `protobuf:"varint,1,opt,name=isAnswered,proto3" json:"isAnswered,omitempty"`
	// Количество отзывов (max. 5 000)
	Take int32 `protobuf:"varint,2,opt,name=take,proto3" json:"take,omitempty"`
	// Количество отзывов для пропуска (max. 199990)
	Skip int32 `protobuf:"varint,3,opt,name=skip,proto3" json:"skip,omitempty"`
	// Артикул WB
	NmId int32 `protobuf:"varint,4,opt,name=nmId,proto3" json:"nmId,omitempty"`
	// Сортировка отзывов по дате (dateAsc/dateDesc)
	Order string `protobuf:"bytes,5,opt,name=order,proto3" json:"order,omitempty"`
	// Дата начала периода в формате Unix timestamp
	DateFrom int32 `protobuf:"varint,6,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
	// Дата конца периода в формате Unix timestamp
	DateTo int32 `protobuf:"varint,7,opt,name=dateTo,proto3" json:"dateTo,omitempty"`
}

func (x *ApiV1FeedbacksGetRequest) Reset() {
	*x = ApiV1FeedbacksGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_feedbacks_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1FeedbacksGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1FeedbacksGetRequest) ProtoMessage() {}

func (x *ApiV1FeedbacksGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_feedbacks_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1FeedbacksGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1FeedbacksGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_feedbacks_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *ApiV1FeedbacksGetRequest) GetIsAnswered() bool {
	if x != nil {
		return x.IsAnswered
	}
	return false
}

func (x *ApiV1FeedbacksGetRequest) GetTake() int32 {
	if x != nil {
		return x.Take
	}
	return 0
}

func (x *ApiV1FeedbacksGetRequest) GetSkip() int32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *ApiV1FeedbacksGetRequest) GetNmId() int32 {
	if x != nil {
		return x.NmId
	}
	return 0
}

func (x *ApiV1FeedbacksGetRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *ApiV1FeedbacksGetRequest) GetDateFrom() int32 {
	if x != nil {
		return x.DateFrom
	}
	return 0
}

func (x *ApiV1FeedbacksGetRequest) GetDateTo() int32 {
	if x != nil {
		return x.DateTo
	}
	return 0
}

type ApiV1FeedbacksOrderReturnPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiV1FeedbacksOrderReturnPostReq *ApiV1FeedbacksOrderReturnPostReq `protobuf:"bytes,1,opt,name=apiV1FeedbacksOrderReturnPostReq,proto3" json:"apiV1FeedbacksOrderReturnPostReq,omitempty"`
}

func (x *ApiV1FeedbacksOrderReturnPostRequest) Reset() {
	*x = ApiV1FeedbacksOrderReturnPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_feedbacks_v1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1FeedbacksOrderReturnPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1FeedbacksOrderReturnPostRequest) ProtoMessage() {}

func (x *ApiV1FeedbacksOrderReturnPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_feedbacks_v1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1FeedbacksOrderReturnPostRequest.ProtoReflect.Descriptor instead.
func (*ApiV1FeedbacksOrderReturnPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_feedbacks_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *ApiV1FeedbacksOrderReturnPostRequest) GetApiV1FeedbacksOrderReturnPostReq() *ApiV1FeedbacksOrderReturnPostReq {
	if x != nil {
		return x.ApiV1FeedbacksOrderReturnPostReq
	}
	return nil
}

type ApiV1FeedbacksPatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiV1FeedbacksPatchReq *ApiV1FeedbacksPatchReq `protobuf:"bytes,1,opt,name=apiV1FeedbacksPatchReq,proto3" json:"apiV1FeedbacksPatchReq,omitempty"`
}

func (x *ApiV1FeedbacksPatchRequest) Reset() {
	*x = ApiV1FeedbacksPatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_feedbacks_v1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1FeedbacksPatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1FeedbacksPatchRequest) ProtoMessage() {}

func (x *ApiV1FeedbacksPatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_feedbacks_v1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1FeedbacksPatchRequest.ProtoReflect.Descriptor instead.
func (*ApiV1FeedbacksPatchRequest) Descriptor() ([]byte, []int) {
	return file_wb_feedbacks_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *ApiV1FeedbacksPatchRequest) GetApiV1FeedbacksPatchReq() *ApiV1FeedbacksPatchReq {
	if x != nil {
		return x.ApiV1FeedbacksPatchReq
	}
	return nil
}

type ApiV1FeedbacksProductsRatingGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id категории товара
	SubjectId int32 `protobuf:"varint,1,opt,name=subjectId,proto3" json:"subjectId,omitempty"`
}

func (x *ApiV1FeedbacksProductsRatingGetRequest) Reset() {
	*x = ApiV1FeedbacksProductsRatingGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_feedbacks_v1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1FeedbacksProductsRatingGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1FeedbacksProductsRatingGetRequest) ProtoMessage() {}

func (x *ApiV1FeedbacksProductsRatingGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_feedbacks_v1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1FeedbacksProductsRatingGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1FeedbacksProductsRatingGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_feedbacks_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *ApiV1FeedbacksProductsRatingGetRequest) GetSubjectId() int32 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

type ApiV1FeedbacksProductsRatingNmidGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Артикул WB
	NmId int32 `protobuf:"varint,1,opt,name=nmId,proto3" json:"nmId,omitempty"`
}

func (x *ApiV1FeedbacksProductsRatingNmidGetRequest) Reset() {
	*x = ApiV1FeedbacksProductsRatingNmidGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_feedbacks_v1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1FeedbacksProductsRatingNmidGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1FeedbacksProductsRatingNmidGetRequest) ProtoMessage() {}

func (x *ApiV1FeedbacksProductsRatingNmidGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_feedbacks_v1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1FeedbacksProductsRatingNmidGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1FeedbacksProductsRatingNmidGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_feedbacks_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *ApiV1FeedbacksProductsRatingNmidGetRequest) GetNmId() int32 {
	if x != nil {
		return x.NmId
	}
	return 0
}

type ApiV1FeedbacksProductsRatingTopGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id категории товара
	SubjectId int32 `protobuf:"varint,1,opt,name=subjectId,proto3" json:"subjectId,omitempty"`
}

func (x *ApiV1FeedbacksProductsRatingTopGetRequest) Reset() {
	*x = ApiV1FeedbacksProductsRatingTopGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_feedbacks_v1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1FeedbacksProductsRatingTopGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1FeedbacksProductsRatingTopGetRequest) ProtoMessage() {}

func (x *ApiV1FeedbacksProductsRatingTopGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_feedbacks_v1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1FeedbacksProductsRatingTopGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1FeedbacksProductsRatingTopGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_feedbacks_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *ApiV1FeedbacksProductsRatingTopGetRequest) GetSubjectId() int32 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

type ApiV1FeedbacksReportGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Необработанный(`false`) или в архиве(`true`)
	IsAnswered bool `protobuf:"varint,1,opt,name=isAnswered,proto3" json:"isAnswered,omitempty"`
	// Параметр пагинации, указывает сколько отзывов пропустить (max. 20 000)
	Skip int32 `protobuf:"varint,2,opt,name=skip,proto3" json:"skip,omitempty"`
	// Дата начала периода в формате Unix timestamp <br>
	DateFrom int32 `protobuf:"varint,3,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
	// Дата конца периода в формате Unix timestamp <br>
	DateTo int32 `protobuf:"varint,4,opt,name=dateTo,proto3" json:"dateTo,omitempty"`
	// Сортировка отзывов по дате (dateAsc/dateDesc) <br>
	Order string `protobuf:"bytes,5,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *ApiV1FeedbacksReportGetRequest) Reset() {
	*x = ApiV1FeedbacksReportGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_feedbacks_v1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1FeedbacksReportGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1FeedbacksReportGetRequest) ProtoMessage() {}

func (x *ApiV1FeedbacksReportGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_feedbacks_v1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1FeedbacksReportGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1FeedbacksReportGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_feedbacks_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *ApiV1FeedbacksReportGetRequest) GetIsAnswered() bool {
	if x != nil {
		return x.IsAnswered
	}
	return false
}

func (x *ApiV1FeedbacksReportGetRequest) GetSkip() int32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *ApiV1FeedbacksReportGetRequest) GetDateFrom() int32 {
	if x != nil {
		return x.DateFrom
	}
	return 0
}

func (x *ApiV1FeedbacksReportGetRequest) GetDateTo() int32 {
	if x != nil {
		return x.DateTo
	}
	return 0
}

func (x *ApiV1FeedbacksReportGetRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type ApiV1QuestionGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор вопроса
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ApiV1QuestionGetRequest) Reset() {
	*x = ApiV1QuestionGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_feedbacks_v1_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1QuestionGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1QuestionGetRequest) ProtoMessage() {}

func (x *ApiV1QuestionGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_feedbacks_v1_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1QuestionGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1QuestionGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_feedbacks_v1_service_proto_rawDescGZIP(), []int{10}
}

func (x *ApiV1QuestionGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ApiV1QuestionsCountGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Дата начала периода в формате Unix timestamp
	DateFrom int32 `protobuf:"varint,1,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
	// Дата конца периода в формате Unix timestamp
	DateTo int32 `protobuf:"varint,2,opt,name=dateTo,proto3" json:"dateTo,omitempty"`
	// Обработанные вопросы (`true`) или необработанные вопросы (`false`).<br> Если не указать, вернутся обработанные вопросы.
	IsAnswered bool `protobuf:"varint,3,opt,name=isAnswered,proto3" json:"isAnswered,omitempty"`
}

func (x *ApiV1QuestionsCountGetRequest) Reset() {
	*x = ApiV1QuestionsCountGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_feedbacks_v1_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1QuestionsCountGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1QuestionsCountGetRequest) ProtoMessage() {}

func (x *ApiV1QuestionsCountGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_feedbacks_v1_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1QuestionsCountGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1QuestionsCountGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_feedbacks_v1_service_proto_rawDescGZIP(), []int{11}
}

func (x *ApiV1QuestionsCountGetRequest) GetDateFrom() int32 {
	if x != nil {
		return x.DateFrom
	}
	return 0
}

func (x *ApiV1QuestionsCountGetRequest) GetDateTo() int32 {
	if x != nil {
		return x.DateTo
	}
	return 0
}

func (x *ApiV1QuestionsCountGetRequest) GetIsAnswered() bool {
	if x != nil {
		return x.IsAnswered
	}
	return false
}

type ApiV1QuestionsGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Отвеченные вопросы (`true`) или неотвеченные вопросы(`false`)
	IsAnswered bool `protobuf:"varint,1,opt,name=isAnswered,proto3" json:"isAnswered,omitempty"`
	// Количество запрашиваемых вопросов (максимально допустимое значение для параметра - 10 000,  при этом сумма значений параметров `take` и `skip` не должна превышать 10 000)
	Take int32 `protobuf:"varint,2,opt,name=take,proto3" json:"take,omitempty"`
	// Количество вопросов для пропуска (максимально допустимое значение для параметра - 10 000,  при этом сумма значений параметров `take` и `skip` не должна превышать 10 000)
	Skip int32 `protobuf:"varint,3,opt,name=skip,proto3" json:"skip,omitempty"`
	// Артикул WB
	NmId int32 `protobuf:"varint,4,opt,name=nmId,proto3" json:"nmId,omitempty"`
	// Сортировка вопросов по дате (`dateAsc`/`dateDesc`)
	Order string `protobuf:"bytes,5,opt,name=order,proto3" json:"order,omitempty"`
	// Дата начала периода в формате Unix timestamp
	DateFrom int32 `protobuf:"varint,6,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
	// Дата конца периода в формате Unix timestamp
	DateTo int32 `protobuf:"varint,7,opt,name=dateTo,proto3" json:"dateTo,omitempty"`
}

func (x *ApiV1QuestionsGetRequest) Reset() {
	*x = ApiV1QuestionsGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_feedbacks_v1_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1QuestionsGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1QuestionsGetRequest) ProtoMessage() {}

func (x *ApiV1QuestionsGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_feedbacks_v1_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1QuestionsGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1QuestionsGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_feedbacks_v1_service_proto_rawDescGZIP(), []int{12}
}

func (x *ApiV1QuestionsGetRequest) GetIsAnswered() bool {
	if x != nil {
		return x.IsAnswered
	}
	return false
}

func (x *ApiV1QuestionsGetRequest) GetTake() int32 {
	if x != nil {
		return x.Take
	}
	return 0
}

func (x *ApiV1QuestionsGetRequest) GetSkip() int32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *ApiV1QuestionsGetRequest) GetNmId() int32 {
	if x != nil {
		return x.NmId
	}
	return 0
}

func (x *ApiV1QuestionsGetRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *ApiV1QuestionsGetRequest) GetDateFrom() int32 {
	if x != nil {
		return x.DateFrom
	}
	return 0
}

func (x *ApiV1QuestionsGetRequest) GetDateTo() int32 {
	if x != nil {
		return x.DateTo
	}
	return 0
}

type ApiV1QuestionsPatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiV1QuestionsPatchReq *ApiV1QuestionsPatchReq `protobuf:"bytes,1,opt,name=apiV1QuestionsPatchReq,proto3" json:"apiV1QuestionsPatchReq,omitempty"`
}

func (x *ApiV1QuestionsPatchRequest) Reset() {
	*x = ApiV1QuestionsPatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_feedbacks_v1_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1QuestionsPatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1QuestionsPatchRequest) ProtoMessage() {}

func (x *ApiV1QuestionsPatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_feedbacks_v1_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1QuestionsPatchRequest.ProtoReflect.Descriptor instead.
func (*ApiV1QuestionsPatchRequest) Descriptor() ([]byte, []int) {
	return file_wb_feedbacks_v1_service_proto_rawDescGZIP(), []int{13}
}

func (x *ApiV1QuestionsPatchRequest) GetApiV1QuestionsPatchReq() *ApiV1QuestionsPatchReq {
	if x != nil {
		return x.ApiV1QuestionsPatchReq
	}
	return nil
}

type ApiV1QuestionsProductsRatingGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Количество запрашиваемых товаров (max. 100)
	Size int32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ApiV1QuestionsProductsRatingGetRequest) Reset() {
	*x = ApiV1QuestionsProductsRatingGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_feedbacks_v1_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1QuestionsProductsRatingGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1QuestionsProductsRatingGetRequest) ProtoMessage() {}

func (x *ApiV1QuestionsProductsRatingGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_feedbacks_v1_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1QuestionsProductsRatingGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1QuestionsProductsRatingGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_feedbacks_v1_service_proto_rawDescGZIP(), []int{14}
}

func (x *ApiV1QuestionsProductsRatingGetRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ApiV1QuestionsReportGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Обработанные вопросы (`true`) или необработанные вопросы(`false`)
	IsAnswered bool `protobuf:"varint,1,opt,name=isAnswered,proto3" json:"isAnswered,omitempty"`
}

func (x *ApiV1QuestionsReportGetRequest) Reset() {
	*x = ApiV1QuestionsReportGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_feedbacks_v1_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1QuestionsReportGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1QuestionsReportGetRequest) ProtoMessage() {}

func (x *ApiV1QuestionsReportGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_feedbacks_v1_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1QuestionsReportGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1QuestionsReportGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_feedbacks_v1_service_proto_rawDescGZIP(), []int{15}
}

func (x *ApiV1QuestionsReportGetRequest) GetIsAnswered() bool {
	if x != nil {
		return x.IsAnswered
	}
	return false
}

type ApiV1SupplierValuationsGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Выбор языка значений полей ответа (`ru` - русский, `en` - английский, `zh` - китайский)
	XLocale string `protobuf:"bytes,1,opt,name=xLocale,proto3" json:"xLocale,omitempty"`
}

func (x *ApiV1SupplierValuationsGetRequest) Reset() {
	*x = ApiV1SupplierValuationsGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_feedbacks_v1_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1SupplierValuationsGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1SupplierValuationsGetRequest) ProtoMessage() {}

func (x *ApiV1SupplierValuationsGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_feedbacks_v1_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1SupplierValuationsGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1SupplierValuationsGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_feedbacks_v1_service_proto_rawDescGZIP(), []int{16}
}

func (x *ApiV1SupplierValuationsGetRequest) GetXLocale() string {
	if x != nil {
		return x.XLocale
	}
	return ""
}

type ApiV1TemplatesDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiV1TemplatesDeleteReq *ApiV1TemplatesDeleteReq `protobuf:"bytes,1,opt,name=apiV1TemplatesDeleteReq,proto3" json:"apiV1TemplatesDeleteReq,omitempty"`
}

func (x *ApiV1TemplatesDeleteRequest) Reset() {
	*x = ApiV1TemplatesDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_feedbacks_v1_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1TemplatesDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1TemplatesDeleteRequest) ProtoMessage() {}

func (x *ApiV1TemplatesDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_feedbacks_v1_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1TemplatesDeleteRequest.ProtoReflect.Descriptor instead.
func (*ApiV1TemplatesDeleteRequest) Descriptor() ([]byte, []int) {
	return file_wb_feedbacks_v1_service_proto_rawDescGZIP(), []int{17}
}

func (x *ApiV1TemplatesDeleteRequest) GetApiV1TemplatesDeleteReq() *ApiV1TemplatesDeleteReq {
	if x != nil {
		return x.ApiV1TemplatesDeleteReq
	}
	return nil
}

type ApiV1TemplatesGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `1` - шаблоны для отзывов<br> `2` - шаблоны для вопросов
	TemplateType int32 `protobuf:"varint,1,opt,name=templateType,proto3" json:"templateType,omitempty"`
}

func (x *ApiV1TemplatesGetRequest) Reset() {
	*x = ApiV1TemplatesGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_feedbacks_v1_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1TemplatesGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1TemplatesGetRequest) ProtoMessage() {}

func (x *ApiV1TemplatesGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_feedbacks_v1_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1TemplatesGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1TemplatesGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_feedbacks_v1_service_proto_rawDescGZIP(), []int{18}
}

func (x *ApiV1TemplatesGetRequest) GetTemplateType() int32 {
	if x != nil {
		return x.TemplateType
	}
	return 0
}

type ApiV1TemplatesPatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiV1TemplatesPatchReq *ApiV1TemplatesPatchReq `protobuf:"bytes,1,opt,name=apiV1TemplatesPatchReq,proto3" json:"apiV1TemplatesPatchReq,omitempty"`
}

func (x *ApiV1TemplatesPatchRequest) Reset() {
	*x = ApiV1TemplatesPatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_feedbacks_v1_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1TemplatesPatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1TemplatesPatchRequest) ProtoMessage() {}

func (x *ApiV1TemplatesPatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_feedbacks_v1_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1TemplatesPatchRequest.ProtoReflect.Descriptor instead.
func (*ApiV1TemplatesPatchRequest) Descriptor() ([]byte, []int) {
	return file_wb_feedbacks_v1_service_proto_rawDescGZIP(), []int{19}
}

func (x *ApiV1TemplatesPatchRequest) GetApiV1TemplatesPatchReq() *ApiV1TemplatesPatchReq {
	if x != nil {
		return x.ApiV1TemplatesPatchReq
	}
	return nil
}

type ApiV1TemplatesPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiV1TemplatesPostReq *ApiV1TemplatesPostReq `protobuf:"bytes,1,opt,name=apiV1TemplatesPostReq,proto3" json:"apiV1TemplatesPostReq,omitempty"`
}

func (x *ApiV1TemplatesPostRequest) Reset() {
	*x = ApiV1TemplatesPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_feedbacks_v1_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1TemplatesPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1TemplatesPostRequest) ProtoMessage() {}

func (x *ApiV1TemplatesPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_feedbacks_v1_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1TemplatesPostRequest.ProtoReflect.Descriptor instead.
func (*ApiV1TemplatesPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_feedbacks_v1_service_proto_rawDescGZIP(), []int{20}
}

func (x *ApiV1TemplatesPostRequest) GetApiV1TemplatesPostReq() *ApiV1TemplatesPostReq {
	if x != nil {
		return x.ApiV1TemplatesPostReq
	}
	return nil
}

var File_wb_feedbacks_v1_service_proto protoreflect.FileDescriptor

var file_wb_feedbacks_v1_service_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x77, 0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x77,
	0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x67,
	0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x77, 0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x66, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x67,
	0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3c, 0x77, 0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x66, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74,
	0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x47, 0x77, 0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x77, 0x62, 0x2f,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69,
	0x5f, 0x76, 0x31, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x67, 0x65,
	0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x77, 0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x77, 0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x46, 0x77, 0x62, 0x2f,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69,
	0x5f, 0x76, 0x31, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x65,
	0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x4b, 0x77, 0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6d, 0x69, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30,
	0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x4a, 0x77, 0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x77, 0x62,
	0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70,
	0x69, 0x5f, 0x76, 0x31, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x77, 0x62, 0x2f,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69,
	0x5f, 0x76, 0x31, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x73, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x32,
	0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x3c, 0x77, 0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x35, 0x77, 0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3c, 0x77, 0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67,
	0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x47, 0x77, 0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x77,
	0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x77, 0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x32, 0x30, 0x30,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x34, 0x77, 0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x46, 0x77, 0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x77,
	0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x77, 0x62,
	0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70,
	0x69, 0x5f, 0x76, 0x31, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39,
	0x77, 0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35, 0x77, 0x62, 0x2f, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76,
	0x31, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x36, 0x77, 0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x77, 0x62, 0x2f, 0x66, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37,
	0x77, 0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x77, 0x62, 0x2f, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x77, 0x62,
	0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x65,
	0x72, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x29, 0x0a, 0x17, 0x41, 0x70, 0x69, 0x56,
	0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x73, 0x0a, 0x1f, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x6d,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x73, 0x0a, 0x1d, 0x41, 0x70, 0x69, 0x56,
	0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x22, 0xc0, 0x01,
	0x0a, 0x18, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6b,
	0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x6e, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x22, 0xa5, 0x01, 0x0a, 0x24, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7d, 0x0a, 0x20, 0x61, 0x70, 0x69,
	0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x20, 0x61, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x7d, 0x0a, 0x1a, 0x41, 0x70, 0x69, 0x56,
	0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x16, 0x61, 0x70, 0x69, 0x56, 0x31, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x52,
	0x16, 0x61, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x22, 0x46, 0x0a, 0x26, 0x41, 0x70, 0x69, 0x56, 0x31,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22,
	0x40, 0x0a, 0x2a, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4e,
	0x6d, 0x69, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x6d, 0x49,
	0x64, 0x22, 0x49, 0x0a, 0x29, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x70, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a,
	0x1e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x6b, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x29, 0x0a,
	0x17, 0x41, 0x70, 0x69, 0x56, 0x31, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x73, 0x0a, 0x1d, 0x41, 0x70, 0x69, 0x56,
	0x31, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x22, 0xc0, 0x01,
	0x0a, 0x18, 0x41, 0x70, 0x69, 0x56, 0x31, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6b,
	0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x6e, 0x6d, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x22, 0x7d, 0x0a, 0x1a, 0x41, 0x70, 0x69, 0x56, 0x31, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f,
	0x0a, 0x16, 0x61, 0x70, 0x69, 0x56, 0x31, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x52, 0x16, 0x61, 0x70, 0x69, 0x56, 0x31, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x22,
	0x3c, 0x0a, 0x26, 0x41, 0x70, 0x69, 0x56, 0x31, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x40, 0x0a,
	0x1e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x22,
	0x3d, 0x0a, 0x21, 0x41, 0x70, 0x69, 0x56, 0x31, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x78, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x78, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x81,
	0x01, 0x0a, 0x1b, 0x41, 0x70, 0x69, 0x56, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62,
	0x0a, 0x17, 0x61, 0x70, 0x69, 0x56, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x52, 0x17, 0x61, 0x70, 0x69, 0x56, 0x31,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x22, 0x3e, 0x0a, 0x18, 0x41, 0x70, 0x69, 0x56, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x7d, 0x0a, 0x1a, 0x41, 0x70, 0x69, 0x56, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5f, 0x0a, 0x16, 0x61, 0x70, 0x69, 0x56, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x52, 0x16, 0x61, 0x70, 0x69, 0x56, 0x31,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x22, 0x79, 0x0a, 0x19, 0x41, 0x70, 0x69, 0x56, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5c,
	0x0a, 0x15, 0x61, 0x70, 0x69, 0x56, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x69, 0x56, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x15, 0x61, 0x70, 0x69, 0x56, 0x31, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x32, 0xcb, 0x18, 0x0a,
	0x10, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x6a, 0x0a, 0x10, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x47, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x47,
	0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01,
	0x0a, 0x18, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x77, 0x62, 0x2e,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69,
	0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x77,
	0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x7c, 0x0a, 0x16, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x12, 0x2e, 0x2e, 0x77,
	0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x77,
	0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x78, 0x0a, 0x20, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65,
	0x64, 0x47, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x3c, 0x2e, 0x77,
	0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x55, 0x6e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x32,
	0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x11, 0x41, 0x70,
	0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x47, 0x65, 0x74, 0x12,
	0x29, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x77, 0x62, 0x2e,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69,
	0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x47, 0x65, 0x74, 0x32, 0x30,
	0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x1d, 0x41, 0x70,
	0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x35, 0x2e, 0x77, 0x62,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x13, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x2e, 0x77, 0x62, 0x2e,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69,
	0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x97, 0x01, 0x0a, 0x1f, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x47, 0x65, 0x74, 0x12, 0x37, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x77,
	0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x32, 0x30,
	0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x23, 0x41, 0x70,
	0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6d, 0x69, 0x64, 0x47, 0x65,
	0x74, 0x12, 0x3b, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x4e, 0x6d, 0x69, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f,
	0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4e, 0x6d, 0x69,
	0x64, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0xa0, 0x01, 0x0a, 0x22, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x70, 0x47, 0x65, 0x74, 0x12, 0x3a, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x70, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x6f, 0x70, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x7f, 0x0a, 0x17, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x74, 0x12, 0x2f, 0x2e,
	0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x1d, 0x41, 0x70, 0x69, 0x56, 0x31, 0x4e, 0x65, 0x77, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x47, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x39, 0x2e, 0x77,
	0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x69, 0x56, 0x31, 0x4e, 0x65, 0x77, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x16, 0x41, 0x70, 0x69, 0x56, 0x31,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47, 0x65,
	0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x32, 0x2e, 0x77, 0x62, 0x2e, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56,
	0x31, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x47,
	0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a,
	0x10, 0x41, 0x70, 0x69, 0x56, 0x31, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x74, 0x12, 0x28, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x77, 0x62,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x69, 0x56, 0x31, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x32, 0x30,
	0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x16, 0x41, 0x70, 0x69,
	0x56, 0x31, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x47, 0x65, 0x74, 0x12, 0x2e, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x20, 0x41, 0x70, 0x69, 0x56, 0x31,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x3c, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x6e, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x65, 0x64, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6d, 0x0a, 0x11, 0x41, 0x70, 0x69, 0x56, 0x31, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x47, 0x65, 0x74, 0x12, 0x29, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x73, 0x0a, 0x13, 0x41, 0x70, 0x69, 0x56, 0x31, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x1f, 0x41, 0x70, 0x69, 0x56, 0x31, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x12, 0x37, 0x2e, 0x77, 0x62, 0x2e, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56,
	0x31, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7f, 0x0a, 0x17, 0x41, 0x70, 0x69, 0x56, 0x31, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x74, 0x12, 0x2f, 0x2e, 0x77, 0x62, 0x2e,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69,
	0x56, 0x31, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x77, 0x62,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x69, 0x56, 0x31, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x88, 0x01, 0x0a, 0x1a, 0x41, 0x70, 0x69, 0x56, 0x31, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x65, 0x74, 0x12,
	0x32, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x47, 0x65, 0x74,
	0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x14, 0x41,
	0x70, 0x69, 0x56, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x2c, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x11, 0x41, 0x70, 0x69, 0x56, 0x31, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x47, 0x65, 0x74, 0x12, 0x29, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x74, 0x0a, 0x13, 0x41, 0x70, 0x69, 0x56, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x2e, 0x77, 0x62, 0x2e, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56,
	0x31, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x32, 0x30, 0x30,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x12, 0x41, 0x70, 0x69, 0x56,
	0x31, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x2a,
	0x2e, 0x77, 0x62, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x77, 0x62, 0x2e,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69,
	0x56, 0x31, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x32,
	0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41,
	0x49, 0x4f, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x77, 0x62, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x77, 0x62, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wb_feedbacks_v1_service_proto_rawDescOnce sync.Once
	file_wb_feedbacks_v1_service_proto_rawDescData = file_wb_feedbacks_v1_service_proto_rawDesc
)

func file_wb_feedbacks_v1_service_proto_rawDescGZIP() []byte {
	file_wb_feedbacks_v1_service_proto_rawDescOnce.Do(func() {
		file_wb_feedbacks_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_wb_feedbacks_v1_service_proto_rawDescData)
	})
	return file_wb_feedbacks_v1_service_proto_rawDescData
}

var file_wb_feedbacks_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_wb_feedbacks_v1_service_proto_goTypes = []interface{}{
	(*ApiV1FeedbackGetRequest)(nil),                        // 0: wb.feedbacks.v1.ApiV1FeedbackGetRequest
	(*ApiV1FeedbacksArchiveGetRequest)(nil),                // 1: wb.feedbacks.v1.ApiV1FeedbacksArchiveGetRequest
	(*ApiV1FeedbacksCountGetRequest)(nil),                  // 2: wb.feedbacks.v1.ApiV1FeedbacksCountGetRequest
	(*ApiV1FeedbacksGetRequest)(nil),                       // 3: wb.feedbacks.v1.ApiV1FeedbacksGetRequest
	(*ApiV1FeedbacksOrderReturnPostRequest)(nil),           // 4: wb.feedbacks.v1.ApiV1FeedbacksOrderReturnPostRequest
	(*ApiV1FeedbacksPatchRequest)(nil),                     // 5: wb.feedbacks.v1.ApiV1FeedbacksPatchRequest
	(*ApiV1FeedbacksProductsRatingGetRequest)(nil),         // 6: wb.feedbacks.v1.ApiV1FeedbacksProductsRatingGetRequest
	(*ApiV1FeedbacksProductsRatingNmidGetRequest)(nil),     // 7: wb.feedbacks.v1.ApiV1FeedbacksProductsRatingNmidGetRequest
	(*ApiV1FeedbacksProductsRatingTopGetRequest)(nil),      // 8: wb.feedbacks.v1.ApiV1FeedbacksProductsRatingTopGetRequest
	(*ApiV1FeedbacksReportGetRequest)(nil),                 // 9: wb.feedbacks.v1.ApiV1FeedbacksReportGetRequest
	(*ApiV1QuestionGetRequest)(nil),                        // 10: wb.feedbacks.v1.ApiV1QuestionGetRequest
	(*ApiV1QuestionsCountGetRequest)(nil),                  // 11: wb.feedbacks.v1.ApiV1QuestionsCountGetRequest
	(*ApiV1QuestionsGetRequest)(nil),                       // 12: wb.feedbacks.v1.ApiV1QuestionsGetRequest
	(*ApiV1QuestionsPatchRequest)(nil),                     // 13: wb.feedbacks.v1.ApiV1QuestionsPatchRequest
	(*ApiV1QuestionsProductsRatingGetRequest)(nil),         // 14: wb.feedbacks.v1.ApiV1QuestionsProductsRatingGetRequest
	(*ApiV1QuestionsReportGetRequest)(nil),                 // 15: wb.feedbacks.v1.ApiV1QuestionsReportGetRequest
	(*ApiV1SupplierValuationsGetRequest)(nil),              // 16: wb.feedbacks.v1.ApiV1SupplierValuationsGetRequest
	(*ApiV1TemplatesDeleteRequest)(nil),                    // 17: wb.feedbacks.v1.ApiV1TemplatesDeleteRequest
	(*ApiV1TemplatesGetRequest)(nil),                       // 18: wb.feedbacks.v1.ApiV1TemplatesGetRequest
	(*ApiV1TemplatesPatchRequest)(nil),                     // 19: wb.feedbacks.v1.ApiV1TemplatesPatchRequest
	(*ApiV1TemplatesPostRequest)(nil),                      // 20: wb.feedbacks.v1.ApiV1TemplatesPostRequest
	(*ApiV1FeedbacksOrderReturnPostReq)(nil),               // 21: wb.feedbacks.v1.ApiV1FeedbacksOrderReturnPostReq
	(*ApiV1FeedbacksPatchReq)(nil),                         // 22: wb.feedbacks.v1.ApiV1FeedbacksPatchReq
	(*ApiV1QuestionsPatchReq)(nil),                         // 23: wb.feedbacks.v1.ApiV1QuestionsPatchReq
	(*ApiV1TemplatesDeleteReq)(nil),                        // 24: wb.feedbacks.v1.ApiV1TemplatesDeleteReq
	(*ApiV1TemplatesPatchReq)(nil),                         // 25: wb.feedbacks.v1.ApiV1TemplatesPatchReq
	(*ApiV1TemplatesPostReq)(nil),                          // 26: wb.feedbacks.v1.ApiV1TemplatesPostReq
	(*emptypb.Empty)(nil),                                  // 27: google.protobuf.Empty
	(*ApiV1FeedbackGet200Response)(nil),                    // 28: wb.feedbacks.v1.ApiV1FeedbackGet200Response
	(*ApiV1FeedbacksArchiveGet200Response)(nil),            // 29: wb.feedbacks.v1.ApiV1FeedbacksArchiveGet200Response
	(*ApiV1FeedbacksCountGet200Response)(nil),              // 30: wb.feedbacks.v1.ApiV1FeedbacksCountGet200Response
	(*ApiV1FeedbacksCountUnansweredGet200Response)(nil),    // 31: wb.feedbacks.v1.ApiV1FeedbacksCountUnansweredGet200Response
	(*ApiV1FeedbacksGet200Response)(nil),                   // 32: wb.feedbacks.v1.ApiV1FeedbacksGet200Response
	(*ApiV1QuestionsPatch200Response)(nil),                 // 33: wb.feedbacks.v1.ApiV1QuestionsPatch200Response
	(*ApiV1FeedbacksProductsRatingGet200Response)(nil),     // 34: wb.feedbacks.v1.ApiV1FeedbacksProductsRatingGet200Response
	(*ApiV1FeedbacksProductsRatingNmidGet200Response)(nil), // 35: wb.feedbacks.v1.ApiV1FeedbacksProductsRatingNmidGet200Response
	(*ApiV1FeedbacksProductsRatingTopGet200Response)(nil),  // 36: wb.feedbacks.v1.ApiV1FeedbacksProductsRatingTopGet200Response
	(*ApiV1FeedbacksReportGet200Response)(nil),             // 37: wb.feedbacks.v1.ApiV1FeedbacksReportGet200Response
	(*ApiV1NewFeedbacksQuestionsGet200Response)(nil),       // 38: wb.feedbacks.v1.ApiV1NewFeedbacksQuestionsGet200Response
	(*ApiV1ParentSubjectsGet200Response)(nil),              // 39: wb.feedbacks.v1.ApiV1ParentSubjectsGet200Response
	(*ApiV1QuestionGet200Response)(nil),                    // 40: wb.feedbacks.v1.ApiV1QuestionGet200Response
	(*ApiV1QuestionsCountGet200Response)(nil),              // 41: wb.feedbacks.v1.ApiV1QuestionsCountGet200Response
	(*ApiV1QuestionsCountUnansweredGet200Response)(nil),    // 42: wb.feedbacks.v1.ApiV1QuestionsCountUnansweredGet200Response
	(*ApiV1QuestionsGet200Response)(nil),                   // 43: wb.feedbacks.v1.ApiV1QuestionsGet200Response
	(*ApiV1QuestionsProductsRatingGet200Response)(nil),     // 44: wb.feedbacks.v1.ApiV1QuestionsProductsRatingGet200Response
	(*ApiV1QuestionsReportGet200Response)(nil),             // 45: wb.feedbacks.v1.ApiV1QuestionsReportGet200Response
	(*ApiV1SupplierValuationsGet200Response)(nil),          // 46: wb.feedbacks.v1.ApiV1SupplierValuationsGet200Response
	(*ApiV1TemplatesDelete200Response)(nil),                // 47: wb.feedbacks.v1.ApiV1TemplatesDelete200Response
	(*ApiV1TemplatesGet200Response)(nil),                   // 48: wb.feedbacks.v1.ApiV1TemplatesGet200Response
	(*ApiV1TemplatesPost200Response)(nil),                  // 49: wb.feedbacks.v1.ApiV1TemplatesPost200Response
}
var file_wb_feedbacks_v1_service_proto_depIdxs = []int32{
	21, // 0: wb.feedbacks.v1.ApiV1FeedbacksOrderReturnPostRequest.apiV1FeedbacksOrderReturnPostReq:type_name -> wb.feedbacks.v1.ApiV1FeedbacksOrderReturnPostReq
	22, // 1: wb.feedbacks.v1.ApiV1FeedbacksPatchRequest.apiV1FeedbacksPatchReq:type_name -> wb.feedbacks.v1.ApiV1FeedbacksPatchReq
	23, // 2: wb.feedbacks.v1.ApiV1QuestionsPatchRequest.apiV1QuestionsPatchReq:type_name -> wb.feedbacks.v1.ApiV1QuestionsPatchReq
	24, // 3: wb.feedbacks.v1.ApiV1TemplatesDeleteRequest.apiV1TemplatesDeleteReq:type_name -> wb.feedbacks.v1.ApiV1TemplatesDeleteReq
	25, // 4: wb.feedbacks.v1.ApiV1TemplatesPatchRequest.apiV1TemplatesPatchReq:type_name -> wb.feedbacks.v1.ApiV1TemplatesPatchReq
	26, // 5: wb.feedbacks.v1.ApiV1TemplatesPostRequest.apiV1TemplatesPostReq:type_name -> wb.feedbacks.v1.ApiV1TemplatesPostReq
	0,  // 6: wb.feedbacks.v1.FeedbacksService.ApiV1FeedbackGet:input_type -> wb.feedbacks.v1.ApiV1FeedbackGetRequest
	1,  // 7: wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksArchiveGet:input_type -> wb.feedbacks.v1.ApiV1FeedbacksArchiveGetRequest
	2,  // 8: wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksCountGet:input_type -> wb.feedbacks.v1.ApiV1FeedbacksCountGetRequest
	27, // 9: wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksCountUnansweredGet:input_type -> google.protobuf.Empty
	3,  // 10: wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksGet:input_type -> wb.feedbacks.v1.ApiV1FeedbacksGetRequest
	4,  // 11: wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksOrderReturnPost:input_type -> wb.feedbacks.v1.ApiV1FeedbacksOrderReturnPostRequest
	5,  // 12: wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksPatch:input_type -> wb.feedbacks.v1.ApiV1FeedbacksPatchRequest
	6,  // 13: wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksProductsRatingGet:input_type -> wb.feedbacks.v1.ApiV1FeedbacksProductsRatingGetRequest
	7,  // 14: wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksProductsRatingNmidGet:input_type -> wb.feedbacks.v1.ApiV1FeedbacksProductsRatingNmidGetRequest
	8,  // 15: wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksProductsRatingTopGet:input_type -> wb.feedbacks.v1.ApiV1FeedbacksProductsRatingTopGetRequest
	9,  // 16: wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksReportGet:input_type -> wb.feedbacks.v1.ApiV1FeedbacksReportGetRequest
	27, // 17: wb.feedbacks.v1.FeedbacksService.ApiV1NewFeedbacksQuestionsGet:input_type -> google.protobuf.Empty
	27, // 18: wb.feedbacks.v1.FeedbacksService.ApiV1ParentSubjectsGet:input_type -> google.protobuf.Empty
	10, // 19: wb.feedbacks.v1.FeedbacksService.ApiV1QuestionGet:input_type -> wb.feedbacks.v1.ApiV1QuestionGetRequest
	11, // 20: wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsCountGet:input_type -> wb.feedbacks.v1.ApiV1QuestionsCountGetRequest
	27, // 21: wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsCountUnansweredGet:input_type -> google.protobuf.Empty
	12, // 22: wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsGet:input_type -> wb.feedbacks.v1.ApiV1QuestionsGetRequest
	13, // 23: wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsPatch:input_type -> wb.feedbacks.v1.ApiV1QuestionsPatchRequest
	14, // 24: wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsProductsRatingGet:input_type -> wb.feedbacks.v1.ApiV1QuestionsProductsRatingGetRequest
	15, // 25: wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsReportGet:input_type -> wb.feedbacks.v1.ApiV1QuestionsReportGetRequest
	16, // 26: wb.feedbacks.v1.FeedbacksService.ApiV1SupplierValuationsGet:input_type -> wb.feedbacks.v1.ApiV1SupplierValuationsGetRequest
	17, // 27: wb.feedbacks.v1.FeedbacksService.ApiV1TemplatesDelete:input_type -> wb.feedbacks.v1.ApiV1TemplatesDeleteRequest
	18, // 28: wb.feedbacks.v1.FeedbacksService.ApiV1TemplatesGet:input_type -> wb.feedbacks.v1.ApiV1TemplatesGetRequest
	19, // 29: wb.feedbacks.v1.FeedbacksService.ApiV1TemplatesPatch:input_type -> wb.feedbacks.v1.ApiV1TemplatesPatchRequest
	20, // 30: wb.feedbacks.v1.FeedbacksService.ApiV1TemplatesPost:input_type -> wb.feedbacks.v1.ApiV1TemplatesPostRequest
	28, // 31: wb.feedbacks.v1.FeedbacksService.ApiV1FeedbackGet:output_type -> wb.feedbacks.v1.ApiV1FeedbackGet200Response
	29, // 32: wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksArchiveGet:output_type -> wb.feedbacks.v1.ApiV1FeedbacksArchiveGet200Response
	30, // 33: wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksCountGet:output_type -> wb.feedbacks.v1.ApiV1FeedbacksCountGet200Response
	31, // 34: wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksCountUnansweredGet:output_type -> wb.feedbacks.v1.ApiV1FeedbacksCountUnansweredGet200Response
	32, // 35: wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksGet:output_type -> wb.feedbacks.v1.ApiV1FeedbacksGet200Response
	33, // 36: wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksOrderReturnPost:output_type -> wb.feedbacks.v1.ApiV1QuestionsPatch200Response
	27, // 37: wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksPatch:output_type -> google.protobuf.Empty
	34, // 38: wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksProductsRatingGet:output_type -> wb.feedbacks.v1.ApiV1FeedbacksProductsRatingGet200Response
	35, // 39: wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksProductsRatingNmidGet:output_type -> wb.feedbacks.v1.ApiV1FeedbacksProductsRatingNmidGet200Response
	36, // 40: wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksProductsRatingTopGet:output_type -> wb.feedbacks.v1.ApiV1FeedbacksProductsRatingTopGet200Response
	37, // 41: wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksReportGet:output_type -> wb.feedbacks.v1.ApiV1FeedbacksReportGet200Response
	38, // 42: wb.feedbacks.v1.FeedbacksService.ApiV1NewFeedbacksQuestionsGet:output_type -> wb.feedbacks.v1.ApiV1NewFeedbacksQuestionsGet200Response
	39, // 43: wb.feedbacks.v1.FeedbacksService.ApiV1ParentSubjectsGet:output_type -> wb.feedbacks.v1.ApiV1ParentSubjectsGet200Response
	40, // 44: wb.feedbacks.v1.FeedbacksService.ApiV1QuestionGet:output_type -> wb.feedbacks.v1.ApiV1QuestionGet200Response
	41, // 45: wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsCountGet:output_type -> wb.feedbacks.v1.ApiV1QuestionsCountGet200Response
	42, // 46: wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsCountUnansweredGet:output_type -> wb.feedbacks.v1.ApiV1QuestionsCountUnansweredGet200Response
	43, // 47: wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsGet:output_type -> wb.feedbacks.v1.ApiV1QuestionsGet200Response
	33, // 48: wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsPatch:output_type -> wb.feedbacks.v1.ApiV1QuestionsPatch200Response
	44, // 49: wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsProductsRatingGet:output_type -> wb.feedbacks.v1.ApiV1QuestionsProductsRatingGet200Response
	45, // 50: wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsReportGet:output_type -> wb.feedbacks.v1.ApiV1QuestionsReportGet200Response
	46, // 51: wb.feedbacks.v1.FeedbacksService.ApiV1SupplierValuationsGet:output_type -> wb.feedbacks.v1.ApiV1SupplierValuationsGet200Response
	47, // 52: wb.feedbacks.v1.FeedbacksService.ApiV1TemplatesDelete:output_type -> wb.feedbacks.v1.ApiV1TemplatesDelete200Response
	48, // 53: wb.feedbacks.v1.FeedbacksService.ApiV1TemplatesGet:output_type -> wb.feedbacks.v1.ApiV1TemplatesGet200Response
	47, // 54: wb.feedbacks.v1.FeedbacksService.ApiV1TemplatesPatch:output_type -> wb.feedbacks.v1.ApiV1TemplatesDelete200Response
	49, // 55: wb.feedbacks.v1.FeedbacksService.ApiV1TemplatesPost:output_type -> wb.feedbacks.v1.ApiV1TemplatesPost200Response
	31, // [31:56] is the sub-list for method output_type
	6,  // [6:31] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_wb_feedbacks_v1_service_proto_init() }
func file_wb_feedbacks_v1_service_proto_init() {
	if File_wb_feedbacks_v1_service_proto != nil {
		return
	}
	file_wb_feedbacks_v1_api_v1_feedback_get200_response_proto_init()
	file_wb_feedbacks_v1_api_v1_feedbacks_archive_get200_response_proto_init()
	file_wb_feedbacks_v1_api_v1_feedbacks_count_get200_response_proto_init()
	file_wb_feedbacks_v1_api_v1_feedbacks_count_unanswered_get200_response_proto_init()
	file_wb_feedbacks_v1_api_v1_feedbacks_get200_response_proto_init()
	file_wb_feedbacks_v1_api_v1_feedbacks_order_return_post_request_proto_init()
	file_wb_feedbacks_v1_api_v1_feedbacks_patch_request_proto_init()
	file_wb_feedbacks_v1_api_v1_feedbacks_products_rating_get200_response_proto_init()
	file_wb_feedbacks_v1_api_v1_feedbacks_products_rating_nmid_get200_response_proto_init()
	file_wb_feedbacks_v1_api_v1_feedbacks_products_rating_top_get200_response_proto_init()
	file_wb_feedbacks_v1_api_v1_feedbacks_report_get200_response_proto_init()
	file_wb_feedbacks_v1_api_v1_new_feedbacks_questions_get200_response_proto_init()
	file_wb_feedbacks_v1_api_v1_parent_subjects_get200_response_proto_init()
	file_wb_feedbacks_v1_api_v1_question_get200_response_proto_init()
	file_wb_feedbacks_v1_api_v1_questions_count_get200_response_proto_init()
	file_wb_feedbacks_v1_api_v1_questions_count_unanswered_get200_response_proto_init()
	file_wb_feedbacks_v1_api_v1_questions_get200_response_proto_init()
	file_wb_feedbacks_v1_api_v1_questions_patch200_response_proto_init()
	file_wb_feedbacks_v1_api_v1_questions_patch_request_proto_init()
	file_wb_feedbacks_v1_api_v1_questions_products_rating_get200_response_proto_init()
	file_wb_feedbacks_v1_api_v1_questions_report_get200_response_proto_init()
	file_wb_feedbacks_v1_api_v1_supplier_valuations_get200_response_proto_init()
	file_wb_feedbacks_v1_api_v1_templates_delete200_response_proto_init()
	file_wb_feedbacks_v1_api_v1_templates_delete_request_proto_init()
	file_wb_feedbacks_v1_api_v1_templates_get200_response_proto_init()
	file_wb_feedbacks_v1_api_v1_templates_patch_request_proto_init()
	file_wb_feedbacks_v1_api_v1_templates_post200_response_proto_init()
	file_wb_feedbacks_v1_api_v1_templates_post_request_proto_init()
	file_wb_feedbacks_v1_responsefeedback_err_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_wb_feedbacks_v1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1FeedbackGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_feedbacks_v1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1FeedbacksArchiveGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_feedbacks_v1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1FeedbacksCountGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_feedbacks_v1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1FeedbacksGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_feedbacks_v1_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1FeedbacksOrderReturnPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_feedbacks_v1_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1FeedbacksPatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_feedbacks_v1_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1FeedbacksProductsRatingGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_feedbacks_v1_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1FeedbacksProductsRatingNmidGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_feedbacks_v1_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1FeedbacksProductsRatingTopGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_feedbacks_v1_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1FeedbacksReportGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_feedbacks_v1_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1QuestionGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_feedbacks_v1_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1QuestionsCountGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_feedbacks_v1_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1QuestionsGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_feedbacks_v1_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1QuestionsPatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_feedbacks_v1_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1QuestionsProductsRatingGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_feedbacks_v1_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1QuestionsReportGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_feedbacks_v1_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1SupplierValuationsGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_feedbacks_v1_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1TemplatesDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_feedbacks_v1_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1TemplatesGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_feedbacks_v1_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1TemplatesPatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_feedbacks_v1_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1TemplatesPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wb_feedbacks_v1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wb_feedbacks_v1_service_proto_goTypes,
		DependencyIndexes: file_wb_feedbacks_v1_service_proto_depIdxs,
		MessageInfos:      file_wb_feedbacks_v1_service_proto_msgTypes,
	}.Build()
	File_wb_feedbacks_v1_service_proto = out.File
	file_wb_feedbacks_v1_service_proto_rawDesc = nil
	file_wb_feedbacks_v1_service_proto_goTypes = nil
	file_wb_feedbacks_v1_service_proto_depIdxs = nil
}
