//
//Описание API Вопросов и Отзывов
//
//`Важно.` Допускается 1 запрос в секунду на методы вопросов и отзывов в целом. При превышении лимита до 3 запросов в секунду последует блокировка на 60 секунд.
//
//The version of the OpenAPI document:
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wb/feedbacks/v1/service.proto

package wbFeedbacksconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/MarketAIO/market-proto/gen/go/wb/feedbacks/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FeedbacksServiceName is the fully-qualified name of the FeedbacksService service.
	FeedbacksServiceName = "wb.feedbacks.v1.FeedbacksService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FeedbacksServiceApiV1FeedbackGetProcedure is the fully-qualified name of the FeedbacksService's
	// ApiV1FeedbackGet RPC.
	FeedbacksServiceApiV1FeedbackGetProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1FeedbackGet"
	// FeedbacksServiceApiV1FeedbacksArchiveGetProcedure is the fully-qualified name of the
	// FeedbacksService's ApiV1FeedbacksArchiveGet RPC.
	FeedbacksServiceApiV1FeedbacksArchiveGetProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1FeedbacksArchiveGet"
	// FeedbacksServiceApiV1FeedbacksCountGetProcedure is the fully-qualified name of the
	// FeedbacksService's ApiV1FeedbacksCountGet RPC.
	FeedbacksServiceApiV1FeedbacksCountGetProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1FeedbacksCountGet"
	// FeedbacksServiceApiV1FeedbacksCountUnansweredGetProcedure is the fully-qualified name of the
	// FeedbacksService's ApiV1FeedbacksCountUnansweredGet RPC.
	FeedbacksServiceApiV1FeedbacksCountUnansweredGetProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1FeedbacksCountUnansweredGet"
	// FeedbacksServiceApiV1FeedbacksGetProcedure is the fully-qualified name of the FeedbacksService's
	// ApiV1FeedbacksGet RPC.
	FeedbacksServiceApiV1FeedbacksGetProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1FeedbacksGet"
	// FeedbacksServiceApiV1FeedbacksOrderReturnPostProcedure is the fully-qualified name of the
	// FeedbacksService's ApiV1FeedbacksOrderReturnPost RPC.
	FeedbacksServiceApiV1FeedbacksOrderReturnPostProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1FeedbacksOrderReturnPost"
	// FeedbacksServiceApiV1FeedbacksPatchProcedure is the fully-qualified name of the
	// FeedbacksService's ApiV1FeedbacksPatch RPC.
	FeedbacksServiceApiV1FeedbacksPatchProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1FeedbacksPatch"
	// FeedbacksServiceApiV1FeedbacksProductsRatingGetProcedure is the fully-qualified name of the
	// FeedbacksService's ApiV1FeedbacksProductsRatingGet RPC.
	FeedbacksServiceApiV1FeedbacksProductsRatingGetProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1FeedbacksProductsRatingGet"
	// FeedbacksServiceApiV1FeedbacksProductsRatingNmidGetProcedure is the fully-qualified name of the
	// FeedbacksService's ApiV1FeedbacksProductsRatingNmidGet RPC.
	FeedbacksServiceApiV1FeedbacksProductsRatingNmidGetProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1FeedbacksProductsRatingNmidGet"
	// FeedbacksServiceApiV1FeedbacksProductsRatingTopGetProcedure is the fully-qualified name of the
	// FeedbacksService's ApiV1FeedbacksProductsRatingTopGet RPC.
	FeedbacksServiceApiV1FeedbacksProductsRatingTopGetProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1FeedbacksProductsRatingTopGet"
	// FeedbacksServiceApiV1FeedbacksReportGetProcedure is the fully-qualified name of the
	// FeedbacksService's ApiV1FeedbacksReportGet RPC.
	FeedbacksServiceApiV1FeedbacksReportGetProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1FeedbacksReportGet"
	// FeedbacksServiceApiV1NewFeedbacksQuestionsGetProcedure is the fully-qualified name of the
	// FeedbacksService's ApiV1NewFeedbacksQuestionsGet RPC.
	FeedbacksServiceApiV1NewFeedbacksQuestionsGetProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1NewFeedbacksQuestionsGet"
	// FeedbacksServiceApiV1ParentSubjectsGetProcedure is the fully-qualified name of the
	// FeedbacksService's ApiV1ParentSubjectsGet RPC.
	FeedbacksServiceApiV1ParentSubjectsGetProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1ParentSubjectsGet"
	// FeedbacksServiceApiV1QuestionGetProcedure is the fully-qualified name of the FeedbacksService's
	// ApiV1QuestionGet RPC.
	FeedbacksServiceApiV1QuestionGetProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1QuestionGet"
	// FeedbacksServiceApiV1QuestionsCountGetProcedure is the fully-qualified name of the
	// FeedbacksService's ApiV1QuestionsCountGet RPC.
	FeedbacksServiceApiV1QuestionsCountGetProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1QuestionsCountGet"
	// FeedbacksServiceApiV1QuestionsCountUnansweredGetProcedure is the fully-qualified name of the
	// FeedbacksService's ApiV1QuestionsCountUnansweredGet RPC.
	FeedbacksServiceApiV1QuestionsCountUnansweredGetProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1QuestionsCountUnansweredGet"
	// FeedbacksServiceApiV1QuestionsGetProcedure is the fully-qualified name of the FeedbacksService's
	// ApiV1QuestionsGet RPC.
	FeedbacksServiceApiV1QuestionsGetProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1QuestionsGet"
	// FeedbacksServiceApiV1QuestionsPatchProcedure is the fully-qualified name of the
	// FeedbacksService's ApiV1QuestionsPatch RPC.
	FeedbacksServiceApiV1QuestionsPatchProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1QuestionsPatch"
	// FeedbacksServiceApiV1QuestionsProductsRatingGetProcedure is the fully-qualified name of the
	// FeedbacksService's ApiV1QuestionsProductsRatingGet RPC.
	FeedbacksServiceApiV1QuestionsProductsRatingGetProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1QuestionsProductsRatingGet"
	// FeedbacksServiceApiV1QuestionsReportGetProcedure is the fully-qualified name of the
	// FeedbacksService's ApiV1QuestionsReportGet RPC.
	FeedbacksServiceApiV1QuestionsReportGetProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1QuestionsReportGet"
	// FeedbacksServiceApiV1SupplierValuationsGetProcedure is the fully-qualified name of the
	// FeedbacksService's ApiV1SupplierValuationsGet RPC.
	FeedbacksServiceApiV1SupplierValuationsGetProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1SupplierValuationsGet"
	// FeedbacksServiceApiV1TemplatesDeleteProcedure is the fully-qualified name of the
	// FeedbacksService's ApiV1TemplatesDelete RPC.
	FeedbacksServiceApiV1TemplatesDeleteProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1TemplatesDelete"
	// FeedbacksServiceApiV1TemplatesGetProcedure is the fully-qualified name of the FeedbacksService's
	// ApiV1TemplatesGet RPC.
	FeedbacksServiceApiV1TemplatesGetProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1TemplatesGet"
	// FeedbacksServiceApiV1TemplatesPatchProcedure is the fully-qualified name of the
	// FeedbacksService's ApiV1TemplatesPatch RPC.
	FeedbacksServiceApiV1TemplatesPatchProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1TemplatesPatch"
	// FeedbacksServiceApiV1TemplatesPostProcedure is the fully-qualified name of the FeedbacksService's
	// ApiV1TemplatesPost RPC.
	FeedbacksServiceApiV1TemplatesPostProcedure = "/wb.feedbacks.v1.FeedbacksService/ApiV1TemplatesPost"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	feedbacksServiceServiceDescriptor                                   = v1.File_wb_feedbacks_v1_service_proto.Services().ByName("FeedbacksService")
	feedbacksServiceApiV1FeedbackGetMethodDescriptor                    = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1FeedbackGet")
	feedbacksServiceApiV1FeedbacksArchiveGetMethodDescriptor            = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1FeedbacksArchiveGet")
	feedbacksServiceApiV1FeedbacksCountGetMethodDescriptor              = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1FeedbacksCountGet")
	feedbacksServiceApiV1FeedbacksCountUnansweredGetMethodDescriptor    = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1FeedbacksCountUnansweredGet")
	feedbacksServiceApiV1FeedbacksGetMethodDescriptor                   = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1FeedbacksGet")
	feedbacksServiceApiV1FeedbacksOrderReturnPostMethodDescriptor       = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1FeedbacksOrderReturnPost")
	feedbacksServiceApiV1FeedbacksPatchMethodDescriptor                 = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1FeedbacksPatch")
	feedbacksServiceApiV1FeedbacksProductsRatingGetMethodDescriptor     = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1FeedbacksProductsRatingGet")
	feedbacksServiceApiV1FeedbacksProductsRatingNmidGetMethodDescriptor = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1FeedbacksProductsRatingNmidGet")
	feedbacksServiceApiV1FeedbacksProductsRatingTopGetMethodDescriptor  = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1FeedbacksProductsRatingTopGet")
	feedbacksServiceApiV1FeedbacksReportGetMethodDescriptor             = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1FeedbacksReportGet")
	feedbacksServiceApiV1NewFeedbacksQuestionsGetMethodDescriptor       = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1NewFeedbacksQuestionsGet")
	feedbacksServiceApiV1ParentSubjectsGetMethodDescriptor              = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1ParentSubjectsGet")
	feedbacksServiceApiV1QuestionGetMethodDescriptor                    = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1QuestionGet")
	feedbacksServiceApiV1QuestionsCountGetMethodDescriptor              = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1QuestionsCountGet")
	feedbacksServiceApiV1QuestionsCountUnansweredGetMethodDescriptor    = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1QuestionsCountUnansweredGet")
	feedbacksServiceApiV1QuestionsGetMethodDescriptor                   = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1QuestionsGet")
	feedbacksServiceApiV1QuestionsPatchMethodDescriptor                 = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1QuestionsPatch")
	feedbacksServiceApiV1QuestionsProductsRatingGetMethodDescriptor     = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1QuestionsProductsRatingGet")
	feedbacksServiceApiV1QuestionsReportGetMethodDescriptor             = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1QuestionsReportGet")
	feedbacksServiceApiV1SupplierValuationsGetMethodDescriptor          = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1SupplierValuationsGet")
	feedbacksServiceApiV1TemplatesDeleteMethodDescriptor                = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1TemplatesDelete")
	feedbacksServiceApiV1TemplatesGetMethodDescriptor                   = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1TemplatesGet")
	feedbacksServiceApiV1TemplatesPatchMethodDescriptor                 = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1TemplatesPatch")
	feedbacksServiceApiV1TemplatesPostMethodDescriptor                  = feedbacksServiceServiceDescriptor.Methods().ByName("ApiV1TemplatesPost")
)

// FeedbacksServiceClient is a client for the wb.feedbacks.v1.FeedbacksService service.
type FeedbacksServiceClient interface {
	ApiV1FeedbackGet(context.Context, *connect.Request[v1.ApiV1FeedbackGetRequest]) (*connect.Response[v1.ApiV1FeedbackGet200Response], error)
	ApiV1FeedbacksArchiveGet(context.Context, *connect.Request[v1.ApiV1FeedbacksArchiveGetRequest]) (*connect.Response[v1.ApiV1FeedbacksArchiveGet200Response], error)
	ApiV1FeedbacksCountGet(context.Context, *connect.Request[v1.ApiV1FeedbacksCountGetRequest]) (*connect.Response[v1.ApiV1FeedbacksCountGet200Response], error)
	ApiV1FeedbacksCountUnansweredGet(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ApiV1FeedbacksCountUnansweredGet200Response], error)
	ApiV1FeedbacksGet(context.Context, *connect.Request[v1.ApiV1FeedbacksGetRequest]) (*connect.Response[v1.ApiV1FeedbacksGet200Response], error)
	ApiV1FeedbacksOrderReturnPost(context.Context, *connect.Request[v1.ApiV1FeedbacksOrderReturnPostRequest]) (*connect.Response[v1.ApiV1QuestionsPatch200Response], error)
	ApiV1FeedbacksPatch(context.Context, *connect.Request[v1.ApiV1FeedbacksPatchRequest]) (*connect.Response[emptypb.Empty], error)
	ApiV1FeedbacksProductsRatingGet(context.Context, *connect.Request[v1.ApiV1FeedbacksProductsRatingGetRequest]) (*connect.Response[v1.ApiV1FeedbacksProductsRatingGet200Response], error)
	ApiV1FeedbacksProductsRatingNmidGet(context.Context, *connect.Request[v1.ApiV1FeedbacksProductsRatingNmidGetRequest]) (*connect.Response[v1.ApiV1FeedbacksProductsRatingNmidGet200Response], error)
	ApiV1FeedbacksProductsRatingTopGet(context.Context, *connect.Request[v1.ApiV1FeedbacksProductsRatingTopGetRequest]) (*connect.Response[v1.ApiV1FeedbacksProductsRatingTopGet200Response], error)
	ApiV1FeedbacksReportGet(context.Context, *connect.Request[v1.ApiV1FeedbacksReportGetRequest]) (*connect.Response[v1.ApiV1FeedbacksReportGet200Response], error)
	ApiV1NewFeedbacksQuestionsGet(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ApiV1NewFeedbacksQuestionsGet200Response], error)
	ApiV1ParentSubjectsGet(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ApiV1ParentSubjectsGet200Response], error)
	ApiV1QuestionGet(context.Context, *connect.Request[v1.ApiV1QuestionGetRequest]) (*connect.Response[v1.ApiV1QuestionGet200Response], error)
	ApiV1QuestionsCountGet(context.Context, *connect.Request[v1.ApiV1QuestionsCountGetRequest]) (*connect.Response[v1.ApiV1QuestionsCountGet200Response], error)
	ApiV1QuestionsCountUnansweredGet(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ApiV1QuestionsCountUnansweredGet200Response], error)
	ApiV1QuestionsGet(context.Context, *connect.Request[v1.ApiV1QuestionsGetRequest]) (*connect.Response[v1.ApiV1QuestionsGet200Response], error)
	ApiV1QuestionsPatch(context.Context, *connect.Request[v1.ApiV1QuestionsPatchRequest]) (*connect.Response[v1.ApiV1QuestionsPatch200Response], error)
	ApiV1QuestionsProductsRatingGet(context.Context, *connect.Request[v1.ApiV1QuestionsProductsRatingGetRequest]) (*connect.Response[v1.ApiV1QuestionsProductsRatingGet200Response], error)
	ApiV1QuestionsReportGet(context.Context, *connect.Request[v1.ApiV1QuestionsReportGetRequest]) (*connect.Response[v1.ApiV1QuestionsReportGet200Response], error)
	ApiV1SupplierValuationsGet(context.Context, *connect.Request[v1.ApiV1SupplierValuationsGetRequest]) (*connect.Response[v1.ApiV1SupplierValuationsGet200Response], error)
	ApiV1TemplatesDelete(context.Context, *connect.Request[v1.ApiV1TemplatesDeleteRequest]) (*connect.Response[v1.ApiV1TemplatesDelete200Response], error)
	ApiV1TemplatesGet(context.Context, *connect.Request[v1.ApiV1TemplatesGetRequest]) (*connect.Response[v1.ApiV1TemplatesGet200Response], error)
	ApiV1TemplatesPatch(context.Context, *connect.Request[v1.ApiV1TemplatesPatchRequest]) (*connect.Response[v1.ApiV1TemplatesDelete200Response], error)
	ApiV1TemplatesPost(context.Context, *connect.Request[v1.ApiV1TemplatesPostRequest]) (*connect.Response[v1.ApiV1TemplatesPost200Response], error)
}

// NewFeedbacksServiceClient constructs a client for the wb.feedbacks.v1.FeedbacksService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFeedbacksServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FeedbacksServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &feedbacksServiceClient{
		apiV1FeedbackGet: connect.NewClient[v1.ApiV1FeedbackGetRequest, v1.ApiV1FeedbackGet200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1FeedbackGetProcedure,
			connect.WithSchema(feedbacksServiceApiV1FeedbackGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1FeedbacksArchiveGet: connect.NewClient[v1.ApiV1FeedbacksArchiveGetRequest, v1.ApiV1FeedbacksArchiveGet200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1FeedbacksArchiveGetProcedure,
			connect.WithSchema(feedbacksServiceApiV1FeedbacksArchiveGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1FeedbacksCountGet: connect.NewClient[v1.ApiV1FeedbacksCountGetRequest, v1.ApiV1FeedbacksCountGet200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1FeedbacksCountGetProcedure,
			connect.WithSchema(feedbacksServiceApiV1FeedbacksCountGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1FeedbacksCountUnansweredGet: connect.NewClient[emptypb.Empty, v1.ApiV1FeedbacksCountUnansweredGet200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1FeedbacksCountUnansweredGetProcedure,
			connect.WithSchema(feedbacksServiceApiV1FeedbacksCountUnansweredGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1FeedbacksGet: connect.NewClient[v1.ApiV1FeedbacksGetRequest, v1.ApiV1FeedbacksGet200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1FeedbacksGetProcedure,
			connect.WithSchema(feedbacksServiceApiV1FeedbacksGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1FeedbacksOrderReturnPost: connect.NewClient[v1.ApiV1FeedbacksOrderReturnPostRequest, v1.ApiV1QuestionsPatch200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1FeedbacksOrderReturnPostProcedure,
			connect.WithSchema(feedbacksServiceApiV1FeedbacksOrderReturnPostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1FeedbacksPatch: connect.NewClient[v1.ApiV1FeedbacksPatchRequest, emptypb.Empty](
			httpClient,
			baseURL+FeedbacksServiceApiV1FeedbacksPatchProcedure,
			connect.WithSchema(feedbacksServiceApiV1FeedbacksPatchMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1FeedbacksProductsRatingGet: connect.NewClient[v1.ApiV1FeedbacksProductsRatingGetRequest, v1.ApiV1FeedbacksProductsRatingGet200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1FeedbacksProductsRatingGetProcedure,
			connect.WithSchema(feedbacksServiceApiV1FeedbacksProductsRatingGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1FeedbacksProductsRatingNmidGet: connect.NewClient[v1.ApiV1FeedbacksProductsRatingNmidGetRequest, v1.ApiV1FeedbacksProductsRatingNmidGet200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1FeedbacksProductsRatingNmidGetProcedure,
			connect.WithSchema(feedbacksServiceApiV1FeedbacksProductsRatingNmidGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1FeedbacksProductsRatingTopGet: connect.NewClient[v1.ApiV1FeedbacksProductsRatingTopGetRequest, v1.ApiV1FeedbacksProductsRatingTopGet200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1FeedbacksProductsRatingTopGetProcedure,
			connect.WithSchema(feedbacksServiceApiV1FeedbacksProductsRatingTopGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1FeedbacksReportGet: connect.NewClient[v1.ApiV1FeedbacksReportGetRequest, v1.ApiV1FeedbacksReportGet200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1FeedbacksReportGetProcedure,
			connect.WithSchema(feedbacksServiceApiV1FeedbacksReportGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1NewFeedbacksQuestionsGet: connect.NewClient[emptypb.Empty, v1.ApiV1NewFeedbacksQuestionsGet200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1NewFeedbacksQuestionsGetProcedure,
			connect.WithSchema(feedbacksServiceApiV1NewFeedbacksQuestionsGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1ParentSubjectsGet: connect.NewClient[emptypb.Empty, v1.ApiV1ParentSubjectsGet200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1ParentSubjectsGetProcedure,
			connect.WithSchema(feedbacksServiceApiV1ParentSubjectsGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1QuestionGet: connect.NewClient[v1.ApiV1QuestionGetRequest, v1.ApiV1QuestionGet200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1QuestionGetProcedure,
			connect.WithSchema(feedbacksServiceApiV1QuestionGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1QuestionsCountGet: connect.NewClient[v1.ApiV1QuestionsCountGetRequest, v1.ApiV1QuestionsCountGet200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1QuestionsCountGetProcedure,
			connect.WithSchema(feedbacksServiceApiV1QuestionsCountGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1QuestionsCountUnansweredGet: connect.NewClient[emptypb.Empty, v1.ApiV1QuestionsCountUnansweredGet200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1QuestionsCountUnansweredGetProcedure,
			connect.WithSchema(feedbacksServiceApiV1QuestionsCountUnansweredGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1QuestionsGet: connect.NewClient[v1.ApiV1QuestionsGetRequest, v1.ApiV1QuestionsGet200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1QuestionsGetProcedure,
			connect.WithSchema(feedbacksServiceApiV1QuestionsGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1QuestionsPatch: connect.NewClient[v1.ApiV1QuestionsPatchRequest, v1.ApiV1QuestionsPatch200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1QuestionsPatchProcedure,
			connect.WithSchema(feedbacksServiceApiV1QuestionsPatchMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1QuestionsProductsRatingGet: connect.NewClient[v1.ApiV1QuestionsProductsRatingGetRequest, v1.ApiV1QuestionsProductsRatingGet200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1QuestionsProductsRatingGetProcedure,
			connect.WithSchema(feedbacksServiceApiV1QuestionsProductsRatingGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1QuestionsReportGet: connect.NewClient[v1.ApiV1QuestionsReportGetRequest, v1.ApiV1QuestionsReportGet200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1QuestionsReportGetProcedure,
			connect.WithSchema(feedbacksServiceApiV1QuestionsReportGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1SupplierValuationsGet: connect.NewClient[v1.ApiV1SupplierValuationsGetRequest, v1.ApiV1SupplierValuationsGet200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1SupplierValuationsGetProcedure,
			connect.WithSchema(feedbacksServiceApiV1SupplierValuationsGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1TemplatesDelete: connect.NewClient[v1.ApiV1TemplatesDeleteRequest, v1.ApiV1TemplatesDelete200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1TemplatesDeleteProcedure,
			connect.WithSchema(feedbacksServiceApiV1TemplatesDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1TemplatesGet: connect.NewClient[v1.ApiV1TemplatesGetRequest, v1.ApiV1TemplatesGet200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1TemplatesGetProcedure,
			connect.WithSchema(feedbacksServiceApiV1TemplatesGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1TemplatesPatch: connect.NewClient[v1.ApiV1TemplatesPatchRequest, v1.ApiV1TemplatesDelete200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1TemplatesPatchProcedure,
			connect.WithSchema(feedbacksServiceApiV1TemplatesPatchMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		apiV1TemplatesPost: connect.NewClient[v1.ApiV1TemplatesPostRequest, v1.ApiV1TemplatesPost200Response](
			httpClient,
			baseURL+FeedbacksServiceApiV1TemplatesPostProcedure,
			connect.WithSchema(feedbacksServiceApiV1TemplatesPostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// feedbacksServiceClient implements FeedbacksServiceClient.
type feedbacksServiceClient struct {
	apiV1FeedbackGet                    *connect.Client[v1.ApiV1FeedbackGetRequest, v1.ApiV1FeedbackGet200Response]
	apiV1FeedbacksArchiveGet            *connect.Client[v1.ApiV1FeedbacksArchiveGetRequest, v1.ApiV1FeedbacksArchiveGet200Response]
	apiV1FeedbacksCountGet              *connect.Client[v1.ApiV1FeedbacksCountGetRequest, v1.ApiV1FeedbacksCountGet200Response]
	apiV1FeedbacksCountUnansweredGet    *connect.Client[emptypb.Empty, v1.ApiV1FeedbacksCountUnansweredGet200Response]
	apiV1FeedbacksGet                   *connect.Client[v1.ApiV1FeedbacksGetRequest, v1.ApiV1FeedbacksGet200Response]
	apiV1FeedbacksOrderReturnPost       *connect.Client[v1.ApiV1FeedbacksOrderReturnPostRequest, v1.ApiV1QuestionsPatch200Response]
	apiV1FeedbacksPatch                 *connect.Client[v1.ApiV1FeedbacksPatchRequest, emptypb.Empty]
	apiV1FeedbacksProductsRatingGet     *connect.Client[v1.ApiV1FeedbacksProductsRatingGetRequest, v1.ApiV1FeedbacksProductsRatingGet200Response]
	apiV1FeedbacksProductsRatingNmidGet *connect.Client[v1.ApiV1FeedbacksProductsRatingNmidGetRequest, v1.ApiV1FeedbacksProductsRatingNmidGet200Response]
	apiV1FeedbacksProductsRatingTopGet  *connect.Client[v1.ApiV1FeedbacksProductsRatingTopGetRequest, v1.ApiV1FeedbacksProductsRatingTopGet200Response]
	apiV1FeedbacksReportGet             *connect.Client[v1.ApiV1FeedbacksReportGetRequest, v1.ApiV1FeedbacksReportGet200Response]
	apiV1NewFeedbacksQuestionsGet       *connect.Client[emptypb.Empty, v1.ApiV1NewFeedbacksQuestionsGet200Response]
	apiV1ParentSubjectsGet              *connect.Client[emptypb.Empty, v1.ApiV1ParentSubjectsGet200Response]
	apiV1QuestionGet                    *connect.Client[v1.ApiV1QuestionGetRequest, v1.ApiV1QuestionGet200Response]
	apiV1QuestionsCountGet              *connect.Client[v1.ApiV1QuestionsCountGetRequest, v1.ApiV1QuestionsCountGet200Response]
	apiV1QuestionsCountUnansweredGet    *connect.Client[emptypb.Empty, v1.ApiV1QuestionsCountUnansweredGet200Response]
	apiV1QuestionsGet                   *connect.Client[v1.ApiV1QuestionsGetRequest, v1.ApiV1QuestionsGet200Response]
	apiV1QuestionsPatch                 *connect.Client[v1.ApiV1QuestionsPatchRequest, v1.ApiV1QuestionsPatch200Response]
	apiV1QuestionsProductsRatingGet     *connect.Client[v1.ApiV1QuestionsProductsRatingGetRequest, v1.ApiV1QuestionsProductsRatingGet200Response]
	apiV1QuestionsReportGet             *connect.Client[v1.ApiV1QuestionsReportGetRequest, v1.ApiV1QuestionsReportGet200Response]
	apiV1SupplierValuationsGet          *connect.Client[v1.ApiV1SupplierValuationsGetRequest, v1.ApiV1SupplierValuationsGet200Response]
	apiV1TemplatesDelete                *connect.Client[v1.ApiV1TemplatesDeleteRequest, v1.ApiV1TemplatesDelete200Response]
	apiV1TemplatesGet                   *connect.Client[v1.ApiV1TemplatesGetRequest, v1.ApiV1TemplatesGet200Response]
	apiV1TemplatesPatch                 *connect.Client[v1.ApiV1TemplatesPatchRequest, v1.ApiV1TemplatesDelete200Response]
	apiV1TemplatesPost                  *connect.Client[v1.ApiV1TemplatesPostRequest, v1.ApiV1TemplatesPost200Response]
}

// ApiV1FeedbackGet calls wb.feedbacks.v1.FeedbacksService.ApiV1FeedbackGet.
func (c *feedbacksServiceClient) ApiV1FeedbackGet(ctx context.Context, req *connect.Request[v1.ApiV1FeedbackGetRequest]) (*connect.Response[v1.ApiV1FeedbackGet200Response], error) {
	return c.apiV1FeedbackGet.CallUnary(ctx, req)
}

// ApiV1FeedbacksArchiveGet calls wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksArchiveGet.
func (c *feedbacksServiceClient) ApiV1FeedbacksArchiveGet(ctx context.Context, req *connect.Request[v1.ApiV1FeedbacksArchiveGetRequest]) (*connect.Response[v1.ApiV1FeedbacksArchiveGet200Response], error) {
	return c.apiV1FeedbacksArchiveGet.CallUnary(ctx, req)
}

// ApiV1FeedbacksCountGet calls wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksCountGet.
func (c *feedbacksServiceClient) ApiV1FeedbacksCountGet(ctx context.Context, req *connect.Request[v1.ApiV1FeedbacksCountGetRequest]) (*connect.Response[v1.ApiV1FeedbacksCountGet200Response], error) {
	return c.apiV1FeedbacksCountGet.CallUnary(ctx, req)
}

// ApiV1FeedbacksCountUnansweredGet calls
// wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksCountUnansweredGet.
func (c *feedbacksServiceClient) ApiV1FeedbacksCountUnansweredGet(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ApiV1FeedbacksCountUnansweredGet200Response], error) {
	return c.apiV1FeedbacksCountUnansweredGet.CallUnary(ctx, req)
}

// ApiV1FeedbacksGet calls wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksGet.
func (c *feedbacksServiceClient) ApiV1FeedbacksGet(ctx context.Context, req *connect.Request[v1.ApiV1FeedbacksGetRequest]) (*connect.Response[v1.ApiV1FeedbacksGet200Response], error) {
	return c.apiV1FeedbacksGet.CallUnary(ctx, req)
}

// ApiV1FeedbacksOrderReturnPost calls
// wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksOrderReturnPost.
func (c *feedbacksServiceClient) ApiV1FeedbacksOrderReturnPost(ctx context.Context, req *connect.Request[v1.ApiV1FeedbacksOrderReturnPostRequest]) (*connect.Response[v1.ApiV1QuestionsPatch200Response], error) {
	return c.apiV1FeedbacksOrderReturnPost.CallUnary(ctx, req)
}

// ApiV1FeedbacksPatch calls wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksPatch.
func (c *feedbacksServiceClient) ApiV1FeedbacksPatch(ctx context.Context, req *connect.Request[v1.ApiV1FeedbacksPatchRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.apiV1FeedbacksPatch.CallUnary(ctx, req)
}

// ApiV1FeedbacksProductsRatingGet calls
// wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksProductsRatingGet.
func (c *feedbacksServiceClient) ApiV1FeedbacksProductsRatingGet(ctx context.Context, req *connect.Request[v1.ApiV1FeedbacksProductsRatingGetRequest]) (*connect.Response[v1.ApiV1FeedbacksProductsRatingGet200Response], error) {
	return c.apiV1FeedbacksProductsRatingGet.CallUnary(ctx, req)
}

// ApiV1FeedbacksProductsRatingNmidGet calls
// wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksProductsRatingNmidGet.
func (c *feedbacksServiceClient) ApiV1FeedbacksProductsRatingNmidGet(ctx context.Context, req *connect.Request[v1.ApiV1FeedbacksProductsRatingNmidGetRequest]) (*connect.Response[v1.ApiV1FeedbacksProductsRatingNmidGet200Response], error) {
	return c.apiV1FeedbacksProductsRatingNmidGet.CallUnary(ctx, req)
}

// ApiV1FeedbacksProductsRatingTopGet calls
// wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksProductsRatingTopGet.
func (c *feedbacksServiceClient) ApiV1FeedbacksProductsRatingTopGet(ctx context.Context, req *connect.Request[v1.ApiV1FeedbacksProductsRatingTopGetRequest]) (*connect.Response[v1.ApiV1FeedbacksProductsRatingTopGet200Response], error) {
	return c.apiV1FeedbacksProductsRatingTopGet.CallUnary(ctx, req)
}

// ApiV1FeedbacksReportGet calls wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksReportGet.
func (c *feedbacksServiceClient) ApiV1FeedbacksReportGet(ctx context.Context, req *connect.Request[v1.ApiV1FeedbacksReportGetRequest]) (*connect.Response[v1.ApiV1FeedbacksReportGet200Response], error) {
	return c.apiV1FeedbacksReportGet.CallUnary(ctx, req)
}

// ApiV1NewFeedbacksQuestionsGet calls
// wb.feedbacks.v1.FeedbacksService.ApiV1NewFeedbacksQuestionsGet.
func (c *feedbacksServiceClient) ApiV1NewFeedbacksQuestionsGet(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ApiV1NewFeedbacksQuestionsGet200Response], error) {
	return c.apiV1NewFeedbacksQuestionsGet.CallUnary(ctx, req)
}

// ApiV1ParentSubjectsGet calls wb.feedbacks.v1.FeedbacksService.ApiV1ParentSubjectsGet.
func (c *feedbacksServiceClient) ApiV1ParentSubjectsGet(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ApiV1ParentSubjectsGet200Response], error) {
	return c.apiV1ParentSubjectsGet.CallUnary(ctx, req)
}

// ApiV1QuestionGet calls wb.feedbacks.v1.FeedbacksService.ApiV1QuestionGet.
func (c *feedbacksServiceClient) ApiV1QuestionGet(ctx context.Context, req *connect.Request[v1.ApiV1QuestionGetRequest]) (*connect.Response[v1.ApiV1QuestionGet200Response], error) {
	return c.apiV1QuestionGet.CallUnary(ctx, req)
}

// ApiV1QuestionsCountGet calls wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsCountGet.
func (c *feedbacksServiceClient) ApiV1QuestionsCountGet(ctx context.Context, req *connect.Request[v1.ApiV1QuestionsCountGetRequest]) (*connect.Response[v1.ApiV1QuestionsCountGet200Response], error) {
	return c.apiV1QuestionsCountGet.CallUnary(ctx, req)
}

// ApiV1QuestionsCountUnansweredGet calls
// wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsCountUnansweredGet.
func (c *feedbacksServiceClient) ApiV1QuestionsCountUnansweredGet(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ApiV1QuestionsCountUnansweredGet200Response], error) {
	return c.apiV1QuestionsCountUnansweredGet.CallUnary(ctx, req)
}

// ApiV1QuestionsGet calls wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsGet.
func (c *feedbacksServiceClient) ApiV1QuestionsGet(ctx context.Context, req *connect.Request[v1.ApiV1QuestionsGetRequest]) (*connect.Response[v1.ApiV1QuestionsGet200Response], error) {
	return c.apiV1QuestionsGet.CallUnary(ctx, req)
}

// ApiV1QuestionsPatch calls wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsPatch.
func (c *feedbacksServiceClient) ApiV1QuestionsPatch(ctx context.Context, req *connect.Request[v1.ApiV1QuestionsPatchRequest]) (*connect.Response[v1.ApiV1QuestionsPatch200Response], error) {
	return c.apiV1QuestionsPatch.CallUnary(ctx, req)
}

// ApiV1QuestionsProductsRatingGet calls
// wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsProductsRatingGet.
func (c *feedbacksServiceClient) ApiV1QuestionsProductsRatingGet(ctx context.Context, req *connect.Request[v1.ApiV1QuestionsProductsRatingGetRequest]) (*connect.Response[v1.ApiV1QuestionsProductsRatingGet200Response], error) {
	return c.apiV1QuestionsProductsRatingGet.CallUnary(ctx, req)
}

// ApiV1QuestionsReportGet calls wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsReportGet.
func (c *feedbacksServiceClient) ApiV1QuestionsReportGet(ctx context.Context, req *connect.Request[v1.ApiV1QuestionsReportGetRequest]) (*connect.Response[v1.ApiV1QuestionsReportGet200Response], error) {
	return c.apiV1QuestionsReportGet.CallUnary(ctx, req)
}

// ApiV1SupplierValuationsGet calls wb.feedbacks.v1.FeedbacksService.ApiV1SupplierValuationsGet.
func (c *feedbacksServiceClient) ApiV1SupplierValuationsGet(ctx context.Context, req *connect.Request[v1.ApiV1SupplierValuationsGetRequest]) (*connect.Response[v1.ApiV1SupplierValuationsGet200Response], error) {
	return c.apiV1SupplierValuationsGet.CallUnary(ctx, req)
}

// ApiV1TemplatesDelete calls wb.feedbacks.v1.FeedbacksService.ApiV1TemplatesDelete.
func (c *feedbacksServiceClient) ApiV1TemplatesDelete(ctx context.Context, req *connect.Request[v1.ApiV1TemplatesDeleteRequest]) (*connect.Response[v1.ApiV1TemplatesDelete200Response], error) {
	return c.apiV1TemplatesDelete.CallUnary(ctx, req)
}

// ApiV1TemplatesGet calls wb.feedbacks.v1.FeedbacksService.ApiV1TemplatesGet.
func (c *feedbacksServiceClient) ApiV1TemplatesGet(ctx context.Context, req *connect.Request[v1.ApiV1TemplatesGetRequest]) (*connect.Response[v1.ApiV1TemplatesGet200Response], error) {
	return c.apiV1TemplatesGet.CallUnary(ctx, req)
}

// ApiV1TemplatesPatch calls wb.feedbacks.v1.FeedbacksService.ApiV1TemplatesPatch.
func (c *feedbacksServiceClient) ApiV1TemplatesPatch(ctx context.Context, req *connect.Request[v1.ApiV1TemplatesPatchRequest]) (*connect.Response[v1.ApiV1TemplatesDelete200Response], error) {
	return c.apiV1TemplatesPatch.CallUnary(ctx, req)
}

// ApiV1TemplatesPost calls wb.feedbacks.v1.FeedbacksService.ApiV1TemplatesPost.
func (c *feedbacksServiceClient) ApiV1TemplatesPost(ctx context.Context, req *connect.Request[v1.ApiV1TemplatesPostRequest]) (*connect.Response[v1.ApiV1TemplatesPost200Response], error) {
	return c.apiV1TemplatesPost.CallUnary(ctx, req)
}

// FeedbacksServiceHandler is an implementation of the wb.feedbacks.v1.FeedbacksService service.
type FeedbacksServiceHandler interface {
	ApiV1FeedbackGet(context.Context, *connect.Request[v1.ApiV1FeedbackGetRequest]) (*connect.Response[v1.ApiV1FeedbackGet200Response], error)
	ApiV1FeedbacksArchiveGet(context.Context, *connect.Request[v1.ApiV1FeedbacksArchiveGetRequest]) (*connect.Response[v1.ApiV1FeedbacksArchiveGet200Response], error)
	ApiV1FeedbacksCountGet(context.Context, *connect.Request[v1.ApiV1FeedbacksCountGetRequest]) (*connect.Response[v1.ApiV1FeedbacksCountGet200Response], error)
	ApiV1FeedbacksCountUnansweredGet(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ApiV1FeedbacksCountUnansweredGet200Response], error)
	ApiV1FeedbacksGet(context.Context, *connect.Request[v1.ApiV1FeedbacksGetRequest]) (*connect.Response[v1.ApiV1FeedbacksGet200Response], error)
	ApiV1FeedbacksOrderReturnPost(context.Context, *connect.Request[v1.ApiV1FeedbacksOrderReturnPostRequest]) (*connect.Response[v1.ApiV1QuestionsPatch200Response], error)
	ApiV1FeedbacksPatch(context.Context, *connect.Request[v1.ApiV1FeedbacksPatchRequest]) (*connect.Response[emptypb.Empty], error)
	ApiV1FeedbacksProductsRatingGet(context.Context, *connect.Request[v1.ApiV1FeedbacksProductsRatingGetRequest]) (*connect.Response[v1.ApiV1FeedbacksProductsRatingGet200Response], error)
	ApiV1FeedbacksProductsRatingNmidGet(context.Context, *connect.Request[v1.ApiV1FeedbacksProductsRatingNmidGetRequest]) (*connect.Response[v1.ApiV1FeedbacksProductsRatingNmidGet200Response], error)
	ApiV1FeedbacksProductsRatingTopGet(context.Context, *connect.Request[v1.ApiV1FeedbacksProductsRatingTopGetRequest]) (*connect.Response[v1.ApiV1FeedbacksProductsRatingTopGet200Response], error)
	ApiV1FeedbacksReportGet(context.Context, *connect.Request[v1.ApiV1FeedbacksReportGetRequest]) (*connect.Response[v1.ApiV1FeedbacksReportGet200Response], error)
	ApiV1NewFeedbacksQuestionsGet(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ApiV1NewFeedbacksQuestionsGet200Response], error)
	ApiV1ParentSubjectsGet(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ApiV1ParentSubjectsGet200Response], error)
	ApiV1QuestionGet(context.Context, *connect.Request[v1.ApiV1QuestionGetRequest]) (*connect.Response[v1.ApiV1QuestionGet200Response], error)
	ApiV1QuestionsCountGet(context.Context, *connect.Request[v1.ApiV1QuestionsCountGetRequest]) (*connect.Response[v1.ApiV1QuestionsCountGet200Response], error)
	ApiV1QuestionsCountUnansweredGet(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ApiV1QuestionsCountUnansweredGet200Response], error)
	ApiV1QuestionsGet(context.Context, *connect.Request[v1.ApiV1QuestionsGetRequest]) (*connect.Response[v1.ApiV1QuestionsGet200Response], error)
	ApiV1QuestionsPatch(context.Context, *connect.Request[v1.ApiV1QuestionsPatchRequest]) (*connect.Response[v1.ApiV1QuestionsPatch200Response], error)
	ApiV1QuestionsProductsRatingGet(context.Context, *connect.Request[v1.ApiV1QuestionsProductsRatingGetRequest]) (*connect.Response[v1.ApiV1QuestionsProductsRatingGet200Response], error)
	ApiV1QuestionsReportGet(context.Context, *connect.Request[v1.ApiV1QuestionsReportGetRequest]) (*connect.Response[v1.ApiV1QuestionsReportGet200Response], error)
	ApiV1SupplierValuationsGet(context.Context, *connect.Request[v1.ApiV1SupplierValuationsGetRequest]) (*connect.Response[v1.ApiV1SupplierValuationsGet200Response], error)
	ApiV1TemplatesDelete(context.Context, *connect.Request[v1.ApiV1TemplatesDeleteRequest]) (*connect.Response[v1.ApiV1TemplatesDelete200Response], error)
	ApiV1TemplatesGet(context.Context, *connect.Request[v1.ApiV1TemplatesGetRequest]) (*connect.Response[v1.ApiV1TemplatesGet200Response], error)
	ApiV1TemplatesPatch(context.Context, *connect.Request[v1.ApiV1TemplatesPatchRequest]) (*connect.Response[v1.ApiV1TemplatesDelete200Response], error)
	ApiV1TemplatesPost(context.Context, *connect.Request[v1.ApiV1TemplatesPostRequest]) (*connect.Response[v1.ApiV1TemplatesPost200Response], error)
}

// NewFeedbacksServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFeedbacksServiceHandler(svc FeedbacksServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	feedbacksServiceApiV1FeedbackGetHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1FeedbackGetProcedure,
		svc.ApiV1FeedbackGet,
		connect.WithSchema(feedbacksServiceApiV1FeedbackGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1FeedbacksArchiveGetHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1FeedbacksArchiveGetProcedure,
		svc.ApiV1FeedbacksArchiveGet,
		connect.WithSchema(feedbacksServiceApiV1FeedbacksArchiveGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1FeedbacksCountGetHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1FeedbacksCountGetProcedure,
		svc.ApiV1FeedbacksCountGet,
		connect.WithSchema(feedbacksServiceApiV1FeedbacksCountGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1FeedbacksCountUnansweredGetHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1FeedbacksCountUnansweredGetProcedure,
		svc.ApiV1FeedbacksCountUnansweredGet,
		connect.WithSchema(feedbacksServiceApiV1FeedbacksCountUnansweredGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1FeedbacksGetHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1FeedbacksGetProcedure,
		svc.ApiV1FeedbacksGet,
		connect.WithSchema(feedbacksServiceApiV1FeedbacksGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1FeedbacksOrderReturnPostHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1FeedbacksOrderReturnPostProcedure,
		svc.ApiV1FeedbacksOrderReturnPost,
		connect.WithSchema(feedbacksServiceApiV1FeedbacksOrderReturnPostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1FeedbacksPatchHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1FeedbacksPatchProcedure,
		svc.ApiV1FeedbacksPatch,
		connect.WithSchema(feedbacksServiceApiV1FeedbacksPatchMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1FeedbacksProductsRatingGetHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1FeedbacksProductsRatingGetProcedure,
		svc.ApiV1FeedbacksProductsRatingGet,
		connect.WithSchema(feedbacksServiceApiV1FeedbacksProductsRatingGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1FeedbacksProductsRatingNmidGetHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1FeedbacksProductsRatingNmidGetProcedure,
		svc.ApiV1FeedbacksProductsRatingNmidGet,
		connect.WithSchema(feedbacksServiceApiV1FeedbacksProductsRatingNmidGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1FeedbacksProductsRatingTopGetHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1FeedbacksProductsRatingTopGetProcedure,
		svc.ApiV1FeedbacksProductsRatingTopGet,
		connect.WithSchema(feedbacksServiceApiV1FeedbacksProductsRatingTopGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1FeedbacksReportGetHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1FeedbacksReportGetProcedure,
		svc.ApiV1FeedbacksReportGet,
		connect.WithSchema(feedbacksServiceApiV1FeedbacksReportGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1NewFeedbacksQuestionsGetHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1NewFeedbacksQuestionsGetProcedure,
		svc.ApiV1NewFeedbacksQuestionsGet,
		connect.WithSchema(feedbacksServiceApiV1NewFeedbacksQuestionsGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1ParentSubjectsGetHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1ParentSubjectsGetProcedure,
		svc.ApiV1ParentSubjectsGet,
		connect.WithSchema(feedbacksServiceApiV1ParentSubjectsGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1QuestionGetHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1QuestionGetProcedure,
		svc.ApiV1QuestionGet,
		connect.WithSchema(feedbacksServiceApiV1QuestionGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1QuestionsCountGetHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1QuestionsCountGetProcedure,
		svc.ApiV1QuestionsCountGet,
		connect.WithSchema(feedbacksServiceApiV1QuestionsCountGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1QuestionsCountUnansweredGetHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1QuestionsCountUnansweredGetProcedure,
		svc.ApiV1QuestionsCountUnansweredGet,
		connect.WithSchema(feedbacksServiceApiV1QuestionsCountUnansweredGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1QuestionsGetHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1QuestionsGetProcedure,
		svc.ApiV1QuestionsGet,
		connect.WithSchema(feedbacksServiceApiV1QuestionsGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1QuestionsPatchHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1QuestionsPatchProcedure,
		svc.ApiV1QuestionsPatch,
		connect.WithSchema(feedbacksServiceApiV1QuestionsPatchMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1QuestionsProductsRatingGetHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1QuestionsProductsRatingGetProcedure,
		svc.ApiV1QuestionsProductsRatingGet,
		connect.WithSchema(feedbacksServiceApiV1QuestionsProductsRatingGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1QuestionsReportGetHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1QuestionsReportGetProcedure,
		svc.ApiV1QuestionsReportGet,
		connect.WithSchema(feedbacksServiceApiV1QuestionsReportGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1SupplierValuationsGetHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1SupplierValuationsGetProcedure,
		svc.ApiV1SupplierValuationsGet,
		connect.WithSchema(feedbacksServiceApiV1SupplierValuationsGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1TemplatesDeleteHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1TemplatesDeleteProcedure,
		svc.ApiV1TemplatesDelete,
		connect.WithSchema(feedbacksServiceApiV1TemplatesDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1TemplatesGetHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1TemplatesGetProcedure,
		svc.ApiV1TemplatesGet,
		connect.WithSchema(feedbacksServiceApiV1TemplatesGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1TemplatesPatchHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1TemplatesPatchProcedure,
		svc.ApiV1TemplatesPatch,
		connect.WithSchema(feedbacksServiceApiV1TemplatesPatchMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	feedbacksServiceApiV1TemplatesPostHandler := connect.NewUnaryHandler(
		FeedbacksServiceApiV1TemplatesPostProcedure,
		svc.ApiV1TemplatesPost,
		connect.WithSchema(feedbacksServiceApiV1TemplatesPostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/wb.feedbacks.v1.FeedbacksService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FeedbacksServiceApiV1FeedbackGetProcedure:
			feedbacksServiceApiV1FeedbackGetHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1FeedbacksArchiveGetProcedure:
			feedbacksServiceApiV1FeedbacksArchiveGetHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1FeedbacksCountGetProcedure:
			feedbacksServiceApiV1FeedbacksCountGetHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1FeedbacksCountUnansweredGetProcedure:
			feedbacksServiceApiV1FeedbacksCountUnansweredGetHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1FeedbacksGetProcedure:
			feedbacksServiceApiV1FeedbacksGetHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1FeedbacksOrderReturnPostProcedure:
			feedbacksServiceApiV1FeedbacksOrderReturnPostHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1FeedbacksPatchProcedure:
			feedbacksServiceApiV1FeedbacksPatchHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1FeedbacksProductsRatingGetProcedure:
			feedbacksServiceApiV1FeedbacksProductsRatingGetHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1FeedbacksProductsRatingNmidGetProcedure:
			feedbacksServiceApiV1FeedbacksProductsRatingNmidGetHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1FeedbacksProductsRatingTopGetProcedure:
			feedbacksServiceApiV1FeedbacksProductsRatingTopGetHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1FeedbacksReportGetProcedure:
			feedbacksServiceApiV1FeedbacksReportGetHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1NewFeedbacksQuestionsGetProcedure:
			feedbacksServiceApiV1NewFeedbacksQuestionsGetHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1ParentSubjectsGetProcedure:
			feedbacksServiceApiV1ParentSubjectsGetHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1QuestionGetProcedure:
			feedbacksServiceApiV1QuestionGetHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1QuestionsCountGetProcedure:
			feedbacksServiceApiV1QuestionsCountGetHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1QuestionsCountUnansweredGetProcedure:
			feedbacksServiceApiV1QuestionsCountUnansweredGetHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1QuestionsGetProcedure:
			feedbacksServiceApiV1QuestionsGetHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1QuestionsPatchProcedure:
			feedbacksServiceApiV1QuestionsPatchHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1QuestionsProductsRatingGetProcedure:
			feedbacksServiceApiV1QuestionsProductsRatingGetHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1QuestionsReportGetProcedure:
			feedbacksServiceApiV1QuestionsReportGetHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1SupplierValuationsGetProcedure:
			feedbacksServiceApiV1SupplierValuationsGetHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1TemplatesDeleteProcedure:
			feedbacksServiceApiV1TemplatesDeleteHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1TemplatesGetProcedure:
			feedbacksServiceApiV1TemplatesGetHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1TemplatesPatchProcedure:
			feedbacksServiceApiV1TemplatesPatchHandler.ServeHTTP(w, r)
		case FeedbacksServiceApiV1TemplatesPostProcedure:
			feedbacksServiceApiV1TemplatesPostHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFeedbacksServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFeedbacksServiceHandler struct{}

func (UnimplementedFeedbacksServiceHandler) ApiV1FeedbackGet(context.Context, *connect.Request[v1.ApiV1FeedbackGetRequest]) (*connect.Response[v1.ApiV1FeedbackGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1FeedbackGet is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1FeedbacksArchiveGet(context.Context, *connect.Request[v1.ApiV1FeedbacksArchiveGetRequest]) (*connect.Response[v1.ApiV1FeedbacksArchiveGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksArchiveGet is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1FeedbacksCountGet(context.Context, *connect.Request[v1.ApiV1FeedbacksCountGetRequest]) (*connect.Response[v1.ApiV1FeedbacksCountGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksCountGet is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1FeedbacksCountUnansweredGet(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ApiV1FeedbacksCountUnansweredGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksCountUnansweredGet is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1FeedbacksGet(context.Context, *connect.Request[v1.ApiV1FeedbacksGetRequest]) (*connect.Response[v1.ApiV1FeedbacksGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksGet is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1FeedbacksOrderReturnPost(context.Context, *connect.Request[v1.ApiV1FeedbacksOrderReturnPostRequest]) (*connect.Response[v1.ApiV1QuestionsPatch200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksOrderReturnPost is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1FeedbacksPatch(context.Context, *connect.Request[v1.ApiV1FeedbacksPatchRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksPatch is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1FeedbacksProductsRatingGet(context.Context, *connect.Request[v1.ApiV1FeedbacksProductsRatingGetRequest]) (*connect.Response[v1.ApiV1FeedbacksProductsRatingGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksProductsRatingGet is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1FeedbacksProductsRatingNmidGet(context.Context, *connect.Request[v1.ApiV1FeedbacksProductsRatingNmidGetRequest]) (*connect.Response[v1.ApiV1FeedbacksProductsRatingNmidGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksProductsRatingNmidGet is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1FeedbacksProductsRatingTopGet(context.Context, *connect.Request[v1.ApiV1FeedbacksProductsRatingTopGetRequest]) (*connect.Response[v1.ApiV1FeedbacksProductsRatingTopGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksProductsRatingTopGet is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1FeedbacksReportGet(context.Context, *connect.Request[v1.ApiV1FeedbacksReportGetRequest]) (*connect.Response[v1.ApiV1FeedbacksReportGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1FeedbacksReportGet is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1NewFeedbacksQuestionsGet(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ApiV1NewFeedbacksQuestionsGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1NewFeedbacksQuestionsGet is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1ParentSubjectsGet(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ApiV1ParentSubjectsGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1ParentSubjectsGet is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1QuestionGet(context.Context, *connect.Request[v1.ApiV1QuestionGetRequest]) (*connect.Response[v1.ApiV1QuestionGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1QuestionGet is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1QuestionsCountGet(context.Context, *connect.Request[v1.ApiV1QuestionsCountGetRequest]) (*connect.Response[v1.ApiV1QuestionsCountGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsCountGet is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1QuestionsCountUnansweredGet(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ApiV1QuestionsCountUnansweredGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsCountUnansweredGet is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1QuestionsGet(context.Context, *connect.Request[v1.ApiV1QuestionsGetRequest]) (*connect.Response[v1.ApiV1QuestionsGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsGet is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1QuestionsPatch(context.Context, *connect.Request[v1.ApiV1QuestionsPatchRequest]) (*connect.Response[v1.ApiV1QuestionsPatch200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsPatch is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1QuestionsProductsRatingGet(context.Context, *connect.Request[v1.ApiV1QuestionsProductsRatingGetRequest]) (*connect.Response[v1.ApiV1QuestionsProductsRatingGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsProductsRatingGet is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1QuestionsReportGet(context.Context, *connect.Request[v1.ApiV1QuestionsReportGetRequest]) (*connect.Response[v1.ApiV1QuestionsReportGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1QuestionsReportGet is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1SupplierValuationsGet(context.Context, *connect.Request[v1.ApiV1SupplierValuationsGetRequest]) (*connect.Response[v1.ApiV1SupplierValuationsGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1SupplierValuationsGet is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1TemplatesDelete(context.Context, *connect.Request[v1.ApiV1TemplatesDeleteRequest]) (*connect.Response[v1.ApiV1TemplatesDelete200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1TemplatesDelete is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1TemplatesGet(context.Context, *connect.Request[v1.ApiV1TemplatesGetRequest]) (*connect.Response[v1.ApiV1TemplatesGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1TemplatesGet is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1TemplatesPatch(context.Context, *connect.Request[v1.ApiV1TemplatesPatchRequest]) (*connect.Response[v1.ApiV1TemplatesDelete200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1TemplatesPatch is not implemented"))
}

func (UnimplementedFeedbacksServiceHandler) ApiV1TemplatesPost(context.Context, *connect.Request[v1.ApiV1TemplatesPostRequest]) (*connect.Response[v1.ApiV1TemplatesPost200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.feedbacks.v1.FeedbacksService.ApiV1TemplatesPost is not implemented"))
}
