//
//Описание API Контента
//
//<dl> <dt>Словарь сокращений:</dt> <dd>КТ — карточка товара</dd> <dd>НМ — номенклатура</dd> </dl> Ограничения по количеству запросов: <dd>Допускается максимум 100 запросов в минуту на методы контента в целом.</dd>  <br> Публичное API Контента создано для синхронизации данных между серверами Wildberries и серверами продавцов. <br> Вы загружаете данные на свои носители, работаете с ними на своих мощностях и синхронизируетесь с нашими серверами по мере необходимости. <br> <code>Не допускается использование API Контента в качестве внешней базы данных. При превышении лимитов на запросы доступ к API будет ограничен.</code>
//
//The version of the OpenAPI document:
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: wb/content/v1/_service.proto

package wbCONTENT

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContentV2BarcodesPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentV2BarcodesPostReq *ContentV2BarcodesPostReq `protobuf:"bytes,1,opt,name=contentV2BarcodesPostReq,proto3" json:"contentV2BarcodesPostReq,omitempty"`
}

func (x *ContentV2BarcodesPostRequest) Reset() {
	*x = ContentV2BarcodesPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2BarcodesPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2BarcodesPostRequest) ProtoMessage() {}

func (x *ContentV2BarcodesPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2BarcodesPostRequest.ProtoReflect.Descriptor instead.
func (*ContentV2BarcodesPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{0}
}

func (x *ContentV2BarcodesPostRequest) GetContentV2BarcodesPostReq() *ContentV2BarcodesPostReq {
	if x != nil {
		return x.ContentV2BarcodesPostReq
	}
	return nil
}

type ContentV2CardsDeleteTrashPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentV2CardsDeleteTrashPostReqInner []*ContentV2CardsDeleteTrashPostReqInner `protobuf:"bytes,1,rep,name=contentV2CardsDeleteTrashPostReqInner,proto3" json:"contentV2CardsDeleteTrashPostReqInner,omitempty"`
}

func (x *ContentV2CardsDeleteTrashPostRequest) Reset() {
	*x = ContentV2CardsDeleteTrashPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2CardsDeleteTrashPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2CardsDeleteTrashPostRequest) ProtoMessage() {}

func (x *ContentV2CardsDeleteTrashPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2CardsDeleteTrashPostRequest.ProtoReflect.Descriptor instead.
func (*ContentV2CardsDeleteTrashPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{1}
}

func (x *ContentV2CardsDeleteTrashPostRequest) GetContentV2CardsDeleteTrashPostReqInner() []*ContentV2CardsDeleteTrashPostReqInner {
	if x != nil {
		return x.ContentV2CardsDeleteTrashPostReqInner
	}
	return nil
}

type ContentV2CardsErrorListGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Параметр выбора языка значений полей ответа (для которых предусмотрена мультиязычность). <span class=\"new\">new</span>  Не используется в песочнице.
	Locale string `protobuf:"bytes,1,opt,name=locale,proto3" json:"locale,omitempty"`
}

func (x *ContentV2CardsErrorListGetRequest) Reset() {
	*x = ContentV2CardsErrorListGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2CardsErrorListGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2CardsErrorListGetRequest) ProtoMessage() {}

func (x *ContentV2CardsErrorListGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2CardsErrorListGetRequest.ProtoReflect.Descriptor instead.
func (*ContentV2CardsErrorListGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{2}
}

func (x *ContentV2CardsErrorListGetRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type ContentV2CardsMoveNmPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentV2CardsMoveNmPostReq *ContentV2CardsMoveNmPostReq `protobuf:"bytes,1,opt,name=contentV2CardsMoveNmPostReq,proto3" json:"contentV2CardsMoveNmPostReq,omitempty"`
}

func (x *ContentV2CardsMoveNmPostRequest) Reset() {
	*x = ContentV2CardsMoveNmPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2CardsMoveNmPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2CardsMoveNmPostRequest) ProtoMessage() {}

func (x *ContentV2CardsMoveNmPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2CardsMoveNmPostRequest.ProtoReflect.Descriptor instead.
func (*ContentV2CardsMoveNmPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{3}
}

func (x *ContentV2CardsMoveNmPostRequest) GetContentV2CardsMoveNmPostReq() *ContentV2CardsMoveNmPostReq {
	if x != nil {
		return x.ContentV2CardsMoveNmPostReq
	}
	return nil
}

type ContentV2CardsRecoverPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentV2CardsRecoverPostReqInner []*ContentV2CardsRecoverPostReqInner `protobuf:"bytes,1,rep,name=contentV2CardsRecoverPostReqInner,proto3" json:"contentV2CardsRecoverPostReqInner,omitempty"`
}

func (x *ContentV2CardsRecoverPostRequest) Reset() {
	*x = ContentV2CardsRecoverPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2CardsRecoverPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2CardsRecoverPostRequest) ProtoMessage() {}

func (x *ContentV2CardsRecoverPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2CardsRecoverPostRequest.ProtoReflect.Descriptor instead.
func (*ContentV2CardsRecoverPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{4}
}

func (x *ContentV2CardsRecoverPostRequest) GetContentV2CardsRecoverPostReqInner() []*ContentV2CardsRecoverPostReqInner {
	if x != nil {
		return x.ContentV2CardsRecoverPostReqInner
	}
	return nil
}

type ContentV2CardsUpdatePostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentV2CardsUpdatePostReqInner []*ContentV2CardsUpdatePostReqInner `protobuf:"bytes,1,rep,name=contentV2CardsUpdatePostReqInner,proto3" json:"contentV2CardsUpdatePostReqInner,omitempty"`
}

func (x *ContentV2CardsUpdatePostRequest) Reset() {
	*x = ContentV2CardsUpdatePostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2CardsUpdatePostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2CardsUpdatePostRequest) ProtoMessage() {}

func (x *ContentV2CardsUpdatePostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2CardsUpdatePostRequest.ProtoReflect.Descriptor instead.
func (*ContentV2CardsUpdatePostRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{5}
}

func (x *ContentV2CardsUpdatePostRequest) GetContentV2CardsUpdatePostReqInner() []*ContentV2CardsUpdatePostReqInner {
	if x != nil {
		return x.ContentV2CardsUpdatePostReqInner
	}
	return nil
}

type ContentV2CardsUploadAddPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentV2CardsUploadAddPostReq *ContentV2CardsUploadAddPostReq `protobuf:"bytes,1,opt,name=contentV2CardsUploadAddPostReq,proto3" json:"contentV2CardsUploadAddPostReq,omitempty"`
}

func (x *ContentV2CardsUploadAddPostRequest) Reset() {
	*x = ContentV2CardsUploadAddPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2CardsUploadAddPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2CardsUploadAddPostRequest) ProtoMessage() {}

func (x *ContentV2CardsUploadAddPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2CardsUploadAddPostRequest.ProtoReflect.Descriptor instead.
func (*ContentV2CardsUploadAddPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{6}
}

func (x *ContentV2CardsUploadAddPostRequest) GetContentV2CardsUploadAddPostReq() *ContentV2CardsUploadAddPostReq {
	if x != nil {
		return x.ContentV2CardsUploadAddPostReq
	}
	return nil
}

type ContentV2CardsUploadPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentV2CardsUploadPostReqInner []*ContentV2CardsUploadPostReqInner `protobuf:"bytes,1,rep,name=contentV2CardsUploadPostReqInner,proto3" json:"contentV2CardsUploadPostReqInner,omitempty"`
}

func (x *ContentV2CardsUploadPostRequest) Reset() {
	*x = ContentV2CardsUploadPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2CardsUploadPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2CardsUploadPostRequest) ProtoMessage() {}

func (x *ContentV2CardsUploadPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2CardsUploadPostRequest.ProtoReflect.Descriptor instead.
func (*ContentV2CardsUploadPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{7}
}

func (x *ContentV2CardsUploadPostRequest) GetContentV2CardsUploadPostReqInner() []*ContentV2CardsUploadPostReqInner {
	if x != nil {
		return x.ContentV2CardsUploadPostReqInner
	}
	return nil
}

type ContentV2DirectoryColorsGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Параметр выбора языка (ru, en, zh) значений полей `subjectName`, `name`. Не используется в песочнице
	Locale string `protobuf:"bytes,1,opt,name=locale,proto3" json:"locale,omitempty"`
}

func (x *ContentV2DirectoryColorsGetRequest) Reset() {
	*x = ContentV2DirectoryColorsGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2DirectoryColorsGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2DirectoryColorsGetRequest) ProtoMessage() {}

func (x *ContentV2DirectoryColorsGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2DirectoryColorsGetRequest.ProtoReflect.Descriptor instead.
func (*ContentV2DirectoryColorsGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{8}
}

func (x *ContentV2DirectoryColorsGetRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type ContentV2DirectoryCountriesGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Параметр выбора языка (ru, en, zh) значений полей `subjectName`, `name`. Не используется в песочнице
	Locale string `protobuf:"bytes,1,opt,name=locale,proto3" json:"locale,omitempty"`
}

func (x *ContentV2DirectoryCountriesGetRequest) Reset() {
	*x = ContentV2DirectoryCountriesGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2DirectoryCountriesGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2DirectoryCountriesGetRequest) ProtoMessage() {}

func (x *ContentV2DirectoryCountriesGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2DirectoryCountriesGetRequest.ProtoReflect.Descriptor instead.
func (*ContentV2DirectoryCountriesGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{9}
}

func (x *ContentV2DirectoryCountriesGetRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type ContentV2DirectoryKindsGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Параметр выбора языка (ru, en, zh) значений полей `subjectName`, `name`. Не используется в песочнице
	Locale string `protobuf:"bytes,1,opt,name=locale,proto3" json:"locale,omitempty"`
}

func (x *ContentV2DirectoryKindsGetRequest) Reset() {
	*x = ContentV2DirectoryKindsGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2DirectoryKindsGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2DirectoryKindsGetRequest) ProtoMessage() {}

func (x *ContentV2DirectoryKindsGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2DirectoryKindsGetRequest.ProtoReflect.Descriptor instead.
func (*ContentV2DirectoryKindsGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{10}
}

func (x *ContentV2DirectoryKindsGetRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type ContentV2DirectorySeasonsGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Параметр выбора языка (ru, en, zh) значений полей `subjectName`, `name`. Не используется в песочнице
	Locale string `protobuf:"bytes,1,opt,name=locale,proto3" json:"locale,omitempty"`
}

func (x *ContentV2DirectorySeasonsGetRequest) Reset() {
	*x = ContentV2DirectorySeasonsGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2DirectorySeasonsGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2DirectorySeasonsGetRequest) ProtoMessage() {}

func (x *ContentV2DirectorySeasonsGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2DirectorySeasonsGetRequest.ProtoReflect.Descriptor instead.
func (*ContentV2DirectorySeasonsGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{11}
}

func (x *ContentV2DirectorySeasonsGetRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type ContentV2DirectoryTnvedGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор предмета
	SubjectID int32 `protobuf:"varint,1,opt,name=subjectID,proto3" json:"subjectID,omitempty"`
	// Поиск по ТНВЭД-коду. Работает только в паре с subjectID
	Search int32 `protobuf:"varint,2,opt,name=search,proto3" json:"search,omitempty"`
	// Параметр выбора языка (ru, en, zh) значений полей `subjectName`, `name`. Не используется в песочнице
	Locale string `protobuf:"bytes,3,opt,name=locale,proto3" json:"locale,omitempty"`
}

func (x *ContentV2DirectoryTnvedGetRequest) Reset() {
	*x = ContentV2DirectoryTnvedGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2DirectoryTnvedGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2DirectoryTnvedGetRequest) ProtoMessage() {}

func (x *ContentV2DirectoryTnvedGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2DirectoryTnvedGetRequest.ProtoReflect.Descriptor instead.
func (*ContentV2DirectoryTnvedGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{12}
}

func (x *ContentV2DirectoryTnvedGetRequest) GetSubjectID() int32 {
	if x != nil {
		return x.SubjectID
	}
	return 0
}

func (x *ContentV2DirectoryTnvedGetRequest) GetSearch() int32 {
	if x != nil {
		return x.Search
	}
	return 0
}

func (x *ContentV2DirectoryTnvedGetRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type ContentV2DirectoryVatGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Язык значения элементов `data` (`ru`, `en`, `zh`). Не используется в песочнице
	Locale string `protobuf:"bytes,1,opt,name=locale,proto3" json:"locale,omitempty"`
}

func (x *ContentV2DirectoryVatGetRequest) Reset() {
	*x = ContentV2DirectoryVatGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2DirectoryVatGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2DirectoryVatGetRequest) ProtoMessage() {}

func (x *ContentV2DirectoryVatGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2DirectoryVatGetRequest.ProtoReflect.Descriptor instead.
func (*ContentV2DirectoryVatGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{13}
}

func (x *ContentV2DirectoryVatGetRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type ContentV2GetCardsListPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentV2GetCardsListPostReq *ContentV2GetCardsListPostReq `protobuf:"bytes,1,opt,name=contentV2GetCardsListPostReq,proto3" json:"contentV2GetCardsListPostReq,omitempty"`
	// Язык для перевода полей ответа `name`, `value` и `object`:  `ru` - русский, `en` - английский, `zh` - китайский.  Не используется в песочнице.
	Locale string `protobuf:"bytes,2,opt,name=locale,proto3" json:"locale,omitempty"`
}

func (x *ContentV2GetCardsListPostRequest) Reset() {
	*x = ContentV2GetCardsListPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2GetCardsListPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2GetCardsListPostRequest) ProtoMessage() {}

func (x *ContentV2GetCardsListPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2GetCardsListPostRequest.ProtoReflect.Descriptor instead.
func (*ContentV2GetCardsListPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{14}
}

func (x *ContentV2GetCardsListPostRequest) GetContentV2GetCardsListPostReq() *ContentV2GetCardsListPostReq {
	if x != nil {
		return x.ContentV2GetCardsListPostReq
	}
	return nil
}

func (x *ContentV2GetCardsListPostRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type ContentV2GetCardsTrashPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentV2GetCardsTrashPostReq *ContentV2GetCardsTrashPostReq `protobuf:"bytes,1,opt,name=contentV2GetCardsTrashPostReq,proto3" json:"contentV2GetCardsTrashPostReq,omitempty"`
	// Язык полей ответа `name`, `value` и `object`: `ru`, `en`, `zh`.  Не используется в песочнице
	Locale string `protobuf:"bytes,2,opt,name=locale,proto3" json:"locale,omitempty"`
}

func (x *ContentV2GetCardsTrashPostRequest) Reset() {
	*x = ContentV2GetCardsTrashPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2GetCardsTrashPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2GetCardsTrashPostRequest) ProtoMessage() {}

func (x *ContentV2GetCardsTrashPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2GetCardsTrashPostRequest.ProtoReflect.Descriptor instead.
func (*ContentV2GetCardsTrashPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{15}
}

func (x *ContentV2GetCardsTrashPostRequest) GetContentV2GetCardsTrashPostReq() *ContentV2GetCardsTrashPostReq {
	if x != nil {
		return x.ContentV2GetCardsTrashPostReq
	}
	return nil
}

func (x *ContentV2GetCardsTrashPostRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type ContentV2ObjectAllGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Поиск по наименованию предмета (Носки), поиск работает по подстроке, искать можно на любом из поддерживаемых языков.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Количество подкатегорий (предметов), максимум 1 000
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Язык полей ответа (ru, en, zh). Не используется в песочнице
	Locale string `protobuf:"bytes,3,opt,name=locale,proto3" json:"locale,omitempty"`
	// Номер позиции, с которой необходимо получить ответ
	Offset int32 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	// Идентификатор родительской категории предмета
	ParentID int32 `protobuf:"varint,5,opt,name=parentID,proto3" json:"parentID,omitempty"`
}

func (x *ContentV2ObjectAllGetRequest) Reset() {
	*x = ContentV2ObjectAllGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2ObjectAllGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2ObjectAllGetRequest) ProtoMessage() {}

func (x *ContentV2ObjectAllGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2ObjectAllGetRequest.ProtoReflect.Descriptor instead.
func (*ContentV2ObjectAllGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{16}
}

func (x *ContentV2ObjectAllGetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContentV2ObjectAllGetRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ContentV2ObjectAllGetRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *ContentV2ObjectAllGetRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ContentV2ObjectAllGetRequest) GetParentID() int32 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

type ContentV2ObjectCharcsSubjectIdGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Идентификатор предмета
	SubjectId int32 `protobuf:"varint,1,opt,name=subjectId,proto3" json:"subjectId,omitempty"`
	// Параметр выбора языка (ru, en, zh) значений полей `subjectName`, `name`. Не используется в песочнице
	Locale string `protobuf:"bytes,2,opt,name=locale,proto3" json:"locale,omitempty"`
}

func (x *ContentV2ObjectCharcsSubjectIdGetRequest) Reset() {
	*x = ContentV2ObjectCharcsSubjectIdGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2ObjectCharcsSubjectIdGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2ObjectCharcsSubjectIdGetRequest) ProtoMessage() {}

func (x *ContentV2ObjectCharcsSubjectIdGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2ObjectCharcsSubjectIdGetRequest.ProtoReflect.Descriptor instead.
func (*ContentV2ObjectCharcsSubjectIdGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{17}
}

func (x *ContentV2ObjectCharcsSubjectIdGetRequest) GetSubjectId() int32 {
	if x != nil {
		return x.SubjectId
	}
	return 0
}

func (x *ContentV2ObjectCharcsSubjectIdGetRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type ContentV2ObjectParentAllGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Параметр выбора языка (ru, en, zh) значений поля name. Не используется в песочнице
	Locale string `protobuf:"bytes,1,opt,name=locale,proto3" json:"locale,omitempty"`
}

func (x *ContentV2ObjectParentAllGetRequest) Reset() {
	*x = ContentV2ObjectParentAllGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2ObjectParentAllGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2ObjectParentAllGetRequest) ProtoMessage() {}

func (x *ContentV2ObjectParentAllGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2ObjectParentAllGetRequest.ProtoReflect.Descriptor instead.
func (*ContentV2ObjectParentAllGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{18}
}

func (x *ContentV2ObjectParentAllGetRequest) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type ContentV2TagIdDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Числовой идентификатор тега
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ContentV2TagIdDeleteRequest) Reset() {
	*x = ContentV2TagIdDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2TagIdDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2TagIdDeleteRequest) ProtoMessage() {}

func (x *ContentV2TagIdDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2TagIdDeleteRequest.ProtoReflect.Descriptor instead.
func (*ContentV2TagIdDeleteRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{19}
}

func (x *ContentV2TagIdDeleteRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ContentV2TagIdPatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Числовой идентификатор тега
	Id                     int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ContentV2TagIdPatchReq *ContentV2TagIdPatchReq `protobuf:"bytes,2,opt,name=contentV2TagIdPatchReq,proto3" json:"contentV2TagIdPatchReq,omitempty"`
}

func (x *ContentV2TagIdPatchRequest) Reset() {
	*x = ContentV2TagIdPatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2TagIdPatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2TagIdPatchRequest) ProtoMessage() {}

func (x *ContentV2TagIdPatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2TagIdPatchRequest.ProtoReflect.Descriptor instead.
func (*ContentV2TagIdPatchRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{20}
}

func (x *ContentV2TagIdPatchRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ContentV2TagIdPatchRequest) GetContentV2TagIdPatchReq() *ContentV2TagIdPatchReq {
	if x != nil {
		return x.ContentV2TagIdPatchReq
	}
	return nil
}

type ContentV2TagNomenclatureLinkPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentV2TagNomenclatureLinkPostReq *ContentV2TagNomenclatureLinkPostReq `protobuf:"bytes,1,opt,name=contentV2TagNomenclatureLinkPostReq,proto3" json:"contentV2TagNomenclatureLinkPostReq,omitempty"`
}

func (x *ContentV2TagNomenclatureLinkPostRequest) Reset() {
	*x = ContentV2TagNomenclatureLinkPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2TagNomenclatureLinkPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2TagNomenclatureLinkPostRequest) ProtoMessage() {}

func (x *ContentV2TagNomenclatureLinkPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2TagNomenclatureLinkPostRequest.ProtoReflect.Descriptor instead.
func (*ContentV2TagNomenclatureLinkPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{21}
}

func (x *ContentV2TagNomenclatureLinkPostRequest) GetContentV2TagNomenclatureLinkPostReq() *ContentV2TagNomenclatureLinkPostReq {
	if x != nil {
		return x.ContentV2TagNomenclatureLinkPostReq
	}
	return nil
}

type ContentV2TagPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentV2TagPostReq *ContentV2TagPostReq `protobuf:"bytes,1,opt,name=contentV2TagPostReq,proto3" json:"contentV2TagPostReq,omitempty"`
}

func (x *ContentV2TagPostRequest) Reset() {
	*x = ContentV2TagPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV2TagPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV2TagPostRequest) ProtoMessage() {}

func (x *ContentV2TagPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV2TagPostRequest.ProtoReflect.Descriptor instead.
func (*ContentV2TagPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{22}
}

func (x *ContentV2TagPostRequest) GetContentV2TagPostReq() *ContentV2TagPostReq {
	if x != nil {
		return x.ContentV2TagPostReq
	}
	return nil
}

type ContentV3MediaFilePostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Артикул Wildberries
	XNmId string `protobuf:"bytes,1,opt,name=xNmId,proto3" json:"xNmId,omitempty"`
	// Номер медиафайла на загрузку, начинается с `1`. При загрузке видео всегда указывайте `1`.  Чтобы добавить изображение к уже загруженным, номер медиафайла должен быть больше количества уже загруженных медиафайлов.
	XPhotoNumber int32  `protobuf:"varint,2,opt,name=xPhotoNumber,proto3" json:"xPhotoNumber,omitempty"`
	Uploadfile   string `protobuf:"bytes,3,opt,name=uploadfile,proto3" json:"uploadfile,omitempty"`
}

func (x *ContentV3MediaFilePostRequest) Reset() {
	*x = ContentV3MediaFilePostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV3MediaFilePostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV3MediaFilePostRequest) ProtoMessage() {}

func (x *ContentV3MediaFilePostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV3MediaFilePostRequest.ProtoReflect.Descriptor instead.
func (*ContentV3MediaFilePostRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{23}
}

func (x *ContentV3MediaFilePostRequest) GetXNmId() string {
	if x != nil {
		return x.XNmId
	}
	return ""
}

func (x *ContentV3MediaFilePostRequest) GetXPhotoNumber() int32 {
	if x != nil {
		return x.XPhotoNumber
	}
	return 0
}

func (x *ContentV3MediaFilePostRequest) GetUploadfile() string {
	if x != nil {
		return x.Uploadfile
	}
	return ""
}

type ContentV3MediaSavePostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentV3MediaSavePostReq *ContentV3MediaSavePostReq `protobuf:"bytes,1,opt,name=contentV3MediaSavePostReq,proto3" json:"contentV3MediaSavePostReq,omitempty"`
}

func (x *ContentV3MediaSavePostRequest) Reset() {
	*x = ContentV3MediaSavePostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_content_v1__service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentV3MediaSavePostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentV3MediaSavePostRequest) ProtoMessage() {}

func (x *ContentV3MediaSavePostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_content_v1__service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentV3MediaSavePostRequest.ProtoReflect.Descriptor instead.
func (*ContentV3MediaSavePostRequest) Descriptor() ([]byte, []int) {
	return file_wb_content_v1__service_proto_rawDescGZIP(), []int{24}
}

func (x *ContentV3MediaSavePostRequest) GetContentV3MediaSavePostReq() *ContentV3MediaSavePostReq {
	if x != nil {
		return x.ContentV3MediaSavePostReq
	}
	return nil
}

var File_wb_content_v1__service_proto protoreflect.FileDescriptor

var file_wb_content_v1__service_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x77, 0x62, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x42, 0x77, 0x62, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x32, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x32, 0x30, 0x30, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44,
	0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x3d, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6e, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x34,
	0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x39, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x6e, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x77, 0x62,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x77,
	0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3c, 0x77,
	0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x77, 0x62, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x77, 0x62, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x42, 0x77, 0x62,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30,
	0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3e, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30,
	0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x40, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x3e, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6e, 0x76, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x74,
	0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x3c, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30,
	0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3e, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x32, 0x30,
	0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3a, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x77, 0x62,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x74, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x77,
	0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x5f, 0x74, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x77, 0x62, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x32, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f,
	0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x47, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x63, 0x73, 0x5f, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40,
	0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30,
	0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x38, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x69,
	0x64, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x77, 0x62, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x76, 0x32, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x34, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x32, 0x30, 0x30, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x77,
	0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x5f, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x34, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x77, 0x62, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63,
	0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33,
	0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x34, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x32, 0x5f, 0x74,
	0x61, 0x67, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x77, 0x62, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x33, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x70,
	0x6f, 0x73, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x33, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x77,
	0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x32, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x34, 0x30, 0x30, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x34, 0x30,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2b, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b,
	0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x01, 0x0a, 0x1c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x18,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x56, 0x32, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x22, 0xb3, 0x01, 0x0a, 0x24, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x73, 0x68, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x25, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x49,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x77, 0x62, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x52, 0x25, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x3b, 0x0a, 0x21, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x4e, 0x6d, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x1b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x4e, 0x6d,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4d, 0x6f, 0x76, 0x65,
	0x4e, 0x6d, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x1b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x4e, 0x6d, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0xa2, 0x01, 0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x21, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x21, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x9e, 0x01, 0x0a, 0x1f,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x7b, 0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x62, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x20, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x9b, 0x01, 0x0a,
	0x22, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x75, 0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x64, 0x64, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x77, 0x62,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x1e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x9e, 0x01, 0x0a, 0x1f, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x7b,
	0x0a, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x3c, 0x0a, 0x22, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x3f, 0x0a, 0x25, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x3b, 0x0a, 0x21, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x4b, 0x69, 0x6e, 0x64, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x3d, 0x0a, 0x23, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x56, 0x32, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x71, 0x0a, 0x21, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x56, 0x32, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6e, 0x76, 0x65,
	0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x39, 0x0a, 0x1f, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x56,
	0x61, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x56, 0x32, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x1c, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x1c, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x21, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x54, 0x72, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x72, 0x0a, 0x1d, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x56, 0x32, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x54, 0x72, 0x61,
	0x73, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x54, 0x72, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x1d, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x54, 0x72, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x56, 0x32, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x60, 0x0a, 0x28, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x63, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x3c, 0x0a,
	0x22, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x2d, 0x0a, 0x1b, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x54, 0x61, 0x67, 0x49, 0x64, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x1a, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x54, 0x61, 0x67, 0x49, 0x64, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x16, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x54, 0x61, 0x67, 0x49, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x77, 0x62, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x56, 0x32, 0x54, 0x61, 0x67, 0x49, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x54, 0x61, 0x67, 0x49, 0x64,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x22, 0xb0, 0x01, 0x0a, 0x27, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x54, 0x61, 0x67, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x23, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x56, 0x32, 0x54, 0x61, 0x67, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x54, 0x61, 0x67, 0x4e,
	0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x23, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56,
	0x32, 0x54, 0x61, 0x67, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x6f, 0x0a, 0x17, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x54, 0x61, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x56, 0x32, 0x54, 0x61, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x54, 0x61, 0x67,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x56, 0x32, 0x54, 0x61, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x79, 0x0a, 0x1d,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x33, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x78, 0x4e, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x78, 0x4e,
	0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x78, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x78, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x56, 0x33, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x61, 0x76, 0x65, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x66, 0x0a, 0x19, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x56, 0x33, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x61, 0x76, 0x65, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77,
	0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x56, 0x33, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x61, 0x76, 0x65, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56,
	0x33, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x61, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x32, 0xc4, 0x1a, 0x0a, 0x0e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x75, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56,
	0x32, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x2b, 0x2e,
	0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x77, 0x62, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x56, 0x32, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74,
	0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x1d,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x33, 0x2e,
	0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x74,
	0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x1a,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x65, 0x74, 0x12, 0x30, 0x2e, 0x77, 0x62, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x77,
	0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x64, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x47, 0x65, 0x74, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x31, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x4e, 0x6d,
	0x50, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x4e, 0x6d, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61, 0x72,
	0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x73, 0x68,
	0x50, 0x6f, 0x73, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6d, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x2e, 0x77, 0x62,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x77, 0x62,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61, 0x72, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x73,
	0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x31, 0x2e,
	0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x64, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61, 0x72, 0x64, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x6d, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x12,
	0x2e, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x43, 0x61, 0x72, 0x64, 0x73, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x61, 0x72, 0x64, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x47,
	0x65, 0x74, 0x12, 0x31, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x47, 0x65,
	0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x90, 0x01, 0x0a,
	0x1e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x47, 0x65, 0x74, 0x12,
	0x34, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x84, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x73, 0x47, 0x65, 0x74, 0x12, 0x30,
	0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x4b, 0x69, 0x6e, 0x64, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x4b, 0x69, 0x6e, 0x64, 0x73, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x56, 0x32, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x73, 0x47, 0x65, 0x74, 0x12, 0x32, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56,
	0x32, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x77, 0x62,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x56, 0x32, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56,
	0x32, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6e, 0x76, 0x65, 0x64, 0x47,
	0x65, 0x74, 0x12, 0x30, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6e, 0x76, 0x65, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6e, 0x76, 0x65, 0x64, 0x47, 0x65, 0x74, 0x32,
	0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x18, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x56, 0x61, 0x74, 0x47, 0x65, 0x74, 0x12, 0x2e, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x61, 0x74, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x61, 0x74, 0x47, 0x65, 0x74, 0x32,
	0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x19, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x56, 0x32, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x77, 0x62, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x56, 0x32, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6f, 0x73, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84,
	0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x72, 0x64, 0x73, 0x54, 0x72, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x2e,
	0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x54,
	0x72, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x54, 0x72, 0x61, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x56, 0x32, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x74, 0x12, 0x2b,
	0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c,
	0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x77, 0x62,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x56, 0x32, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x65,
	0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x99, 0x01, 0x0a,
	0x21, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x63, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x47,
	0x65, 0x74, 0x12, 0x37, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x68, 0x61, 0x72, 0x63, 0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x77, 0x62,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x56, 0x32, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x68, 0x61, 0x72, 0x63,
	0x73, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x74, 0x12, 0x31, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x56, 0x32, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6c,
	0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x77, 0x62,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x56, 0x32, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x72, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x54,
	0x61, 0x67, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x77, 0x62, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x56, 0x32, 0x54, 0x61, 0x67, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32,
	0x54, 0x61, 0x67, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x32, 0x30, 0x30, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x56, 0x32, 0x54, 0x61, 0x67, 0x49, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x29, 0x2e,
	0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x54, 0x61, 0x67, 0x49, 0x64, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x56, 0x32, 0x54, 0x61, 0x67, 0x49, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x32, 0x30, 0x30, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x56, 0x32, 0x54, 0x61, 0x67, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x36, 0x2e, 0x77,
	0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x54, 0x61, 0x67, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x36, 0x12, 0x60, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x54, 0x61, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x26,
	0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x54, 0x61, 0x67, 0x50, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x36, 0x12, 0x56, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x54, 0x61, 0x67, 0x73, 0x47, 0x65, 0x74,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2a, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x56, 0x32, 0x54, 0x61, 0x67, 0x73, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56,
	0x33, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x2c,
	0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x33, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x77,
	0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x56, 0x33, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x61, 0x76, 0x65, 0x50,
	0x6f, 0x73, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78,
	0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x33, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x53, 0x61, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x56, 0x33, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x61, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x77, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x33,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x61, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x32, 0x30, 0x30,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x49, 0x4f,
	0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x62, 0x2f, 0x77, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x77, 0x62, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wb_content_v1__service_proto_rawDescOnce sync.Once
	file_wb_content_v1__service_proto_rawDescData = file_wb_content_v1__service_proto_rawDesc
)

func file_wb_content_v1__service_proto_rawDescGZIP() []byte {
	file_wb_content_v1__service_proto_rawDescOnce.Do(func() {
		file_wb_content_v1__service_proto_rawDescData = protoimpl.X.CompressGZIP(file_wb_content_v1__service_proto_rawDescData)
	})
	return file_wb_content_v1__service_proto_rawDescData
}

var file_wb_content_v1__service_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_wb_content_v1__service_proto_goTypes = []interface{}{
	(*ContentV2BarcodesPostRequest)(nil),                 // 0: wb.content.v1.ContentV2BarcodesPostRequest
	(*ContentV2CardsDeleteTrashPostRequest)(nil),         // 1: wb.content.v1.ContentV2CardsDeleteTrashPostRequest
	(*ContentV2CardsErrorListGetRequest)(nil),            // 2: wb.content.v1.ContentV2CardsErrorListGetRequest
	(*ContentV2CardsMoveNmPostRequest)(nil),              // 3: wb.content.v1.ContentV2CardsMoveNmPostRequest
	(*ContentV2CardsRecoverPostRequest)(nil),             // 4: wb.content.v1.ContentV2CardsRecoverPostRequest
	(*ContentV2CardsUpdatePostRequest)(nil),              // 5: wb.content.v1.ContentV2CardsUpdatePostRequest
	(*ContentV2CardsUploadAddPostRequest)(nil),           // 6: wb.content.v1.ContentV2CardsUploadAddPostRequest
	(*ContentV2CardsUploadPostRequest)(nil),              // 7: wb.content.v1.ContentV2CardsUploadPostRequest
	(*ContentV2DirectoryColorsGetRequest)(nil),           // 8: wb.content.v1.ContentV2DirectoryColorsGetRequest
	(*ContentV2DirectoryCountriesGetRequest)(nil),        // 9: wb.content.v1.ContentV2DirectoryCountriesGetRequest
	(*ContentV2DirectoryKindsGetRequest)(nil),            // 10: wb.content.v1.ContentV2DirectoryKindsGetRequest
	(*ContentV2DirectorySeasonsGetRequest)(nil),          // 11: wb.content.v1.ContentV2DirectorySeasonsGetRequest
	(*ContentV2DirectoryTnvedGetRequest)(nil),            // 12: wb.content.v1.ContentV2DirectoryTnvedGetRequest
	(*ContentV2DirectoryVatGetRequest)(nil),              // 13: wb.content.v1.ContentV2DirectoryVatGetRequest
	(*ContentV2GetCardsListPostRequest)(nil),             // 14: wb.content.v1.ContentV2GetCardsListPostRequest
	(*ContentV2GetCardsTrashPostRequest)(nil),            // 15: wb.content.v1.ContentV2GetCardsTrashPostRequest
	(*ContentV2ObjectAllGetRequest)(nil),                 // 16: wb.content.v1.ContentV2ObjectAllGetRequest
	(*ContentV2ObjectCharcsSubjectIdGetRequest)(nil),     // 17: wb.content.v1.ContentV2ObjectCharcsSubjectIdGetRequest
	(*ContentV2ObjectParentAllGetRequest)(nil),           // 18: wb.content.v1.ContentV2ObjectParentAllGetRequest
	(*ContentV2TagIdDeleteRequest)(nil),                  // 19: wb.content.v1.ContentV2TagIdDeleteRequest
	(*ContentV2TagIdPatchRequest)(nil),                   // 20: wb.content.v1.ContentV2TagIdPatchRequest
	(*ContentV2TagNomenclatureLinkPostRequest)(nil),      // 21: wb.content.v1.ContentV2TagNomenclatureLinkPostRequest
	(*ContentV2TagPostRequest)(nil),                      // 22: wb.content.v1.ContentV2TagPostRequest
	(*ContentV3MediaFilePostRequest)(nil),                // 23: wb.content.v1.ContentV3MediaFilePostRequest
	(*ContentV3MediaSavePostRequest)(nil),                // 24: wb.content.v1.ContentV3MediaSavePostRequest
	(*ContentV2BarcodesPostReq)(nil),                     // 25: wb.content.v1.ContentV2BarcodesPostReq
	(*ContentV2CardsDeleteTrashPostReqInner)(nil),        // 26: wb.content.v1.ContentV2CardsDeleteTrashPostReqInner
	(*ContentV2CardsMoveNmPostReq)(nil),                  // 27: wb.content.v1.ContentV2CardsMoveNmPostReq
	(*ContentV2CardsRecoverPostReqInner)(nil),            // 28: wb.content.v1.ContentV2CardsRecoverPostReqInner
	(*ContentV2CardsUpdatePostReqInner)(nil),             // 29: wb.content.v1.ContentV2CardsUpdatePostReqInner
	(*ContentV2CardsUploadAddPostReq)(nil),               // 30: wb.content.v1.ContentV2CardsUploadAddPostReq
	(*ContentV2CardsUploadPostReqInner)(nil),             // 31: wb.content.v1.ContentV2CardsUploadPostReqInner
	(*ContentV2GetCardsListPostReq)(nil),                 // 32: wb.content.v1.ContentV2GetCardsListPostReq
	(*ContentV2GetCardsTrashPostReq)(nil),                // 33: wb.content.v1.ContentV2GetCardsTrashPostReq
	(*ContentV2TagIdPatchReq)(nil),                       // 34: wb.content.v1.ContentV2TagIdPatchReq
	(*ContentV2TagNomenclatureLinkPostReq)(nil),          // 35: wb.content.v1.ContentV2TagNomenclatureLinkPostReq
	(*ContentV2TagPostReq)(nil),                          // 36: wb.content.v1.ContentV2TagPostReq
	(*ContentV3MediaSavePostReq)(nil),                    // 37: wb.content.v1.ContentV3MediaSavePostReq
	(*emptypb.Empty)(nil),                                // 38: google.protobuf.Empty
	(*ContentV2BarcodesPost200Response)(nil),             // 39: wb.content.v1.ContentV2BarcodesPost200Response
	(*ContentV2CardsDeleteTrashPost200Response)(nil),     // 40: wb.content.v1.ContentV2CardsDeleteTrashPost200Response
	(*ContentV2CardsErrorListGet200Response)(nil),        // 41: wb.content.v1.ContentV2CardsErrorListGet200Response
	(*ContentV2CardsLimitsGet200Response)(nil),           // 42: wb.content.v1.ContentV2CardsLimitsGet200Response
	(*ResponseCardCreate)(nil),                           // 43: wb.content.v1.ResponseCardCreate
	(*ContentV2DirectoryColorsGet200Response)(nil),       // 44: wb.content.v1.ContentV2DirectoryColorsGet200Response
	(*ContentV2DirectoryCountriesGet200Response)(nil),    // 45: wb.content.v1.ContentV2DirectoryCountriesGet200Response
	(*ContentV2DirectoryKindsGet200Response)(nil),        // 46: wb.content.v1.ContentV2DirectoryKindsGet200Response
	(*ContentV2DirectorySeasonsGet200Response)(nil),      // 47: wb.content.v1.ContentV2DirectorySeasonsGet200Response
	(*ContentV2DirectoryTnvedGet200Response)(nil),        // 48: wb.content.v1.ContentV2DirectoryTnvedGet200Response
	(*ContentV2DirectoryVatGet200Response)(nil),          // 49: wb.content.v1.ContentV2DirectoryVatGet200Response
	(*ContentV2GetCardsListPost200Response)(nil),         // 50: wb.content.v1.ContentV2GetCardsListPost200Response
	(*ContentV2GetCardsTrashPost200Response)(nil),        // 51: wb.content.v1.ContentV2GetCardsTrashPost200Response
	(*ContentV2ObjectAllGet200Response)(nil),             // 52: wb.content.v1.ContentV2ObjectAllGet200Response
	(*ContentV2ObjectCharcsSubjectIdGet200Response)(nil), // 53: wb.content.v1.ContentV2ObjectCharcsSubjectIdGet200Response
	(*ContentV2ObjectParentAllGet200Response)(nil),       // 54: wb.content.v1.ContentV2ObjectParentAllGet200Response
	(*ContentV2TagIdDelete200Response)(nil),              // 55: wb.content.v1.ContentV2TagIdDelete200Response
	(*ContentV2TagIdPatch200Response)(nil),               // 56: wb.content.v1.ContentV2TagIdPatch200Response
	(*ResponseContentError6)(nil),                        // 57: wb.content.v1.ResponseContentError6
	(*ContentV2TagsGet200Response)(nil),                  // 58: wb.content.v1.ContentV2TagsGet200Response
	(*ContentV3MediaSavePost200Response)(nil),            // 59: wb.content.v1.ContentV3MediaSavePost200Response
}
var file_wb_content_v1__service_proto_depIdxs = []int32{
	25, // 0: wb.content.v1.ContentV2BarcodesPostRequest.contentV2BarcodesPostReq:type_name -> wb.content.v1.ContentV2BarcodesPostReq
	26, // 1: wb.content.v1.ContentV2CardsDeleteTrashPostRequest.contentV2CardsDeleteTrashPostReqInner:type_name -> wb.content.v1.ContentV2CardsDeleteTrashPostReqInner
	27, // 2: wb.content.v1.ContentV2CardsMoveNmPostRequest.contentV2CardsMoveNmPostReq:type_name -> wb.content.v1.ContentV2CardsMoveNmPostReq
	28, // 3: wb.content.v1.ContentV2CardsRecoverPostRequest.contentV2CardsRecoverPostReqInner:type_name -> wb.content.v1.ContentV2CardsRecoverPostReqInner
	29, // 4: wb.content.v1.ContentV2CardsUpdatePostRequest.contentV2CardsUpdatePostReqInner:type_name -> wb.content.v1.ContentV2CardsUpdatePostReqInner
	30, // 5: wb.content.v1.ContentV2CardsUploadAddPostRequest.contentV2CardsUploadAddPostReq:type_name -> wb.content.v1.ContentV2CardsUploadAddPostReq
	31, // 6: wb.content.v1.ContentV2CardsUploadPostRequest.contentV2CardsUploadPostReqInner:type_name -> wb.content.v1.ContentV2CardsUploadPostReqInner
	32, // 7: wb.content.v1.ContentV2GetCardsListPostRequest.contentV2GetCardsListPostReq:type_name -> wb.content.v1.ContentV2GetCardsListPostReq
	33, // 8: wb.content.v1.ContentV2GetCardsTrashPostRequest.contentV2GetCardsTrashPostReq:type_name -> wb.content.v1.ContentV2GetCardsTrashPostReq
	34, // 9: wb.content.v1.ContentV2TagIdPatchRequest.contentV2TagIdPatchReq:type_name -> wb.content.v1.ContentV2TagIdPatchReq
	35, // 10: wb.content.v1.ContentV2TagNomenclatureLinkPostRequest.contentV2TagNomenclatureLinkPostReq:type_name -> wb.content.v1.ContentV2TagNomenclatureLinkPostReq
	36, // 11: wb.content.v1.ContentV2TagPostRequest.contentV2TagPostReq:type_name -> wb.content.v1.ContentV2TagPostReq
	37, // 12: wb.content.v1.ContentV3MediaSavePostRequest.contentV3MediaSavePostReq:type_name -> wb.content.v1.ContentV3MediaSavePostReq
	0,  // 13: wb.content.v1.DefaultService.ContentV2BarcodesPost:input_type -> wb.content.v1.ContentV2BarcodesPostRequest
	1,  // 14: wb.content.v1.DefaultService.ContentV2CardsDeleteTrashPost:input_type -> wb.content.v1.ContentV2CardsDeleteTrashPostRequest
	2,  // 15: wb.content.v1.DefaultService.ContentV2CardsErrorListGet:input_type -> wb.content.v1.ContentV2CardsErrorListGetRequest
	38, // 16: wb.content.v1.DefaultService.ContentV2CardsLimitsGet:input_type -> google.protobuf.Empty
	3,  // 17: wb.content.v1.DefaultService.ContentV2CardsMoveNmPost:input_type -> wb.content.v1.ContentV2CardsMoveNmPostRequest
	4,  // 18: wb.content.v1.DefaultService.ContentV2CardsRecoverPost:input_type -> wb.content.v1.ContentV2CardsRecoverPostRequest
	5,  // 19: wb.content.v1.DefaultService.ContentV2CardsUpdatePost:input_type -> wb.content.v1.ContentV2CardsUpdatePostRequest
	6,  // 20: wb.content.v1.DefaultService.ContentV2CardsUploadAddPost:input_type -> wb.content.v1.ContentV2CardsUploadAddPostRequest
	7,  // 21: wb.content.v1.DefaultService.ContentV2CardsUploadPost:input_type -> wb.content.v1.ContentV2CardsUploadPostRequest
	8,  // 22: wb.content.v1.DefaultService.ContentV2DirectoryColorsGet:input_type -> wb.content.v1.ContentV2DirectoryColorsGetRequest
	9,  // 23: wb.content.v1.DefaultService.ContentV2DirectoryCountriesGet:input_type -> wb.content.v1.ContentV2DirectoryCountriesGetRequest
	10, // 24: wb.content.v1.DefaultService.ContentV2DirectoryKindsGet:input_type -> wb.content.v1.ContentV2DirectoryKindsGetRequest
	11, // 25: wb.content.v1.DefaultService.ContentV2DirectorySeasonsGet:input_type -> wb.content.v1.ContentV2DirectorySeasonsGetRequest
	12, // 26: wb.content.v1.DefaultService.ContentV2DirectoryTnvedGet:input_type -> wb.content.v1.ContentV2DirectoryTnvedGetRequest
	13, // 27: wb.content.v1.DefaultService.ContentV2DirectoryVatGet:input_type -> wb.content.v1.ContentV2DirectoryVatGetRequest
	14, // 28: wb.content.v1.DefaultService.ContentV2GetCardsListPost:input_type -> wb.content.v1.ContentV2GetCardsListPostRequest
	15, // 29: wb.content.v1.DefaultService.ContentV2GetCardsTrashPost:input_type -> wb.content.v1.ContentV2GetCardsTrashPostRequest
	16, // 30: wb.content.v1.DefaultService.ContentV2ObjectAllGet:input_type -> wb.content.v1.ContentV2ObjectAllGetRequest
	17, // 31: wb.content.v1.DefaultService.ContentV2ObjectCharcsSubjectIdGet:input_type -> wb.content.v1.ContentV2ObjectCharcsSubjectIdGetRequest
	18, // 32: wb.content.v1.DefaultService.ContentV2ObjectParentAllGet:input_type -> wb.content.v1.ContentV2ObjectParentAllGetRequest
	19, // 33: wb.content.v1.DefaultService.ContentV2TagIdDelete:input_type -> wb.content.v1.ContentV2TagIdDeleteRequest
	20, // 34: wb.content.v1.DefaultService.ContentV2TagIdPatch:input_type -> wb.content.v1.ContentV2TagIdPatchRequest
	21, // 35: wb.content.v1.DefaultService.ContentV2TagNomenclatureLinkPost:input_type -> wb.content.v1.ContentV2TagNomenclatureLinkPostRequest
	22, // 36: wb.content.v1.DefaultService.ContentV2TagPost:input_type -> wb.content.v1.ContentV2TagPostRequest
	38, // 37: wb.content.v1.DefaultService.ContentV2TagsGet:input_type -> google.protobuf.Empty
	23, // 38: wb.content.v1.DefaultService.ContentV3MediaFilePost:input_type -> wb.content.v1.ContentV3MediaFilePostRequest
	24, // 39: wb.content.v1.DefaultService.ContentV3MediaSavePost:input_type -> wb.content.v1.ContentV3MediaSavePostRequest
	39, // 40: wb.content.v1.DefaultService.ContentV2BarcodesPost:output_type -> wb.content.v1.ContentV2BarcodesPost200Response
	40, // 41: wb.content.v1.DefaultService.ContentV2CardsDeleteTrashPost:output_type -> wb.content.v1.ContentV2CardsDeleteTrashPost200Response
	41, // 42: wb.content.v1.DefaultService.ContentV2CardsErrorListGet:output_type -> wb.content.v1.ContentV2CardsErrorListGet200Response
	42, // 43: wb.content.v1.DefaultService.ContentV2CardsLimitsGet:output_type -> wb.content.v1.ContentV2CardsLimitsGet200Response
	43, // 44: wb.content.v1.DefaultService.ContentV2CardsMoveNmPost:output_type -> wb.content.v1.ResponseCardCreate
	40, // 45: wb.content.v1.DefaultService.ContentV2CardsRecoverPost:output_type -> wb.content.v1.ContentV2CardsDeleteTrashPost200Response
	43, // 46: wb.content.v1.DefaultService.ContentV2CardsUpdatePost:output_type -> wb.content.v1.ResponseCardCreate
	43, // 47: wb.content.v1.DefaultService.ContentV2CardsUploadAddPost:output_type -> wb.content.v1.ResponseCardCreate
	43, // 48: wb.content.v1.DefaultService.ContentV2CardsUploadPost:output_type -> wb.content.v1.ResponseCardCreate
	44, // 49: wb.content.v1.DefaultService.ContentV2DirectoryColorsGet:output_type -> wb.content.v1.ContentV2DirectoryColorsGet200Response
	45, // 50: wb.content.v1.DefaultService.ContentV2DirectoryCountriesGet:output_type -> wb.content.v1.ContentV2DirectoryCountriesGet200Response
	46, // 51: wb.content.v1.DefaultService.ContentV2DirectoryKindsGet:output_type -> wb.content.v1.ContentV2DirectoryKindsGet200Response
	47, // 52: wb.content.v1.DefaultService.ContentV2DirectorySeasonsGet:output_type -> wb.content.v1.ContentV2DirectorySeasonsGet200Response
	48, // 53: wb.content.v1.DefaultService.ContentV2DirectoryTnvedGet:output_type -> wb.content.v1.ContentV2DirectoryTnvedGet200Response
	49, // 54: wb.content.v1.DefaultService.ContentV2DirectoryVatGet:output_type -> wb.content.v1.ContentV2DirectoryVatGet200Response
	50, // 55: wb.content.v1.DefaultService.ContentV2GetCardsListPost:output_type -> wb.content.v1.ContentV2GetCardsListPost200Response
	51, // 56: wb.content.v1.DefaultService.ContentV2GetCardsTrashPost:output_type -> wb.content.v1.ContentV2GetCardsTrashPost200Response
	52, // 57: wb.content.v1.DefaultService.ContentV2ObjectAllGet:output_type -> wb.content.v1.ContentV2ObjectAllGet200Response
	53, // 58: wb.content.v1.DefaultService.ContentV2ObjectCharcsSubjectIdGet:output_type -> wb.content.v1.ContentV2ObjectCharcsSubjectIdGet200Response
	54, // 59: wb.content.v1.DefaultService.ContentV2ObjectParentAllGet:output_type -> wb.content.v1.ContentV2ObjectParentAllGet200Response
	55, // 60: wb.content.v1.DefaultService.ContentV2TagIdDelete:output_type -> wb.content.v1.ContentV2TagIdDelete200Response
	56, // 61: wb.content.v1.DefaultService.ContentV2TagIdPatch:output_type -> wb.content.v1.ContentV2TagIdPatch200Response
	57, // 62: wb.content.v1.DefaultService.ContentV2TagNomenclatureLinkPost:output_type -> wb.content.v1.ResponseContentError6
	57, // 63: wb.content.v1.DefaultService.ContentV2TagPost:output_type -> wb.content.v1.ResponseContentError6
	58, // 64: wb.content.v1.DefaultService.ContentV2TagsGet:output_type -> wb.content.v1.ContentV2TagsGet200Response
	59, // 65: wb.content.v1.DefaultService.ContentV3MediaFilePost:output_type -> wb.content.v1.ContentV3MediaSavePost200Response
	59, // 66: wb.content.v1.DefaultService.ContentV3MediaSavePost:output_type -> wb.content.v1.ContentV3MediaSavePost200Response
	40, // [40:67] is the sub-list for method output_type
	13, // [13:40] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_wb_content_v1__service_proto_init() }
func file_wb_content_v1__service_proto_init() {
	if File_wb_content_v1__service_proto != nil {
		return
	}
	file_wb_content_v1_content_v2_barcodes_post200_response_proto_init()
	file_wb_content_v1_content_v2_barcodes_post_request_proto_init()
	file_wb_content_v1_content_v2_cards_delete_trash_post200_response_proto_init()
	file_wb_content_v1_content_v2_cards_delete_trash_post_request_inner_proto_init()
	file_wb_content_v1_content_v2_cards_error_list_get200_response_proto_init()
	file_wb_content_v1_content_v2_cards_limits_get200_response_proto_init()
	file_wb_content_v1_content_v2_cards_move_nm_post400_response_proto_init()
	file_wb_content_v1_content_v2_cards_move_nm_post_request_proto_init()
	file_wb_content_v1_content_v2_cards_recover_post_request_inner_proto_init()
	file_wb_content_v1_content_v2_cards_update_post_request_inner_proto_init()
	file_wb_content_v1_content_v2_cards_upload_add_post_request_proto_init()
	file_wb_content_v1_content_v2_cards_upload_post_request_inner_proto_init()
	file_wb_content_v1_content_v2_directory_colors_get200_response_proto_init()
	file_wb_content_v1_content_v2_directory_countries_get200_response_proto_init()
	file_wb_content_v1_content_v2_directory_kinds_get200_response_proto_init()
	file_wb_content_v1_content_v2_directory_seasons_get200_response_proto_init()
	file_wb_content_v1_content_v2_directory_tnved_get200_response_proto_init()
	file_wb_content_v1_content_v2_directory_vat_get200_response_proto_init()
	file_wb_content_v1_content_v2_get_cards_list_post200_response_proto_init()
	file_wb_content_v1_content_v2_get_cards_list_post_request_proto_init()
	file_wb_content_v1_content_v2_get_cards_trash_post200_response_proto_init()
	file_wb_content_v1_content_v2_get_cards_trash_post_request_proto_init()
	file_wb_content_v1_content_v2_object_all_get200_response_proto_init()
	file_wb_content_v1_content_v2_object_charcs_subject_id_get200_response_proto_init()
	file_wb_content_v1_content_v2_object_parent_all_get200_response_proto_init()
	file_wb_content_v1_content_v2_tag_id_delete200_response_proto_init()
	file_wb_content_v1_content_v2_tag_id_delete400_response_proto_init()
	file_wb_content_v1_content_v2_tag_id_patch200_response_proto_init()
	file_wb_content_v1_content_v2_tag_id_patch400_response_proto_init()
	file_wb_content_v1_content_v2_tag_id_patch_request_proto_init()
	file_wb_content_v1_content_v2_tag_nomenclature_link_post_request_proto_init()
	file_wb_content_v1_content_v2_tag_post400_response_proto_init()
	file_wb_content_v1_content_v2_tag_post_request_proto_init()
	file_wb_content_v1_content_v2_tags_get200_response_proto_init()
	file_wb_content_v1_content_v3_media_save_post200_response_proto_init()
	file_wb_content_v1_content_v3_media_save_post_request_proto_init()
	file_wb_content_v1_media_errors_proto_init()
	file_wb_content_v1_response_body_content_error400_proto_init()
	file_wb_content_v1_response_body_content_error403_proto_init()
	file_wb_content_v1_response_card_create_proto_init()
	file_wb_content_v1_response_content_error4_proto_init()
	file_wb_content_v1_response_content_error6_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_wb_content_v1__service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2BarcodesPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2CardsDeleteTrashPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2CardsErrorListGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2CardsMoveNmPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2CardsRecoverPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2CardsUpdatePostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2CardsUploadAddPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2CardsUploadPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2DirectoryColorsGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2DirectoryCountriesGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2DirectoryKindsGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2DirectorySeasonsGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2DirectoryTnvedGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2DirectoryVatGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2GetCardsListPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2GetCardsTrashPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2ObjectAllGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2ObjectCharcsSubjectIdGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2ObjectParentAllGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2TagIdDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2TagIdPatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2TagNomenclatureLinkPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV2TagPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV3MediaFilePostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_content_v1__service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentV3MediaSavePostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wb_content_v1__service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wb_content_v1__service_proto_goTypes,
		DependencyIndexes: file_wb_content_v1__service_proto_depIdxs,
		MessageInfos:      file_wb_content_v1__service_proto_msgTypes,
	}.Build()
	File_wb_content_v1__service_proto = out.File
	file_wb_content_v1__service_proto_rawDesc = nil
	file_wb_content_v1__service_proto_goTypes = nil
	file_wb_content_v1__service_proto_depIdxs = nil
}
