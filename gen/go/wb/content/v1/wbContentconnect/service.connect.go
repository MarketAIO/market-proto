//
//Описание API Контента
//
//<dl> <dt>Словарь сокращений:</dt> <dd>КТ — карточка товара</dd> <dd>НМ — номенклатура</dd> </dl> Ограничения по количеству запросов: <dd>Допускается максимум 100 запросов в минуту на методы контента в целом.</dd>  <br> Публичное API Контента создано для синхронизации данных между серверами Wildberries и серверами продавцов. <br> Вы загружаете данные на свои носители, работаете с ними на своих мощностях и синхронизируетесь с нашими серверами по мере необходимости. <br> <code>Не допускается использование API Контента в качестве внешней базы данных. При превышении лимитов на запросы доступ к API будет ограничен.</code>
//
//The version of the OpenAPI document:
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wb/content/v1/service.proto

package wbContentconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/MarketAIO/market-proto/gen/go/wb/content/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ContentServiceName is the fully-qualified name of the ContentService service.
	ContentServiceName = "wb.content.v1.ContentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ContentServiceContentV2BarcodesPostProcedure is the fully-qualified name of the ContentService's
	// ContentV2BarcodesPost RPC.
	ContentServiceContentV2BarcodesPostProcedure = "/wb.content.v1.ContentService/ContentV2BarcodesPost"
	// ContentServiceContentV2CardsDeleteTrashPostProcedure is the fully-qualified name of the
	// ContentService's ContentV2CardsDeleteTrashPost RPC.
	ContentServiceContentV2CardsDeleteTrashPostProcedure = "/wb.content.v1.ContentService/ContentV2CardsDeleteTrashPost"
	// ContentServiceContentV2CardsErrorListGetProcedure is the fully-qualified name of the
	// ContentService's ContentV2CardsErrorListGet RPC.
	ContentServiceContentV2CardsErrorListGetProcedure = "/wb.content.v1.ContentService/ContentV2CardsErrorListGet"
	// ContentServiceContentV2CardsLimitsGetProcedure is the fully-qualified name of the
	// ContentService's ContentV2CardsLimitsGet RPC.
	ContentServiceContentV2CardsLimitsGetProcedure = "/wb.content.v1.ContentService/ContentV2CardsLimitsGet"
	// ContentServiceContentV2CardsMoveNmPostProcedure is the fully-qualified name of the
	// ContentService's ContentV2CardsMoveNmPost RPC.
	ContentServiceContentV2CardsMoveNmPostProcedure = "/wb.content.v1.ContentService/ContentV2CardsMoveNmPost"
	// ContentServiceContentV2CardsRecoverPostProcedure is the fully-qualified name of the
	// ContentService's ContentV2CardsRecoverPost RPC.
	ContentServiceContentV2CardsRecoverPostProcedure = "/wb.content.v1.ContentService/ContentV2CardsRecoverPost"
	// ContentServiceContentV2CardsUpdatePostProcedure is the fully-qualified name of the
	// ContentService's ContentV2CardsUpdatePost RPC.
	ContentServiceContentV2CardsUpdatePostProcedure = "/wb.content.v1.ContentService/ContentV2CardsUpdatePost"
	// ContentServiceContentV2CardsUploadAddPostProcedure is the fully-qualified name of the
	// ContentService's ContentV2CardsUploadAddPost RPC.
	ContentServiceContentV2CardsUploadAddPostProcedure = "/wb.content.v1.ContentService/ContentV2CardsUploadAddPost"
	// ContentServiceContentV2CardsUploadPostProcedure is the fully-qualified name of the
	// ContentService's ContentV2CardsUploadPost RPC.
	ContentServiceContentV2CardsUploadPostProcedure = "/wb.content.v1.ContentService/ContentV2CardsUploadPost"
	// ContentServiceContentV2DirectoryColorsGetProcedure is the fully-qualified name of the
	// ContentService's ContentV2DirectoryColorsGet RPC.
	ContentServiceContentV2DirectoryColorsGetProcedure = "/wb.content.v1.ContentService/ContentV2DirectoryColorsGet"
	// ContentServiceContentV2DirectoryCountriesGetProcedure is the fully-qualified name of the
	// ContentService's ContentV2DirectoryCountriesGet RPC.
	ContentServiceContentV2DirectoryCountriesGetProcedure = "/wb.content.v1.ContentService/ContentV2DirectoryCountriesGet"
	// ContentServiceContentV2DirectoryKindsGetProcedure is the fully-qualified name of the
	// ContentService's ContentV2DirectoryKindsGet RPC.
	ContentServiceContentV2DirectoryKindsGetProcedure = "/wb.content.v1.ContentService/ContentV2DirectoryKindsGet"
	// ContentServiceContentV2DirectorySeasonsGetProcedure is the fully-qualified name of the
	// ContentService's ContentV2DirectorySeasonsGet RPC.
	ContentServiceContentV2DirectorySeasonsGetProcedure = "/wb.content.v1.ContentService/ContentV2DirectorySeasonsGet"
	// ContentServiceContentV2DirectoryTnvedGetProcedure is the fully-qualified name of the
	// ContentService's ContentV2DirectoryTnvedGet RPC.
	ContentServiceContentV2DirectoryTnvedGetProcedure = "/wb.content.v1.ContentService/ContentV2DirectoryTnvedGet"
	// ContentServiceContentV2DirectoryVatGetProcedure is the fully-qualified name of the
	// ContentService's ContentV2DirectoryVatGet RPC.
	ContentServiceContentV2DirectoryVatGetProcedure = "/wb.content.v1.ContentService/ContentV2DirectoryVatGet"
	// ContentServiceContentV2GetCardsListPostProcedure is the fully-qualified name of the
	// ContentService's ContentV2GetCardsListPost RPC.
	ContentServiceContentV2GetCardsListPostProcedure = "/wb.content.v1.ContentService/ContentV2GetCardsListPost"
	// ContentServiceContentV2GetCardsTrashPostProcedure is the fully-qualified name of the
	// ContentService's ContentV2GetCardsTrashPost RPC.
	ContentServiceContentV2GetCardsTrashPostProcedure = "/wb.content.v1.ContentService/ContentV2GetCardsTrashPost"
	// ContentServiceContentV2ObjectAllGetProcedure is the fully-qualified name of the ContentService's
	// ContentV2ObjectAllGet RPC.
	ContentServiceContentV2ObjectAllGetProcedure = "/wb.content.v1.ContentService/ContentV2ObjectAllGet"
	// ContentServiceContentV2ObjectCharcsSubjectIdGetProcedure is the fully-qualified name of the
	// ContentService's ContentV2ObjectCharcsSubjectIdGet RPC.
	ContentServiceContentV2ObjectCharcsSubjectIdGetProcedure = "/wb.content.v1.ContentService/ContentV2ObjectCharcsSubjectIdGet"
	// ContentServiceContentV2ObjectParentAllGetProcedure is the fully-qualified name of the
	// ContentService's ContentV2ObjectParentAllGet RPC.
	ContentServiceContentV2ObjectParentAllGetProcedure = "/wb.content.v1.ContentService/ContentV2ObjectParentAllGet"
	// ContentServiceContentV2TagIdDeleteProcedure is the fully-qualified name of the ContentService's
	// ContentV2TagIdDelete RPC.
	ContentServiceContentV2TagIdDeleteProcedure = "/wb.content.v1.ContentService/ContentV2TagIdDelete"
	// ContentServiceContentV2TagIdPatchProcedure is the fully-qualified name of the ContentService's
	// ContentV2TagIdPatch RPC.
	ContentServiceContentV2TagIdPatchProcedure = "/wb.content.v1.ContentService/ContentV2TagIdPatch"
	// ContentServiceContentV2TagNomenclatureLinkPostProcedure is the fully-qualified name of the
	// ContentService's ContentV2TagNomenclatureLinkPost RPC.
	ContentServiceContentV2TagNomenclatureLinkPostProcedure = "/wb.content.v1.ContentService/ContentV2TagNomenclatureLinkPost"
	// ContentServiceContentV2TagPostProcedure is the fully-qualified name of the ContentService's
	// ContentV2TagPost RPC.
	ContentServiceContentV2TagPostProcedure = "/wb.content.v1.ContentService/ContentV2TagPost"
	// ContentServiceContentV2TagsGetProcedure is the fully-qualified name of the ContentService's
	// ContentV2TagsGet RPC.
	ContentServiceContentV2TagsGetProcedure = "/wb.content.v1.ContentService/ContentV2TagsGet"
	// ContentServiceContentV3MediaFilePostProcedure is the fully-qualified name of the ContentService's
	// ContentV3MediaFilePost RPC.
	ContentServiceContentV3MediaFilePostProcedure = "/wb.content.v1.ContentService/ContentV3MediaFilePost"
	// ContentServiceContentV3MediaSavePostProcedure is the fully-qualified name of the ContentService's
	// ContentV3MediaSavePost RPC.
	ContentServiceContentV3MediaSavePostProcedure = "/wb.content.v1.ContentService/ContentV3MediaSavePost"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	contentServiceServiceDescriptor                                 = v1.File_wb_content_v1_service_proto.Services().ByName("ContentService")
	contentServiceContentV2BarcodesPostMethodDescriptor             = contentServiceServiceDescriptor.Methods().ByName("ContentV2BarcodesPost")
	contentServiceContentV2CardsDeleteTrashPostMethodDescriptor     = contentServiceServiceDescriptor.Methods().ByName("ContentV2CardsDeleteTrashPost")
	contentServiceContentV2CardsErrorListGetMethodDescriptor        = contentServiceServiceDescriptor.Methods().ByName("ContentV2CardsErrorListGet")
	contentServiceContentV2CardsLimitsGetMethodDescriptor           = contentServiceServiceDescriptor.Methods().ByName("ContentV2CardsLimitsGet")
	contentServiceContentV2CardsMoveNmPostMethodDescriptor          = contentServiceServiceDescriptor.Methods().ByName("ContentV2CardsMoveNmPost")
	contentServiceContentV2CardsRecoverPostMethodDescriptor         = contentServiceServiceDescriptor.Methods().ByName("ContentV2CardsRecoverPost")
	contentServiceContentV2CardsUpdatePostMethodDescriptor          = contentServiceServiceDescriptor.Methods().ByName("ContentV2CardsUpdatePost")
	contentServiceContentV2CardsUploadAddPostMethodDescriptor       = contentServiceServiceDescriptor.Methods().ByName("ContentV2CardsUploadAddPost")
	contentServiceContentV2CardsUploadPostMethodDescriptor          = contentServiceServiceDescriptor.Methods().ByName("ContentV2CardsUploadPost")
	contentServiceContentV2DirectoryColorsGetMethodDescriptor       = contentServiceServiceDescriptor.Methods().ByName("ContentV2DirectoryColorsGet")
	contentServiceContentV2DirectoryCountriesGetMethodDescriptor    = contentServiceServiceDescriptor.Methods().ByName("ContentV2DirectoryCountriesGet")
	contentServiceContentV2DirectoryKindsGetMethodDescriptor        = contentServiceServiceDescriptor.Methods().ByName("ContentV2DirectoryKindsGet")
	contentServiceContentV2DirectorySeasonsGetMethodDescriptor      = contentServiceServiceDescriptor.Methods().ByName("ContentV2DirectorySeasonsGet")
	contentServiceContentV2DirectoryTnvedGetMethodDescriptor        = contentServiceServiceDescriptor.Methods().ByName("ContentV2DirectoryTnvedGet")
	contentServiceContentV2DirectoryVatGetMethodDescriptor          = contentServiceServiceDescriptor.Methods().ByName("ContentV2DirectoryVatGet")
	contentServiceContentV2GetCardsListPostMethodDescriptor         = contentServiceServiceDescriptor.Methods().ByName("ContentV2GetCardsListPost")
	contentServiceContentV2GetCardsTrashPostMethodDescriptor        = contentServiceServiceDescriptor.Methods().ByName("ContentV2GetCardsTrashPost")
	contentServiceContentV2ObjectAllGetMethodDescriptor             = contentServiceServiceDescriptor.Methods().ByName("ContentV2ObjectAllGet")
	contentServiceContentV2ObjectCharcsSubjectIdGetMethodDescriptor = contentServiceServiceDescriptor.Methods().ByName("ContentV2ObjectCharcsSubjectIdGet")
	contentServiceContentV2ObjectParentAllGetMethodDescriptor       = contentServiceServiceDescriptor.Methods().ByName("ContentV2ObjectParentAllGet")
	contentServiceContentV2TagIdDeleteMethodDescriptor              = contentServiceServiceDescriptor.Methods().ByName("ContentV2TagIdDelete")
	contentServiceContentV2TagIdPatchMethodDescriptor               = contentServiceServiceDescriptor.Methods().ByName("ContentV2TagIdPatch")
	contentServiceContentV2TagNomenclatureLinkPostMethodDescriptor  = contentServiceServiceDescriptor.Methods().ByName("ContentV2TagNomenclatureLinkPost")
	contentServiceContentV2TagPostMethodDescriptor                  = contentServiceServiceDescriptor.Methods().ByName("ContentV2TagPost")
	contentServiceContentV2TagsGetMethodDescriptor                  = contentServiceServiceDescriptor.Methods().ByName("ContentV2TagsGet")
	contentServiceContentV3MediaFilePostMethodDescriptor            = contentServiceServiceDescriptor.Methods().ByName("ContentV3MediaFilePost")
	contentServiceContentV3MediaSavePostMethodDescriptor            = contentServiceServiceDescriptor.Methods().ByName("ContentV3MediaSavePost")
)

// ContentServiceClient is a client for the wb.content.v1.ContentService service.
type ContentServiceClient interface {
	ContentV2BarcodesPost(context.Context, *connect.Request[v1.ContentV2BarcodesPostRequest]) (*connect.Response[v1.ContentV2BarcodesPost200Response], error)
	ContentV2CardsDeleteTrashPost(context.Context, *connect.Request[v1.ContentV2CardsDeleteTrashPostRequest]) (*connect.Response[v1.ContentV2CardsDeleteTrashPost200Response], error)
	ContentV2CardsErrorListGet(context.Context, *connect.Request[v1.ContentV2CardsErrorListGetRequest]) (*connect.Response[v1.ContentV2CardsErrorListGet200Response], error)
	ContentV2CardsLimitsGet(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ContentV2CardsLimitsGet200Response], error)
	ContentV2CardsMoveNmPost(context.Context, *connect.Request[v1.ContentV2CardsMoveNmPostRequest]) (*connect.Response[v1.ResponseCardCreate], error)
	ContentV2CardsRecoverPost(context.Context, *connect.Request[v1.ContentV2CardsRecoverPostRequest]) (*connect.Response[v1.ContentV2CardsDeleteTrashPost200Response], error)
	ContentV2CardsUpdatePost(context.Context, *connect.Request[v1.ContentV2CardsUpdatePostRequest]) (*connect.Response[v1.ResponseCardCreate], error)
	ContentV2CardsUploadAddPost(context.Context, *connect.Request[v1.ContentV2CardsUploadAddPostRequest]) (*connect.Response[v1.ResponseCardCreate], error)
	ContentV2CardsUploadPost(context.Context, *connect.Request[v1.ContentV2CardsUploadPostRequest]) (*connect.Response[v1.ResponseCardCreate], error)
	ContentV2DirectoryColorsGet(context.Context, *connect.Request[v1.ContentV2DirectoryColorsGetRequest]) (*connect.Response[v1.ContentV2DirectoryColorsGet200Response], error)
	ContentV2DirectoryCountriesGet(context.Context, *connect.Request[v1.ContentV2DirectoryCountriesGetRequest]) (*connect.Response[v1.ContentV2DirectoryCountriesGet200Response], error)
	ContentV2DirectoryKindsGet(context.Context, *connect.Request[v1.ContentV2DirectoryKindsGetRequest]) (*connect.Response[v1.ContentV2DirectoryKindsGet200Response], error)
	ContentV2DirectorySeasonsGet(context.Context, *connect.Request[v1.ContentV2DirectorySeasonsGetRequest]) (*connect.Response[v1.ContentV2DirectorySeasonsGet200Response], error)
	ContentV2DirectoryTnvedGet(context.Context, *connect.Request[v1.ContentV2DirectoryTnvedGetRequest]) (*connect.Response[v1.ContentV2DirectoryTnvedGet200Response], error)
	ContentV2DirectoryVatGet(context.Context, *connect.Request[v1.ContentV2DirectoryVatGetRequest]) (*connect.Response[v1.ContentV2DirectoryVatGet200Response], error)
	ContentV2GetCardsListPost(context.Context, *connect.Request[v1.ContentV2GetCardsListPostRequest]) (*connect.Response[v1.ContentV2GetCardsListPost200Response], error)
	ContentV2GetCardsTrashPost(context.Context, *connect.Request[v1.ContentV2GetCardsTrashPostRequest]) (*connect.Response[v1.ContentV2GetCardsTrashPost200Response], error)
	ContentV2ObjectAllGet(context.Context, *connect.Request[v1.ContentV2ObjectAllGetRequest]) (*connect.Response[v1.ContentV2ObjectAllGet200Response], error)
	ContentV2ObjectCharcsSubjectIdGet(context.Context, *connect.Request[v1.ContentV2ObjectCharcsSubjectIdGetRequest]) (*connect.Response[v1.ContentV2ObjectCharcsSubjectIdGet200Response], error)
	ContentV2ObjectParentAllGet(context.Context, *connect.Request[v1.ContentV2ObjectParentAllGetRequest]) (*connect.Response[v1.ContentV2ObjectParentAllGet200Response], error)
	ContentV2TagIdDelete(context.Context, *connect.Request[v1.ContentV2TagIdDeleteRequest]) (*connect.Response[v1.ContentV2TagIdDelete200Response], error)
	ContentV2TagIdPatch(context.Context, *connect.Request[v1.ContentV2TagIdPatchRequest]) (*connect.Response[v1.ContentV2TagIdPatch200Response], error)
	ContentV2TagNomenclatureLinkPost(context.Context, *connect.Request[v1.ContentV2TagNomenclatureLinkPostRequest]) (*connect.Response[v1.ResponseContentError6], error)
	ContentV2TagPost(context.Context, *connect.Request[v1.ContentV2TagPostRequest]) (*connect.Response[v1.ResponseContentError6], error)
	ContentV2TagsGet(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ContentV2TagsGet200Response], error)
	ContentV3MediaFilePost(context.Context, *connect.Request[v1.ContentV3MediaFilePostRequest]) (*connect.Response[v1.ContentV3MediaSavePost200Response], error)
	ContentV3MediaSavePost(context.Context, *connect.Request[v1.ContentV3MediaSavePostRequest]) (*connect.Response[v1.ContentV3MediaSavePost200Response], error)
}

// NewContentServiceClient constructs a client for the wb.content.v1.ContentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewContentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ContentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &contentServiceClient{
		contentV2BarcodesPost: connect.NewClient[v1.ContentV2BarcodesPostRequest, v1.ContentV2BarcodesPost200Response](
			httpClient,
			baseURL+ContentServiceContentV2BarcodesPostProcedure,
			connect.WithSchema(contentServiceContentV2BarcodesPostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2CardsDeleteTrashPost: connect.NewClient[v1.ContentV2CardsDeleteTrashPostRequest, v1.ContentV2CardsDeleteTrashPost200Response](
			httpClient,
			baseURL+ContentServiceContentV2CardsDeleteTrashPostProcedure,
			connect.WithSchema(contentServiceContentV2CardsDeleteTrashPostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2CardsErrorListGet: connect.NewClient[v1.ContentV2CardsErrorListGetRequest, v1.ContentV2CardsErrorListGet200Response](
			httpClient,
			baseURL+ContentServiceContentV2CardsErrorListGetProcedure,
			connect.WithSchema(contentServiceContentV2CardsErrorListGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2CardsLimitsGet: connect.NewClient[emptypb.Empty, v1.ContentV2CardsLimitsGet200Response](
			httpClient,
			baseURL+ContentServiceContentV2CardsLimitsGetProcedure,
			connect.WithSchema(contentServiceContentV2CardsLimitsGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2CardsMoveNmPost: connect.NewClient[v1.ContentV2CardsMoveNmPostRequest, v1.ResponseCardCreate](
			httpClient,
			baseURL+ContentServiceContentV2CardsMoveNmPostProcedure,
			connect.WithSchema(contentServiceContentV2CardsMoveNmPostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2CardsRecoverPost: connect.NewClient[v1.ContentV2CardsRecoverPostRequest, v1.ContentV2CardsDeleteTrashPost200Response](
			httpClient,
			baseURL+ContentServiceContentV2CardsRecoverPostProcedure,
			connect.WithSchema(contentServiceContentV2CardsRecoverPostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2CardsUpdatePost: connect.NewClient[v1.ContentV2CardsUpdatePostRequest, v1.ResponseCardCreate](
			httpClient,
			baseURL+ContentServiceContentV2CardsUpdatePostProcedure,
			connect.WithSchema(contentServiceContentV2CardsUpdatePostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2CardsUploadAddPost: connect.NewClient[v1.ContentV2CardsUploadAddPostRequest, v1.ResponseCardCreate](
			httpClient,
			baseURL+ContentServiceContentV2CardsUploadAddPostProcedure,
			connect.WithSchema(contentServiceContentV2CardsUploadAddPostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2CardsUploadPost: connect.NewClient[v1.ContentV2CardsUploadPostRequest, v1.ResponseCardCreate](
			httpClient,
			baseURL+ContentServiceContentV2CardsUploadPostProcedure,
			connect.WithSchema(contentServiceContentV2CardsUploadPostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2DirectoryColorsGet: connect.NewClient[v1.ContentV2DirectoryColorsGetRequest, v1.ContentV2DirectoryColorsGet200Response](
			httpClient,
			baseURL+ContentServiceContentV2DirectoryColorsGetProcedure,
			connect.WithSchema(contentServiceContentV2DirectoryColorsGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2DirectoryCountriesGet: connect.NewClient[v1.ContentV2DirectoryCountriesGetRequest, v1.ContentV2DirectoryCountriesGet200Response](
			httpClient,
			baseURL+ContentServiceContentV2DirectoryCountriesGetProcedure,
			connect.WithSchema(contentServiceContentV2DirectoryCountriesGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2DirectoryKindsGet: connect.NewClient[v1.ContentV2DirectoryKindsGetRequest, v1.ContentV2DirectoryKindsGet200Response](
			httpClient,
			baseURL+ContentServiceContentV2DirectoryKindsGetProcedure,
			connect.WithSchema(contentServiceContentV2DirectoryKindsGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2DirectorySeasonsGet: connect.NewClient[v1.ContentV2DirectorySeasonsGetRequest, v1.ContentV2DirectorySeasonsGet200Response](
			httpClient,
			baseURL+ContentServiceContentV2DirectorySeasonsGetProcedure,
			connect.WithSchema(contentServiceContentV2DirectorySeasonsGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2DirectoryTnvedGet: connect.NewClient[v1.ContentV2DirectoryTnvedGetRequest, v1.ContentV2DirectoryTnvedGet200Response](
			httpClient,
			baseURL+ContentServiceContentV2DirectoryTnvedGetProcedure,
			connect.WithSchema(contentServiceContentV2DirectoryTnvedGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2DirectoryVatGet: connect.NewClient[v1.ContentV2DirectoryVatGetRequest, v1.ContentV2DirectoryVatGet200Response](
			httpClient,
			baseURL+ContentServiceContentV2DirectoryVatGetProcedure,
			connect.WithSchema(contentServiceContentV2DirectoryVatGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2GetCardsListPost: connect.NewClient[v1.ContentV2GetCardsListPostRequest, v1.ContentV2GetCardsListPost200Response](
			httpClient,
			baseURL+ContentServiceContentV2GetCardsListPostProcedure,
			connect.WithSchema(contentServiceContentV2GetCardsListPostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2GetCardsTrashPost: connect.NewClient[v1.ContentV2GetCardsTrashPostRequest, v1.ContentV2GetCardsTrashPost200Response](
			httpClient,
			baseURL+ContentServiceContentV2GetCardsTrashPostProcedure,
			connect.WithSchema(contentServiceContentV2GetCardsTrashPostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2ObjectAllGet: connect.NewClient[v1.ContentV2ObjectAllGetRequest, v1.ContentV2ObjectAllGet200Response](
			httpClient,
			baseURL+ContentServiceContentV2ObjectAllGetProcedure,
			connect.WithSchema(contentServiceContentV2ObjectAllGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2ObjectCharcsSubjectIdGet: connect.NewClient[v1.ContentV2ObjectCharcsSubjectIdGetRequest, v1.ContentV2ObjectCharcsSubjectIdGet200Response](
			httpClient,
			baseURL+ContentServiceContentV2ObjectCharcsSubjectIdGetProcedure,
			connect.WithSchema(contentServiceContentV2ObjectCharcsSubjectIdGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2ObjectParentAllGet: connect.NewClient[v1.ContentV2ObjectParentAllGetRequest, v1.ContentV2ObjectParentAllGet200Response](
			httpClient,
			baseURL+ContentServiceContentV2ObjectParentAllGetProcedure,
			connect.WithSchema(contentServiceContentV2ObjectParentAllGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2TagIdDelete: connect.NewClient[v1.ContentV2TagIdDeleteRequest, v1.ContentV2TagIdDelete200Response](
			httpClient,
			baseURL+ContentServiceContentV2TagIdDeleteProcedure,
			connect.WithSchema(contentServiceContentV2TagIdDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2TagIdPatch: connect.NewClient[v1.ContentV2TagIdPatchRequest, v1.ContentV2TagIdPatch200Response](
			httpClient,
			baseURL+ContentServiceContentV2TagIdPatchProcedure,
			connect.WithSchema(contentServiceContentV2TagIdPatchMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2TagNomenclatureLinkPost: connect.NewClient[v1.ContentV2TagNomenclatureLinkPostRequest, v1.ResponseContentError6](
			httpClient,
			baseURL+ContentServiceContentV2TagNomenclatureLinkPostProcedure,
			connect.WithSchema(contentServiceContentV2TagNomenclatureLinkPostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2TagPost: connect.NewClient[v1.ContentV2TagPostRequest, v1.ResponseContentError6](
			httpClient,
			baseURL+ContentServiceContentV2TagPostProcedure,
			connect.WithSchema(contentServiceContentV2TagPostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV2TagsGet: connect.NewClient[emptypb.Empty, v1.ContentV2TagsGet200Response](
			httpClient,
			baseURL+ContentServiceContentV2TagsGetProcedure,
			connect.WithSchema(contentServiceContentV2TagsGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV3MediaFilePost: connect.NewClient[v1.ContentV3MediaFilePostRequest, v1.ContentV3MediaSavePost200Response](
			httpClient,
			baseURL+ContentServiceContentV3MediaFilePostProcedure,
			connect.WithSchema(contentServiceContentV3MediaFilePostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		contentV3MediaSavePost: connect.NewClient[v1.ContentV3MediaSavePostRequest, v1.ContentV3MediaSavePost200Response](
			httpClient,
			baseURL+ContentServiceContentV3MediaSavePostProcedure,
			connect.WithSchema(contentServiceContentV3MediaSavePostMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// contentServiceClient implements ContentServiceClient.
type contentServiceClient struct {
	contentV2BarcodesPost             *connect.Client[v1.ContentV2BarcodesPostRequest, v1.ContentV2BarcodesPost200Response]
	contentV2CardsDeleteTrashPost     *connect.Client[v1.ContentV2CardsDeleteTrashPostRequest, v1.ContentV2CardsDeleteTrashPost200Response]
	contentV2CardsErrorListGet        *connect.Client[v1.ContentV2CardsErrorListGetRequest, v1.ContentV2CardsErrorListGet200Response]
	contentV2CardsLimitsGet           *connect.Client[emptypb.Empty, v1.ContentV2CardsLimitsGet200Response]
	contentV2CardsMoveNmPost          *connect.Client[v1.ContentV2CardsMoveNmPostRequest, v1.ResponseCardCreate]
	contentV2CardsRecoverPost         *connect.Client[v1.ContentV2CardsRecoverPostRequest, v1.ContentV2CardsDeleteTrashPost200Response]
	contentV2CardsUpdatePost          *connect.Client[v1.ContentV2CardsUpdatePostRequest, v1.ResponseCardCreate]
	contentV2CardsUploadAddPost       *connect.Client[v1.ContentV2CardsUploadAddPostRequest, v1.ResponseCardCreate]
	contentV2CardsUploadPost          *connect.Client[v1.ContentV2CardsUploadPostRequest, v1.ResponseCardCreate]
	contentV2DirectoryColorsGet       *connect.Client[v1.ContentV2DirectoryColorsGetRequest, v1.ContentV2DirectoryColorsGet200Response]
	contentV2DirectoryCountriesGet    *connect.Client[v1.ContentV2DirectoryCountriesGetRequest, v1.ContentV2DirectoryCountriesGet200Response]
	contentV2DirectoryKindsGet        *connect.Client[v1.ContentV2DirectoryKindsGetRequest, v1.ContentV2DirectoryKindsGet200Response]
	contentV2DirectorySeasonsGet      *connect.Client[v1.ContentV2DirectorySeasonsGetRequest, v1.ContentV2DirectorySeasonsGet200Response]
	contentV2DirectoryTnvedGet        *connect.Client[v1.ContentV2DirectoryTnvedGetRequest, v1.ContentV2DirectoryTnvedGet200Response]
	contentV2DirectoryVatGet          *connect.Client[v1.ContentV2DirectoryVatGetRequest, v1.ContentV2DirectoryVatGet200Response]
	contentV2GetCardsListPost         *connect.Client[v1.ContentV2GetCardsListPostRequest, v1.ContentV2GetCardsListPost200Response]
	contentV2GetCardsTrashPost        *connect.Client[v1.ContentV2GetCardsTrashPostRequest, v1.ContentV2GetCardsTrashPost200Response]
	contentV2ObjectAllGet             *connect.Client[v1.ContentV2ObjectAllGetRequest, v1.ContentV2ObjectAllGet200Response]
	contentV2ObjectCharcsSubjectIdGet *connect.Client[v1.ContentV2ObjectCharcsSubjectIdGetRequest, v1.ContentV2ObjectCharcsSubjectIdGet200Response]
	contentV2ObjectParentAllGet       *connect.Client[v1.ContentV2ObjectParentAllGetRequest, v1.ContentV2ObjectParentAllGet200Response]
	contentV2TagIdDelete              *connect.Client[v1.ContentV2TagIdDeleteRequest, v1.ContentV2TagIdDelete200Response]
	contentV2TagIdPatch               *connect.Client[v1.ContentV2TagIdPatchRequest, v1.ContentV2TagIdPatch200Response]
	contentV2TagNomenclatureLinkPost  *connect.Client[v1.ContentV2TagNomenclatureLinkPostRequest, v1.ResponseContentError6]
	contentV2TagPost                  *connect.Client[v1.ContentV2TagPostRequest, v1.ResponseContentError6]
	contentV2TagsGet                  *connect.Client[emptypb.Empty, v1.ContentV2TagsGet200Response]
	contentV3MediaFilePost            *connect.Client[v1.ContentV3MediaFilePostRequest, v1.ContentV3MediaSavePost200Response]
	contentV3MediaSavePost            *connect.Client[v1.ContentV3MediaSavePostRequest, v1.ContentV3MediaSavePost200Response]
}

// ContentV2BarcodesPost calls wb.content.v1.ContentService.ContentV2BarcodesPost.
func (c *contentServiceClient) ContentV2BarcodesPost(ctx context.Context, req *connect.Request[v1.ContentV2BarcodesPostRequest]) (*connect.Response[v1.ContentV2BarcodesPost200Response], error) {
	return c.contentV2BarcodesPost.CallUnary(ctx, req)
}

// ContentV2CardsDeleteTrashPost calls wb.content.v1.ContentService.ContentV2CardsDeleteTrashPost.
func (c *contentServiceClient) ContentV2CardsDeleteTrashPost(ctx context.Context, req *connect.Request[v1.ContentV2CardsDeleteTrashPostRequest]) (*connect.Response[v1.ContentV2CardsDeleteTrashPost200Response], error) {
	return c.contentV2CardsDeleteTrashPost.CallUnary(ctx, req)
}

// ContentV2CardsErrorListGet calls wb.content.v1.ContentService.ContentV2CardsErrorListGet.
func (c *contentServiceClient) ContentV2CardsErrorListGet(ctx context.Context, req *connect.Request[v1.ContentV2CardsErrorListGetRequest]) (*connect.Response[v1.ContentV2CardsErrorListGet200Response], error) {
	return c.contentV2CardsErrorListGet.CallUnary(ctx, req)
}

// ContentV2CardsLimitsGet calls wb.content.v1.ContentService.ContentV2CardsLimitsGet.
func (c *contentServiceClient) ContentV2CardsLimitsGet(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ContentV2CardsLimitsGet200Response], error) {
	return c.contentV2CardsLimitsGet.CallUnary(ctx, req)
}

// ContentV2CardsMoveNmPost calls wb.content.v1.ContentService.ContentV2CardsMoveNmPost.
func (c *contentServiceClient) ContentV2CardsMoveNmPost(ctx context.Context, req *connect.Request[v1.ContentV2CardsMoveNmPostRequest]) (*connect.Response[v1.ResponseCardCreate], error) {
	return c.contentV2CardsMoveNmPost.CallUnary(ctx, req)
}

// ContentV2CardsRecoverPost calls wb.content.v1.ContentService.ContentV2CardsRecoverPost.
func (c *contentServiceClient) ContentV2CardsRecoverPost(ctx context.Context, req *connect.Request[v1.ContentV2CardsRecoverPostRequest]) (*connect.Response[v1.ContentV2CardsDeleteTrashPost200Response], error) {
	return c.contentV2CardsRecoverPost.CallUnary(ctx, req)
}

// ContentV2CardsUpdatePost calls wb.content.v1.ContentService.ContentV2CardsUpdatePost.
func (c *contentServiceClient) ContentV2CardsUpdatePost(ctx context.Context, req *connect.Request[v1.ContentV2CardsUpdatePostRequest]) (*connect.Response[v1.ResponseCardCreate], error) {
	return c.contentV2CardsUpdatePost.CallUnary(ctx, req)
}

// ContentV2CardsUploadAddPost calls wb.content.v1.ContentService.ContentV2CardsUploadAddPost.
func (c *contentServiceClient) ContentV2CardsUploadAddPost(ctx context.Context, req *connect.Request[v1.ContentV2CardsUploadAddPostRequest]) (*connect.Response[v1.ResponseCardCreate], error) {
	return c.contentV2CardsUploadAddPost.CallUnary(ctx, req)
}

// ContentV2CardsUploadPost calls wb.content.v1.ContentService.ContentV2CardsUploadPost.
func (c *contentServiceClient) ContentV2CardsUploadPost(ctx context.Context, req *connect.Request[v1.ContentV2CardsUploadPostRequest]) (*connect.Response[v1.ResponseCardCreate], error) {
	return c.contentV2CardsUploadPost.CallUnary(ctx, req)
}

// ContentV2DirectoryColorsGet calls wb.content.v1.ContentService.ContentV2DirectoryColorsGet.
func (c *contentServiceClient) ContentV2DirectoryColorsGet(ctx context.Context, req *connect.Request[v1.ContentV2DirectoryColorsGetRequest]) (*connect.Response[v1.ContentV2DirectoryColorsGet200Response], error) {
	return c.contentV2DirectoryColorsGet.CallUnary(ctx, req)
}

// ContentV2DirectoryCountriesGet calls wb.content.v1.ContentService.ContentV2DirectoryCountriesGet.
func (c *contentServiceClient) ContentV2DirectoryCountriesGet(ctx context.Context, req *connect.Request[v1.ContentV2DirectoryCountriesGetRequest]) (*connect.Response[v1.ContentV2DirectoryCountriesGet200Response], error) {
	return c.contentV2DirectoryCountriesGet.CallUnary(ctx, req)
}

// ContentV2DirectoryKindsGet calls wb.content.v1.ContentService.ContentV2DirectoryKindsGet.
func (c *contentServiceClient) ContentV2DirectoryKindsGet(ctx context.Context, req *connect.Request[v1.ContentV2DirectoryKindsGetRequest]) (*connect.Response[v1.ContentV2DirectoryKindsGet200Response], error) {
	return c.contentV2DirectoryKindsGet.CallUnary(ctx, req)
}

// ContentV2DirectorySeasonsGet calls wb.content.v1.ContentService.ContentV2DirectorySeasonsGet.
func (c *contentServiceClient) ContentV2DirectorySeasonsGet(ctx context.Context, req *connect.Request[v1.ContentV2DirectorySeasonsGetRequest]) (*connect.Response[v1.ContentV2DirectorySeasonsGet200Response], error) {
	return c.contentV2DirectorySeasonsGet.CallUnary(ctx, req)
}

// ContentV2DirectoryTnvedGet calls wb.content.v1.ContentService.ContentV2DirectoryTnvedGet.
func (c *contentServiceClient) ContentV2DirectoryTnvedGet(ctx context.Context, req *connect.Request[v1.ContentV2DirectoryTnvedGetRequest]) (*connect.Response[v1.ContentV2DirectoryTnvedGet200Response], error) {
	return c.contentV2DirectoryTnvedGet.CallUnary(ctx, req)
}

// ContentV2DirectoryVatGet calls wb.content.v1.ContentService.ContentV2DirectoryVatGet.
func (c *contentServiceClient) ContentV2DirectoryVatGet(ctx context.Context, req *connect.Request[v1.ContentV2DirectoryVatGetRequest]) (*connect.Response[v1.ContentV2DirectoryVatGet200Response], error) {
	return c.contentV2DirectoryVatGet.CallUnary(ctx, req)
}

// ContentV2GetCardsListPost calls wb.content.v1.ContentService.ContentV2GetCardsListPost.
func (c *contentServiceClient) ContentV2GetCardsListPost(ctx context.Context, req *connect.Request[v1.ContentV2GetCardsListPostRequest]) (*connect.Response[v1.ContentV2GetCardsListPost200Response], error) {
	return c.contentV2GetCardsListPost.CallUnary(ctx, req)
}

// ContentV2GetCardsTrashPost calls wb.content.v1.ContentService.ContentV2GetCardsTrashPost.
func (c *contentServiceClient) ContentV2GetCardsTrashPost(ctx context.Context, req *connect.Request[v1.ContentV2GetCardsTrashPostRequest]) (*connect.Response[v1.ContentV2GetCardsTrashPost200Response], error) {
	return c.contentV2GetCardsTrashPost.CallUnary(ctx, req)
}

// ContentV2ObjectAllGet calls wb.content.v1.ContentService.ContentV2ObjectAllGet.
func (c *contentServiceClient) ContentV2ObjectAllGet(ctx context.Context, req *connect.Request[v1.ContentV2ObjectAllGetRequest]) (*connect.Response[v1.ContentV2ObjectAllGet200Response], error) {
	return c.contentV2ObjectAllGet.CallUnary(ctx, req)
}

// ContentV2ObjectCharcsSubjectIdGet calls
// wb.content.v1.ContentService.ContentV2ObjectCharcsSubjectIdGet.
func (c *contentServiceClient) ContentV2ObjectCharcsSubjectIdGet(ctx context.Context, req *connect.Request[v1.ContentV2ObjectCharcsSubjectIdGetRequest]) (*connect.Response[v1.ContentV2ObjectCharcsSubjectIdGet200Response], error) {
	return c.contentV2ObjectCharcsSubjectIdGet.CallUnary(ctx, req)
}

// ContentV2ObjectParentAllGet calls wb.content.v1.ContentService.ContentV2ObjectParentAllGet.
func (c *contentServiceClient) ContentV2ObjectParentAllGet(ctx context.Context, req *connect.Request[v1.ContentV2ObjectParentAllGetRequest]) (*connect.Response[v1.ContentV2ObjectParentAllGet200Response], error) {
	return c.contentV2ObjectParentAllGet.CallUnary(ctx, req)
}

// ContentV2TagIdDelete calls wb.content.v1.ContentService.ContentV2TagIdDelete.
func (c *contentServiceClient) ContentV2TagIdDelete(ctx context.Context, req *connect.Request[v1.ContentV2TagIdDeleteRequest]) (*connect.Response[v1.ContentV2TagIdDelete200Response], error) {
	return c.contentV2TagIdDelete.CallUnary(ctx, req)
}

// ContentV2TagIdPatch calls wb.content.v1.ContentService.ContentV2TagIdPatch.
func (c *contentServiceClient) ContentV2TagIdPatch(ctx context.Context, req *connect.Request[v1.ContentV2TagIdPatchRequest]) (*connect.Response[v1.ContentV2TagIdPatch200Response], error) {
	return c.contentV2TagIdPatch.CallUnary(ctx, req)
}

// ContentV2TagNomenclatureLinkPost calls
// wb.content.v1.ContentService.ContentV2TagNomenclatureLinkPost.
func (c *contentServiceClient) ContentV2TagNomenclatureLinkPost(ctx context.Context, req *connect.Request[v1.ContentV2TagNomenclatureLinkPostRequest]) (*connect.Response[v1.ResponseContentError6], error) {
	return c.contentV2TagNomenclatureLinkPost.CallUnary(ctx, req)
}

// ContentV2TagPost calls wb.content.v1.ContentService.ContentV2TagPost.
func (c *contentServiceClient) ContentV2TagPost(ctx context.Context, req *connect.Request[v1.ContentV2TagPostRequest]) (*connect.Response[v1.ResponseContentError6], error) {
	return c.contentV2TagPost.CallUnary(ctx, req)
}

// ContentV2TagsGet calls wb.content.v1.ContentService.ContentV2TagsGet.
func (c *contentServiceClient) ContentV2TagsGet(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ContentV2TagsGet200Response], error) {
	return c.contentV2TagsGet.CallUnary(ctx, req)
}

// ContentV3MediaFilePost calls wb.content.v1.ContentService.ContentV3MediaFilePost.
func (c *contentServiceClient) ContentV3MediaFilePost(ctx context.Context, req *connect.Request[v1.ContentV3MediaFilePostRequest]) (*connect.Response[v1.ContentV3MediaSavePost200Response], error) {
	return c.contentV3MediaFilePost.CallUnary(ctx, req)
}

// ContentV3MediaSavePost calls wb.content.v1.ContentService.ContentV3MediaSavePost.
func (c *contentServiceClient) ContentV3MediaSavePost(ctx context.Context, req *connect.Request[v1.ContentV3MediaSavePostRequest]) (*connect.Response[v1.ContentV3MediaSavePost200Response], error) {
	return c.contentV3MediaSavePost.CallUnary(ctx, req)
}

// ContentServiceHandler is an implementation of the wb.content.v1.ContentService service.
type ContentServiceHandler interface {
	ContentV2BarcodesPost(context.Context, *connect.Request[v1.ContentV2BarcodesPostRequest]) (*connect.Response[v1.ContentV2BarcodesPost200Response], error)
	ContentV2CardsDeleteTrashPost(context.Context, *connect.Request[v1.ContentV2CardsDeleteTrashPostRequest]) (*connect.Response[v1.ContentV2CardsDeleteTrashPost200Response], error)
	ContentV2CardsErrorListGet(context.Context, *connect.Request[v1.ContentV2CardsErrorListGetRequest]) (*connect.Response[v1.ContentV2CardsErrorListGet200Response], error)
	ContentV2CardsLimitsGet(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ContentV2CardsLimitsGet200Response], error)
	ContentV2CardsMoveNmPost(context.Context, *connect.Request[v1.ContentV2CardsMoveNmPostRequest]) (*connect.Response[v1.ResponseCardCreate], error)
	ContentV2CardsRecoverPost(context.Context, *connect.Request[v1.ContentV2CardsRecoverPostRequest]) (*connect.Response[v1.ContentV2CardsDeleteTrashPost200Response], error)
	ContentV2CardsUpdatePost(context.Context, *connect.Request[v1.ContentV2CardsUpdatePostRequest]) (*connect.Response[v1.ResponseCardCreate], error)
	ContentV2CardsUploadAddPost(context.Context, *connect.Request[v1.ContentV2CardsUploadAddPostRequest]) (*connect.Response[v1.ResponseCardCreate], error)
	ContentV2CardsUploadPost(context.Context, *connect.Request[v1.ContentV2CardsUploadPostRequest]) (*connect.Response[v1.ResponseCardCreate], error)
	ContentV2DirectoryColorsGet(context.Context, *connect.Request[v1.ContentV2DirectoryColorsGetRequest]) (*connect.Response[v1.ContentV2DirectoryColorsGet200Response], error)
	ContentV2DirectoryCountriesGet(context.Context, *connect.Request[v1.ContentV2DirectoryCountriesGetRequest]) (*connect.Response[v1.ContentV2DirectoryCountriesGet200Response], error)
	ContentV2DirectoryKindsGet(context.Context, *connect.Request[v1.ContentV2DirectoryKindsGetRequest]) (*connect.Response[v1.ContentV2DirectoryKindsGet200Response], error)
	ContentV2DirectorySeasonsGet(context.Context, *connect.Request[v1.ContentV2DirectorySeasonsGetRequest]) (*connect.Response[v1.ContentV2DirectorySeasonsGet200Response], error)
	ContentV2DirectoryTnvedGet(context.Context, *connect.Request[v1.ContentV2DirectoryTnvedGetRequest]) (*connect.Response[v1.ContentV2DirectoryTnvedGet200Response], error)
	ContentV2DirectoryVatGet(context.Context, *connect.Request[v1.ContentV2DirectoryVatGetRequest]) (*connect.Response[v1.ContentV2DirectoryVatGet200Response], error)
	ContentV2GetCardsListPost(context.Context, *connect.Request[v1.ContentV2GetCardsListPostRequest]) (*connect.Response[v1.ContentV2GetCardsListPost200Response], error)
	ContentV2GetCardsTrashPost(context.Context, *connect.Request[v1.ContentV2GetCardsTrashPostRequest]) (*connect.Response[v1.ContentV2GetCardsTrashPost200Response], error)
	ContentV2ObjectAllGet(context.Context, *connect.Request[v1.ContentV2ObjectAllGetRequest]) (*connect.Response[v1.ContentV2ObjectAllGet200Response], error)
	ContentV2ObjectCharcsSubjectIdGet(context.Context, *connect.Request[v1.ContentV2ObjectCharcsSubjectIdGetRequest]) (*connect.Response[v1.ContentV2ObjectCharcsSubjectIdGet200Response], error)
	ContentV2ObjectParentAllGet(context.Context, *connect.Request[v1.ContentV2ObjectParentAllGetRequest]) (*connect.Response[v1.ContentV2ObjectParentAllGet200Response], error)
	ContentV2TagIdDelete(context.Context, *connect.Request[v1.ContentV2TagIdDeleteRequest]) (*connect.Response[v1.ContentV2TagIdDelete200Response], error)
	ContentV2TagIdPatch(context.Context, *connect.Request[v1.ContentV2TagIdPatchRequest]) (*connect.Response[v1.ContentV2TagIdPatch200Response], error)
	ContentV2TagNomenclatureLinkPost(context.Context, *connect.Request[v1.ContentV2TagNomenclatureLinkPostRequest]) (*connect.Response[v1.ResponseContentError6], error)
	ContentV2TagPost(context.Context, *connect.Request[v1.ContentV2TagPostRequest]) (*connect.Response[v1.ResponseContentError6], error)
	ContentV2TagsGet(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ContentV2TagsGet200Response], error)
	ContentV3MediaFilePost(context.Context, *connect.Request[v1.ContentV3MediaFilePostRequest]) (*connect.Response[v1.ContentV3MediaSavePost200Response], error)
	ContentV3MediaSavePost(context.Context, *connect.Request[v1.ContentV3MediaSavePostRequest]) (*connect.Response[v1.ContentV3MediaSavePost200Response], error)
}

// NewContentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewContentServiceHandler(svc ContentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	contentServiceContentV2BarcodesPostHandler := connect.NewUnaryHandler(
		ContentServiceContentV2BarcodesPostProcedure,
		svc.ContentV2BarcodesPost,
		connect.WithSchema(contentServiceContentV2BarcodesPostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2CardsDeleteTrashPostHandler := connect.NewUnaryHandler(
		ContentServiceContentV2CardsDeleteTrashPostProcedure,
		svc.ContentV2CardsDeleteTrashPost,
		connect.WithSchema(contentServiceContentV2CardsDeleteTrashPostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2CardsErrorListGetHandler := connect.NewUnaryHandler(
		ContentServiceContentV2CardsErrorListGetProcedure,
		svc.ContentV2CardsErrorListGet,
		connect.WithSchema(contentServiceContentV2CardsErrorListGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2CardsLimitsGetHandler := connect.NewUnaryHandler(
		ContentServiceContentV2CardsLimitsGetProcedure,
		svc.ContentV2CardsLimitsGet,
		connect.WithSchema(contentServiceContentV2CardsLimitsGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2CardsMoveNmPostHandler := connect.NewUnaryHandler(
		ContentServiceContentV2CardsMoveNmPostProcedure,
		svc.ContentV2CardsMoveNmPost,
		connect.WithSchema(contentServiceContentV2CardsMoveNmPostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2CardsRecoverPostHandler := connect.NewUnaryHandler(
		ContentServiceContentV2CardsRecoverPostProcedure,
		svc.ContentV2CardsRecoverPost,
		connect.WithSchema(contentServiceContentV2CardsRecoverPostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2CardsUpdatePostHandler := connect.NewUnaryHandler(
		ContentServiceContentV2CardsUpdatePostProcedure,
		svc.ContentV2CardsUpdatePost,
		connect.WithSchema(contentServiceContentV2CardsUpdatePostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2CardsUploadAddPostHandler := connect.NewUnaryHandler(
		ContentServiceContentV2CardsUploadAddPostProcedure,
		svc.ContentV2CardsUploadAddPost,
		connect.WithSchema(contentServiceContentV2CardsUploadAddPostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2CardsUploadPostHandler := connect.NewUnaryHandler(
		ContentServiceContentV2CardsUploadPostProcedure,
		svc.ContentV2CardsUploadPost,
		connect.WithSchema(contentServiceContentV2CardsUploadPostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2DirectoryColorsGetHandler := connect.NewUnaryHandler(
		ContentServiceContentV2DirectoryColorsGetProcedure,
		svc.ContentV2DirectoryColorsGet,
		connect.WithSchema(contentServiceContentV2DirectoryColorsGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2DirectoryCountriesGetHandler := connect.NewUnaryHandler(
		ContentServiceContentV2DirectoryCountriesGetProcedure,
		svc.ContentV2DirectoryCountriesGet,
		connect.WithSchema(contentServiceContentV2DirectoryCountriesGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2DirectoryKindsGetHandler := connect.NewUnaryHandler(
		ContentServiceContentV2DirectoryKindsGetProcedure,
		svc.ContentV2DirectoryKindsGet,
		connect.WithSchema(contentServiceContentV2DirectoryKindsGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2DirectorySeasonsGetHandler := connect.NewUnaryHandler(
		ContentServiceContentV2DirectorySeasonsGetProcedure,
		svc.ContentV2DirectorySeasonsGet,
		connect.WithSchema(contentServiceContentV2DirectorySeasonsGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2DirectoryTnvedGetHandler := connect.NewUnaryHandler(
		ContentServiceContentV2DirectoryTnvedGetProcedure,
		svc.ContentV2DirectoryTnvedGet,
		connect.WithSchema(contentServiceContentV2DirectoryTnvedGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2DirectoryVatGetHandler := connect.NewUnaryHandler(
		ContentServiceContentV2DirectoryVatGetProcedure,
		svc.ContentV2DirectoryVatGet,
		connect.WithSchema(contentServiceContentV2DirectoryVatGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2GetCardsListPostHandler := connect.NewUnaryHandler(
		ContentServiceContentV2GetCardsListPostProcedure,
		svc.ContentV2GetCardsListPost,
		connect.WithSchema(contentServiceContentV2GetCardsListPostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2GetCardsTrashPostHandler := connect.NewUnaryHandler(
		ContentServiceContentV2GetCardsTrashPostProcedure,
		svc.ContentV2GetCardsTrashPost,
		connect.WithSchema(contentServiceContentV2GetCardsTrashPostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2ObjectAllGetHandler := connect.NewUnaryHandler(
		ContentServiceContentV2ObjectAllGetProcedure,
		svc.ContentV2ObjectAllGet,
		connect.WithSchema(contentServiceContentV2ObjectAllGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2ObjectCharcsSubjectIdGetHandler := connect.NewUnaryHandler(
		ContentServiceContentV2ObjectCharcsSubjectIdGetProcedure,
		svc.ContentV2ObjectCharcsSubjectIdGet,
		connect.WithSchema(contentServiceContentV2ObjectCharcsSubjectIdGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2ObjectParentAllGetHandler := connect.NewUnaryHandler(
		ContentServiceContentV2ObjectParentAllGetProcedure,
		svc.ContentV2ObjectParentAllGet,
		connect.WithSchema(contentServiceContentV2ObjectParentAllGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2TagIdDeleteHandler := connect.NewUnaryHandler(
		ContentServiceContentV2TagIdDeleteProcedure,
		svc.ContentV2TagIdDelete,
		connect.WithSchema(contentServiceContentV2TagIdDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2TagIdPatchHandler := connect.NewUnaryHandler(
		ContentServiceContentV2TagIdPatchProcedure,
		svc.ContentV2TagIdPatch,
		connect.WithSchema(contentServiceContentV2TagIdPatchMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2TagNomenclatureLinkPostHandler := connect.NewUnaryHandler(
		ContentServiceContentV2TagNomenclatureLinkPostProcedure,
		svc.ContentV2TagNomenclatureLinkPost,
		connect.WithSchema(contentServiceContentV2TagNomenclatureLinkPostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2TagPostHandler := connect.NewUnaryHandler(
		ContentServiceContentV2TagPostProcedure,
		svc.ContentV2TagPost,
		connect.WithSchema(contentServiceContentV2TagPostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV2TagsGetHandler := connect.NewUnaryHandler(
		ContentServiceContentV2TagsGetProcedure,
		svc.ContentV2TagsGet,
		connect.WithSchema(contentServiceContentV2TagsGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV3MediaFilePostHandler := connect.NewUnaryHandler(
		ContentServiceContentV3MediaFilePostProcedure,
		svc.ContentV3MediaFilePost,
		connect.WithSchema(contentServiceContentV3MediaFilePostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contentServiceContentV3MediaSavePostHandler := connect.NewUnaryHandler(
		ContentServiceContentV3MediaSavePostProcedure,
		svc.ContentV3MediaSavePost,
		connect.WithSchema(contentServiceContentV3MediaSavePostMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/wb.content.v1.ContentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ContentServiceContentV2BarcodesPostProcedure:
			contentServiceContentV2BarcodesPostHandler.ServeHTTP(w, r)
		case ContentServiceContentV2CardsDeleteTrashPostProcedure:
			contentServiceContentV2CardsDeleteTrashPostHandler.ServeHTTP(w, r)
		case ContentServiceContentV2CardsErrorListGetProcedure:
			contentServiceContentV2CardsErrorListGetHandler.ServeHTTP(w, r)
		case ContentServiceContentV2CardsLimitsGetProcedure:
			contentServiceContentV2CardsLimitsGetHandler.ServeHTTP(w, r)
		case ContentServiceContentV2CardsMoveNmPostProcedure:
			contentServiceContentV2CardsMoveNmPostHandler.ServeHTTP(w, r)
		case ContentServiceContentV2CardsRecoverPostProcedure:
			contentServiceContentV2CardsRecoverPostHandler.ServeHTTP(w, r)
		case ContentServiceContentV2CardsUpdatePostProcedure:
			contentServiceContentV2CardsUpdatePostHandler.ServeHTTP(w, r)
		case ContentServiceContentV2CardsUploadAddPostProcedure:
			contentServiceContentV2CardsUploadAddPostHandler.ServeHTTP(w, r)
		case ContentServiceContentV2CardsUploadPostProcedure:
			contentServiceContentV2CardsUploadPostHandler.ServeHTTP(w, r)
		case ContentServiceContentV2DirectoryColorsGetProcedure:
			contentServiceContentV2DirectoryColorsGetHandler.ServeHTTP(w, r)
		case ContentServiceContentV2DirectoryCountriesGetProcedure:
			contentServiceContentV2DirectoryCountriesGetHandler.ServeHTTP(w, r)
		case ContentServiceContentV2DirectoryKindsGetProcedure:
			contentServiceContentV2DirectoryKindsGetHandler.ServeHTTP(w, r)
		case ContentServiceContentV2DirectorySeasonsGetProcedure:
			contentServiceContentV2DirectorySeasonsGetHandler.ServeHTTP(w, r)
		case ContentServiceContentV2DirectoryTnvedGetProcedure:
			contentServiceContentV2DirectoryTnvedGetHandler.ServeHTTP(w, r)
		case ContentServiceContentV2DirectoryVatGetProcedure:
			contentServiceContentV2DirectoryVatGetHandler.ServeHTTP(w, r)
		case ContentServiceContentV2GetCardsListPostProcedure:
			contentServiceContentV2GetCardsListPostHandler.ServeHTTP(w, r)
		case ContentServiceContentV2GetCardsTrashPostProcedure:
			contentServiceContentV2GetCardsTrashPostHandler.ServeHTTP(w, r)
		case ContentServiceContentV2ObjectAllGetProcedure:
			contentServiceContentV2ObjectAllGetHandler.ServeHTTP(w, r)
		case ContentServiceContentV2ObjectCharcsSubjectIdGetProcedure:
			contentServiceContentV2ObjectCharcsSubjectIdGetHandler.ServeHTTP(w, r)
		case ContentServiceContentV2ObjectParentAllGetProcedure:
			contentServiceContentV2ObjectParentAllGetHandler.ServeHTTP(w, r)
		case ContentServiceContentV2TagIdDeleteProcedure:
			contentServiceContentV2TagIdDeleteHandler.ServeHTTP(w, r)
		case ContentServiceContentV2TagIdPatchProcedure:
			contentServiceContentV2TagIdPatchHandler.ServeHTTP(w, r)
		case ContentServiceContentV2TagNomenclatureLinkPostProcedure:
			contentServiceContentV2TagNomenclatureLinkPostHandler.ServeHTTP(w, r)
		case ContentServiceContentV2TagPostProcedure:
			contentServiceContentV2TagPostHandler.ServeHTTP(w, r)
		case ContentServiceContentV2TagsGetProcedure:
			contentServiceContentV2TagsGetHandler.ServeHTTP(w, r)
		case ContentServiceContentV3MediaFilePostProcedure:
			contentServiceContentV3MediaFilePostHandler.ServeHTTP(w, r)
		case ContentServiceContentV3MediaSavePostProcedure:
			contentServiceContentV3MediaSavePostHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedContentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedContentServiceHandler struct{}

func (UnimplementedContentServiceHandler) ContentV2BarcodesPost(context.Context, *connect.Request[v1.ContentV2BarcodesPostRequest]) (*connect.Response[v1.ContentV2BarcodesPost200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2BarcodesPost is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2CardsDeleteTrashPost(context.Context, *connect.Request[v1.ContentV2CardsDeleteTrashPostRequest]) (*connect.Response[v1.ContentV2CardsDeleteTrashPost200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2CardsDeleteTrashPost is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2CardsErrorListGet(context.Context, *connect.Request[v1.ContentV2CardsErrorListGetRequest]) (*connect.Response[v1.ContentV2CardsErrorListGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2CardsErrorListGet is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2CardsLimitsGet(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ContentV2CardsLimitsGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2CardsLimitsGet is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2CardsMoveNmPost(context.Context, *connect.Request[v1.ContentV2CardsMoveNmPostRequest]) (*connect.Response[v1.ResponseCardCreate], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2CardsMoveNmPost is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2CardsRecoverPost(context.Context, *connect.Request[v1.ContentV2CardsRecoverPostRequest]) (*connect.Response[v1.ContentV2CardsDeleteTrashPost200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2CardsRecoverPost is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2CardsUpdatePost(context.Context, *connect.Request[v1.ContentV2CardsUpdatePostRequest]) (*connect.Response[v1.ResponseCardCreate], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2CardsUpdatePost is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2CardsUploadAddPost(context.Context, *connect.Request[v1.ContentV2CardsUploadAddPostRequest]) (*connect.Response[v1.ResponseCardCreate], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2CardsUploadAddPost is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2CardsUploadPost(context.Context, *connect.Request[v1.ContentV2CardsUploadPostRequest]) (*connect.Response[v1.ResponseCardCreate], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2CardsUploadPost is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2DirectoryColorsGet(context.Context, *connect.Request[v1.ContentV2DirectoryColorsGetRequest]) (*connect.Response[v1.ContentV2DirectoryColorsGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2DirectoryColorsGet is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2DirectoryCountriesGet(context.Context, *connect.Request[v1.ContentV2DirectoryCountriesGetRequest]) (*connect.Response[v1.ContentV2DirectoryCountriesGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2DirectoryCountriesGet is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2DirectoryKindsGet(context.Context, *connect.Request[v1.ContentV2DirectoryKindsGetRequest]) (*connect.Response[v1.ContentV2DirectoryKindsGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2DirectoryKindsGet is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2DirectorySeasonsGet(context.Context, *connect.Request[v1.ContentV2DirectorySeasonsGetRequest]) (*connect.Response[v1.ContentV2DirectorySeasonsGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2DirectorySeasonsGet is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2DirectoryTnvedGet(context.Context, *connect.Request[v1.ContentV2DirectoryTnvedGetRequest]) (*connect.Response[v1.ContentV2DirectoryTnvedGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2DirectoryTnvedGet is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2DirectoryVatGet(context.Context, *connect.Request[v1.ContentV2DirectoryVatGetRequest]) (*connect.Response[v1.ContentV2DirectoryVatGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2DirectoryVatGet is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2GetCardsListPost(context.Context, *connect.Request[v1.ContentV2GetCardsListPostRequest]) (*connect.Response[v1.ContentV2GetCardsListPost200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2GetCardsListPost is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2GetCardsTrashPost(context.Context, *connect.Request[v1.ContentV2GetCardsTrashPostRequest]) (*connect.Response[v1.ContentV2GetCardsTrashPost200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2GetCardsTrashPost is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2ObjectAllGet(context.Context, *connect.Request[v1.ContentV2ObjectAllGetRequest]) (*connect.Response[v1.ContentV2ObjectAllGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2ObjectAllGet is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2ObjectCharcsSubjectIdGet(context.Context, *connect.Request[v1.ContentV2ObjectCharcsSubjectIdGetRequest]) (*connect.Response[v1.ContentV2ObjectCharcsSubjectIdGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2ObjectCharcsSubjectIdGet is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2ObjectParentAllGet(context.Context, *connect.Request[v1.ContentV2ObjectParentAllGetRequest]) (*connect.Response[v1.ContentV2ObjectParentAllGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2ObjectParentAllGet is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2TagIdDelete(context.Context, *connect.Request[v1.ContentV2TagIdDeleteRequest]) (*connect.Response[v1.ContentV2TagIdDelete200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2TagIdDelete is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2TagIdPatch(context.Context, *connect.Request[v1.ContentV2TagIdPatchRequest]) (*connect.Response[v1.ContentV2TagIdPatch200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2TagIdPatch is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2TagNomenclatureLinkPost(context.Context, *connect.Request[v1.ContentV2TagNomenclatureLinkPostRequest]) (*connect.Response[v1.ResponseContentError6], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2TagNomenclatureLinkPost is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2TagPost(context.Context, *connect.Request[v1.ContentV2TagPostRequest]) (*connect.Response[v1.ResponseContentError6], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2TagPost is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV2TagsGet(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ContentV2TagsGet200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV2TagsGet is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV3MediaFilePost(context.Context, *connect.Request[v1.ContentV3MediaFilePostRequest]) (*connect.Response[v1.ContentV3MediaSavePost200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV3MediaFilePost is not implemented"))
}

func (UnimplementedContentServiceHandler) ContentV3MediaSavePost(context.Context, *connect.Request[v1.ContentV3MediaSavePostRequest]) (*connect.Response[v1.ContentV3MediaSavePost200Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("wb.content.v1.ContentService.ContentV3MediaSavePost is not implemented"))
}
