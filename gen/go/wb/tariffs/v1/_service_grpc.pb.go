//
//Тарифы
//
//<p>Комиссии и тарифы на услуги можно получить с любым токеном, у которого не выбрана опция Тестовый контур.</p>
//
//The version of the OpenAPI document:
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: wb/tariffs/v1/_service.proto

package wbTARIFFS

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DefaultService_ApiV1TariffsBoxGet_FullMethodName        = "/wb.tariffs.v1.DefaultService/ApiV1TariffsBoxGet"
	DefaultService_ApiV1TariffsCommissionGet_FullMethodName = "/wb.tariffs.v1.DefaultService/ApiV1TariffsCommissionGet"
	DefaultService_ApiV1TariffsPalletGet_FullMethodName     = "/wb.tariffs.v1.DefaultService/ApiV1TariffsPalletGet"
	DefaultService_ApiV1TariffsReturnGet_FullMethodName     = "/wb.tariffs.v1.DefaultService/ApiV1TariffsReturnGet"
)

// DefaultServiceClient is the client API for DefaultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DefaultServiceClient interface {
	ApiV1TariffsBoxGet(ctx context.Context, in *ApiV1TariffsBoxGetRequest, opts ...grpc.CallOption) (*TariffsBoxResponse, error)
	ApiV1TariffsCommissionGet(ctx context.Context, in *ApiV1TariffsCommissionGetRequest, opts ...grpc.CallOption) (*ApiV1TariffsCommissionGet200Response, error)
	ApiV1TariffsPalletGet(ctx context.Context, in *ApiV1TariffsPalletGetRequest, opts ...grpc.CallOption) (*TariffsPalletResponse, error)
	ApiV1TariffsReturnGet(ctx context.Context, in *ApiV1TariffsReturnGetRequest, opts ...grpc.CallOption) (*ReturnTariffsResponse, error)
}

type defaultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDefaultServiceClient(cc grpc.ClientConnInterface) DefaultServiceClient {
	return &defaultServiceClient{cc}
}

func (c *defaultServiceClient) ApiV1TariffsBoxGet(ctx context.Context, in *ApiV1TariffsBoxGetRequest, opts ...grpc.CallOption) (*TariffsBoxResponse, error) {
	out := new(TariffsBoxResponse)
	err := c.cc.Invoke(ctx, DefaultService_ApiV1TariffsBoxGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultServiceClient) ApiV1TariffsCommissionGet(ctx context.Context, in *ApiV1TariffsCommissionGetRequest, opts ...grpc.CallOption) (*ApiV1TariffsCommissionGet200Response, error) {
	out := new(ApiV1TariffsCommissionGet200Response)
	err := c.cc.Invoke(ctx, DefaultService_ApiV1TariffsCommissionGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultServiceClient) ApiV1TariffsPalletGet(ctx context.Context, in *ApiV1TariffsPalletGetRequest, opts ...grpc.CallOption) (*TariffsPalletResponse, error) {
	out := new(TariffsPalletResponse)
	err := c.cc.Invoke(ctx, DefaultService_ApiV1TariffsPalletGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *defaultServiceClient) ApiV1TariffsReturnGet(ctx context.Context, in *ApiV1TariffsReturnGetRequest, opts ...grpc.CallOption) (*ReturnTariffsResponse, error) {
	out := new(ReturnTariffsResponse)
	err := c.cc.Invoke(ctx, DefaultService_ApiV1TariffsReturnGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DefaultServiceServer is the server API for DefaultService service.
// All implementations must embed UnimplementedDefaultServiceServer
// for forward compatibility
type DefaultServiceServer interface {
	ApiV1TariffsBoxGet(context.Context, *ApiV1TariffsBoxGetRequest) (*TariffsBoxResponse, error)
	ApiV1TariffsCommissionGet(context.Context, *ApiV1TariffsCommissionGetRequest) (*ApiV1TariffsCommissionGet200Response, error)
	ApiV1TariffsPalletGet(context.Context, *ApiV1TariffsPalletGetRequest) (*TariffsPalletResponse, error)
	ApiV1TariffsReturnGet(context.Context, *ApiV1TariffsReturnGetRequest) (*ReturnTariffsResponse, error)
	mustEmbedUnimplementedDefaultServiceServer()
}

// UnimplementedDefaultServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDefaultServiceServer struct {
}

func (UnimplementedDefaultServiceServer) ApiV1TariffsBoxGet(context.Context, *ApiV1TariffsBoxGetRequest) (*TariffsBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiV1TariffsBoxGet not implemented")
}
func (UnimplementedDefaultServiceServer) ApiV1TariffsCommissionGet(context.Context, *ApiV1TariffsCommissionGetRequest) (*ApiV1TariffsCommissionGet200Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiV1TariffsCommissionGet not implemented")
}
func (UnimplementedDefaultServiceServer) ApiV1TariffsPalletGet(context.Context, *ApiV1TariffsPalletGetRequest) (*TariffsPalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiV1TariffsPalletGet not implemented")
}
func (UnimplementedDefaultServiceServer) ApiV1TariffsReturnGet(context.Context, *ApiV1TariffsReturnGetRequest) (*ReturnTariffsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiV1TariffsReturnGet not implemented")
}
func (UnimplementedDefaultServiceServer) mustEmbedUnimplementedDefaultServiceServer() {}

// UnsafeDefaultServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DefaultServiceServer will
// result in compilation errors.
type UnsafeDefaultServiceServer interface {
	mustEmbedUnimplementedDefaultServiceServer()
}

func RegisterDefaultServiceServer(s grpc.ServiceRegistrar, srv DefaultServiceServer) {
	s.RegisterService(&DefaultService_ServiceDesc, srv)
}

func _DefaultService_ApiV1TariffsBoxGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiV1TariffsBoxGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).ApiV1TariffsBoxGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultService_ApiV1TariffsBoxGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).ApiV1TariffsBoxGet(ctx, req.(*ApiV1TariffsBoxGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultService_ApiV1TariffsCommissionGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiV1TariffsCommissionGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).ApiV1TariffsCommissionGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultService_ApiV1TariffsCommissionGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).ApiV1TariffsCommissionGet(ctx, req.(*ApiV1TariffsCommissionGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultService_ApiV1TariffsPalletGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiV1TariffsPalletGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).ApiV1TariffsPalletGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultService_ApiV1TariffsPalletGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).ApiV1TariffsPalletGet(ctx, req.(*ApiV1TariffsPalletGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DefaultService_ApiV1TariffsReturnGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiV1TariffsReturnGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServiceServer).ApiV1TariffsReturnGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DefaultService_ApiV1TariffsReturnGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServiceServer).ApiV1TariffsReturnGet(ctx, req.(*ApiV1TariffsReturnGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DefaultService_ServiceDesc is the grpc.ServiceDesc for DefaultService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DefaultService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wb.tariffs.v1.DefaultService",
	HandlerType: (*DefaultServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApiV1TariffsBoxGet",
			Handler:    _DefaultService_ApiV1TariffsBoxGet_Handler,
		},
		{
			MethodName: "ApiV1TariffsCommissionGet",
			Handler:    _DefaultService_ApiV1TariffsCommissionGet_Handler,
		},
		{
			MethodName: "ApiV1TariffsPalletGet",
			Handler:    _DefaultService_ApiV1TariffsPalletGet_Handler,
		},
		{
			MethodName: "ApiV1TariffsReturnGet",
			Handler:    _DefaultService_ApiV1TariffsReturnGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wb/tariffs/v1/_service.proto",
}
