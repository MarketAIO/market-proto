//
//Описание API Аналитика
//
//Сервис предоставляет публичный API для получения аналитических данных. С помощью этих методов вы можете получать аналитические отчёты. [Часть методов](./#tag/Voronka-prodazh-(Dzhem)/) доступна только с [подпиской на расширенную аналитику Джем](https://seller.wildberries.ru/dynamic-product-categories/jam).
//
//The version of the OpenAPI document:
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: wb/analytics/v1/response_paid_storage_inner.proto

package wbANALYTICS

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResponsePaidStorageInner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Дата, за которую был расчёт или перерасчёт
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// Коэффициент логистики и хранения
	LogWarehouseCoef float32 `protobuf:"fixed32,2,opt,name=logWarehouseCoef,proto3" json:"logWarehouseCoef,omitempty"`
	// ID склада
	OfficeId int32 `protobuf:"varint,3,opt,name=officeId,proto3" json:"officeId,omitempty"`
	// Название склада
	Warehouse string `protobuf:"bytes,4,opt,name=warehouse,proto3" json:"warehouse,omitempty"`
	// Коэффициент склада
	WarehouseCoef float32 `protobuf:"fixed32,5,opt,name=warehouseCoef,proto3" json:"warehouseCoef,omitempty"`
	// ID поставки
	GiId int32 `protobuf:"varint,6,opt,name=giId,proto3" json:"giId,omitempty"`
	// Идентификатор размера для этого артикула Wildberries
	ChrtId int32 `protobuf:"varint,7,opt,name=chrtId,proto3" json:"chrtId,omitempty"`
	// Размер (`techSize` в карточке товара)
	Size string `protobuf:"bytes,8,opt,name=size,proto3" json:"size,omitempty"`
	// Баркод
	Barcode string `protobuf:"bytes,9,opt,name=barcode,proto3" json:"barcode,omitempty"`
	// Предмет
	Subject string `protobuf:"bytes,10,opt,name=subject,proto3" json:"subject,omitempty"`
	// Бренд
	Brand string `protobuf:"bytes,11,opt,name=brand,proto3" json:"brand,omitempty"`
	// Артикул продавца
	VendorCode string `protobuf:"bytes,12,opt,name=vendorCode,proto3" json:"vendorCode,omitempty"`
	// Артикул Wildberries
	NmId int32 `protobuf:"varint,13,opt,name=nmId,proto3" json:"nmId,omitempty"`
	// Объём товара
	Volume float32 `protobuf:"fixed32,14,opt,name=volume,proto3" json:"volume,omitempty"`
	// Способ расчёта
	CalcType string `protobuf:"bytes,15,opt,name=calcType,proto3" json:"calcType,omitempty"`
	// Сумма хранения
	WarehousePrice float32 `protobuf:"fixed32,16,opt,name=warehousePrice,proto3" json:"warehousePrice,omitempty"`
	// Количество единиц товара (штук), подлежащих тарифицированию за расчётные сутки
	BarcodesCount int32 `protobuf:"varint,17,opt,name=barcodesCount,proto3" json:"barcodesCount,omitempty"`
	// Код палетоместа
	PalletPlaceCode int32 `protobuf:"varint,18,opt,name=palletPlaceCode,proto3" json:"palletPlaceCode,omitempty"`
	// Количество палет
	PalletCount float32 `protobuf:"fixed32,19,opt,name=palletCount,proto3" json:"palletCount,omitempty"`
	// Если был перерасчёт, это дата первоначального расчёта. Если перерасчёта не было, совпадает с `date`
	OriginalDate string `protobuf:"bytes,20,opt,name=originalDate,proto3" json:"originalDate,omitempty"`
	// Скидка программы лояльности, ₽
	LoyaltyDiscount float32 `protobuf:"fixed32,21,opt,name=loyaltyDiscount,proto3" json:"loyaltyDiscount,omitempty"`
	// Дата поставки. Значение доступно только для поставок с фиксацией тарифа
	GiDate string `protobuf:"bytes,22,opt,name=giDate,proto3" json:"giDate,omitempty"`
	// Дата начала фиксации тарифа
	GiFixDateFrom string `protobuf:"bytes,23,opt,name=giFixDateFrom,proto3" json:"giFixDateFrom,omitempty"`
	// Дата конца фиксации тарифа
	GiFixDateTill string `protobuf:"bytes,24,opt,name=giFixDateTill,proto3" json:"giFixDateTill,omitempty"`
}

func (x *ResponsePaidStorageInner) Reset() {
	*x = ResponsePaidStorageInner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_analytics_v1_response_paid_storage_inner_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponsePaidStorageInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePaidStorageInner) ProtoMessage() {}

func (x *ResponsePaidStorageInner) ProtoReflect() protoreflect.Message {
	mi := &file_wb_analytics_v1_response_paid_storage_inner_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePaidStorageInner.ProtoReflect.Descriptor instead.
func (*ResponsePaidStorageInner) Descriptor() ([]byte, []int) {
	return file_wb_analytics_v1_response_paid_storage_inner_proto_rawDescGZIP(), []int{0}
}

func (x *ResponsePaidStorageInner) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *ResponsePaidStorageInner) GetLogWarehouseCoef() float32 {
	if x != nil {
		return x.LogWarehouseCoef
	}
	return 0
}

func (x *ResponsePaidStorageInner) GetOfficeId() int32 {
	if x != nil {
		return x.OfficeId
	}
	return 0
}

func (x *ResponsePaidStorageInner) GetWarehouse() string {
	if x != nil {
		return x.Warehouse
	}
	return ""
}

func (x *ResponsePaidStorageInner) GetWarehouseCoef() float32 {
	if x != nil {
		return x.WarehouseCoef
	}
	return 0
}

func (x *ResponsePaidStorageInner) GetGiId() int32 {
	if x != nil {
		return x.GiId
	}
	return 0
}

func (x *ResponsePaidStorageInner) GetChrtId() int32 {
	if x != nil {
		return x.ChrtId
	}
	return 0
}

func (x *ResponsePaidStorageInner) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *ResponsePaidStorageInner) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *ResponsePaidStorageInner) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *ResponsePaidStorageInner) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *ResponsePaidStorageInner) GetVendorCode() string {
	if x != nil {
		return x.VendorCode
	}
	return ""
}

func (x *ResponsePaidStorageInner) GetNmId() int32 {
	if x != nil {
		return x.NmId
	}
	return 0
}

func (x *ResponsePaidStorageInner) GetVolume() float32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *ResponsePaidStorageInner) GetCalcType() string {
	if x != nil {
		return x.CalcType
	}
	return ""
}

func (x *ResponsePaidStorageInner) GetWarehousePrice() float32 {
	if x != nil {
		return x.WarehousePrice
	}
	return 0
}

func (x *ResponsePaidStorageInner) GetBarcodesCount() int32 {
	if x != nil {
		return x.BarcodesCount
	}
	return 0
}

func (x *ResponsePaidStorageInner) GetPalletPlaceCode() int32 {
	if x != nil {
		return x.PalletPlaceCode
	}
	return 0
}

func (x *ResponsePaidStorageInner) GetPalletCount() float32 {
	if x != nil {
		return x.PalletCount
	}
	return 0
}

func (x *ResponsePaidStorageInner) GetOriginalDate() string {
	if x != nil {
		return x.OriginalDate
	}
	return ""
}

func (x *ResponsePaidStorageInner) GetLoyaltyDiscount() float32 {
	if x != nil {
		return x.LoyaltyDiscount
	}
	return 0
}

func (x *ResponsePaidStorageInner) GetGiDate() string {
	if x != nil {
		return x.GiDate
	}
	return ""
}

func (x *ResponsePaidStorageInner) GetGiFixDateFrom() string {
	if x != nil {
		return x.GiFixDateFrom
	}
	return ""
}

func (x *ResponsePaidStorageInner) GetGiFixDateTill() string {
	if x != nil {
		return x.GiFixDateTill
	}
	return ""
}

var File_wb_analytics_v1_response_paid_storage_inner_proto protoreflect.FileDescriptor

var file_wb_analytics_v1_response_paid_storage_inner_proto_rawDesc = []byte{
	0x0a, 0x31, 0x77, 0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x22, 0xf8, 0x05, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x61, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x6e, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x57, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x10, 0x6c, 0x6f, 0x67, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x65,
	0x66, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x65,
	0x66, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x69, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x67, 0x69, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x72, 0x74, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x72, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x6d, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x6d, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x70, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6c, 0x6f, 0x79, 0x61,
	0x6c, 0x74, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67,
	0x69, 0x44, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x69, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x69, 0x46, 0x69, 0x78, 0x44, 0x61, 0x74, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x69, 0x46, 0x69,
	0x78, 0x44, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x67, 0x69, 0x46,
	0x69, 0x78, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6c, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x67, 0x69, 0x46, 0x69, 0x78, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6c, 0x6c, 0x42,
	0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x41, 0x49, 0x4f, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x62, 0x2f, 0x77,
	0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x77,
	0x62, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_wb_analytics_v1_response_paid_storage_inner_proto_rawDescOnce sync.Once
	file_wb_analytics_v1_response_paid_storage_inner_proto_rawDescData = file_wb_analytics_v1_response_paid_storage_inner_proto_rawDesc
)

func file_wb_analytics_v1_response_paid_storage_inner_proto_rawDescGZIP() []byte {
	file_wb_analytics_v1_response_paid_storage_inner_proto_rawDescOnce.Do(func() {
		file_wb_analytics_v1_response_paid_storage_inner_proto_rawDescData = protoimpl.X.CompressGZIP(file_wb_analytics_v1_response_paid_storage_inner_proto_rawDescData)
	})
	return file_wb_analytics_v1_response_paid_storage_inner_proto_rawDescData
}

var file_wb_analytics_v1_response_paid_storage_inner_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wb_analytics_v1_response_paid_storage_inner_proto_goTypes = []interface{}{
	(*ResponsePaidStorageInner)(nil), // 0: wb.analytics.v1.ResponsePaidStorageInner
}
var file_wb_analytics_v1_response_paid_storage_inner_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_wb_analytics_v1_response_paid_storage_inner_proto_init() }
func file_wb_analytics_v1_response_paid_storage_inner_proto_init() {
	if File_wb_analytics_v1_response_paid_storage_inner_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wb_analytics_v1_response_paid_storage_inner_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponsePaidStorageInner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wb_analytics_v1_response_paid_storage_inner_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wb_analytics_v1_response_paid_storage_inner_proto_goTypes,
		DependencyIndexes: file_wb_analytics_v1_response_paid_storage_inner_proto_depIdxs,
		MessageInfos:      file_wb_analytics_v1_response_paid_storage_inner_proto_msgTypes,
	}.Build()
	File_wb_analytics_v1_response_paid_storage_inner_proto = out.File
	file_wb_analytics_v1_response_paid_storage_inner_proto_rawDesc = nil
	file_wb_analytics_v1_response_paid_storage_inner_proto_goTypes = nil
	file_wb_analytics_v1_response_paid_storage_inner_proto_depIdxs = nil
}
