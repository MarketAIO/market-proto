//
//Описание API Аналитика
//
//Сервис предоставляет публичный API для получения аналитических данных. С помощью этих методов вы можете получать аналитические отчёты. [Часть методов](./#tag/Voronka-prodazh-(Dzhem)/) доступна только с [подпиской на расширенную аналитику Джем](https://seller.wildberries.ru/dynamic-product-categories/jam).
//
//The version of the OpenAPI document:
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: wb/analytics/v1/service.proto

package wbAnalytics

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApiV1AnalyticsAcceptanceReportGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Начало отчётного периода, `ГГГГ-ММ-ДД`
	DateFrom string `protobuf:"bytes,1,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
	// Конец отчётного периода, `ГГГГ-ММ-ДД`
	DateTo string `protobuf:"bytes,2,opt,name=dateTo,proto3" json:"dateTo,omitempty"`
}

func (x *ApiV1AnalyticsAcceptanceReportGetRequest) Reset() {
	*x = ApiV1AnalyticsAcceptanceReportGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_analytics_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1AnalyticsAcceptanceReportGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1AnalyticsAcceptanceReportGetRequest) ProtoMessage() {}

func (x *ApiV1AnalyticsAcceptanceReportGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_analytics_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1AnalyticsAcceptanceReportGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1AnalyticsAcceptanceReportGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_analytics_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *ApiV1AnalyticsAcceptanceReportGetRequest) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *ApiV1AnalyticsAcceptanceReportGetRequest) GetDateTo() string {
	if x != nil {
		return x.DateTo
	}
	return ""
}

type ApiV1AnalyticsAntifraudDetailsGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Дата, которая входит в отчётный период, `ГГГГ-ММ-ДД`.  <br/>          Чтобы получить данные за всё время с августа 2023,  не указывайте этот параметр
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *ApiV1AnalyticsAntifraudDetailsGetRequest) Reset() {
	*x = ApiV1AnalyticsAntifraudDetailsGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_analytics_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1AnalyticsAntifraudDetailsGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1AnalyticsAntifraudDetailsGetRequest) ProtoMessage() {}

func (x *ApiV1AnalyticsAntifraudDetailsGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_analytics_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1AnalyticsAntifraudDetailsGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1AnalyticsAntifraudDetailsGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_analytics_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *ApiV1AnalyticsAntifraudDetailsGetRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type ApiV1AnalyticsExciseReportPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Начало отчётного периода в формате RFC3339. Можно передать дату  или дату со временем. Примеры:    * `2023-12-01`   * `2023-12-01T23:59:59`   * `2023-12-01T00:00:00.12345`   * `2023-12-01T00:00:00`
	DateFrom string `protobuf:"bytes,1,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
	// Конец отчётного периода в формате RFC3339. Можно передать дату  или дату со временем. Примеры:    * `2023-12-01`   * `2023-12-01T23:59:59`   * `2023-12-01T00:00:00.12345`   * `2023-12-01T00:00:00`
	DateTo          string           `protobuf:"bytes,2,opt,name=dateTo,proto3" json:"dateTo,omitempty"`
	ExciseReportReq *ExciseReportReq `protobuf:"bytes,3,opt,name=exciseReportReq,proto3" json:"exciseReportReq,omitempty"`
}

func (x *ApiV1AnalyticsExciseReportPostRequest) Reset() {
	*x = ApiV1AnalyticsExciseReportPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_analytics_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1AnalyticsExciseReportPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1AnalyticsExciseReportPostRequest) ProtoMessage() {}

func (x *ApiV1AnalyticsExciseReportPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_analytics_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1AnalyticsExciseReportPostRequest.ProtoReflect.Descriptor instead.
func (*ApiV1AnalyticsExciseReportPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_analytics_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *ApiV1AnalyticsExciseReportPostRequest) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *ApiV1AnalyticsExciseReportPostRequest) GetDateTo() string {
	if x != nil {
		return x.DateTo
	}
	return ""
}

func (x *ApiV1AnalyticsExciseReportPostRequest) GetExciseReportReq() *ExciseReportReq {
	if x != nil {
		return x.ExciseReportReq
	}
	return nil
}

type ApiV1AnalyticsGoodsLabelingGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Начало отчётного периода, `ГГГГ-ММ-ДД`
	DateFrom string `protobuf:"bytes,1,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
	// Конец отчётного периода, `ГГГГ-ММ-ДД`
	DateTo string `protobuf:"bytes,2,opt,name=dateTo,proto3" json:"dateTo,omitempty"`
}

func (x *ApiV1AnalyticsGoodsLabelingGetRequest) Reset() {
	*x = ApiV1AnalyticsGoodsLabelingGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_analytics_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1AnalyticsGoodsLabelingGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1AnalyticsGoodsLabelingGetRequest) ProtoMessage() {}

func (x *ApiV1AnalyticsGoodsLabelingGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_analytics_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1AnalyticsGoodsLabelingGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1AnalyticsGoodsLabelingGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_analytics_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *ApiV1AnalyticsGoodsLabelingGetRequest) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *ApiV1AnalyticsGoodsLabelingGetRequest) GetDateTo() string {
	if x != nil {
		return x.DateTo
	}
	return ""
}

type ApiV1AnalyticsIncorrectAttachmentsGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Начало отчётного периода, `ГГГГ-ММ-ДД`
	DateFrom string `protobuf:"bytes,1,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
	// Конец отчётного периода, `ГГГГ-ММ-ДД`
	DateTo string `protobuf:"bytes,2,opt,name=dateTo,proto3" json:"dateTo,omitempty"`
}

func (x *ApiV1AnalyticsIncorrectAttachmentsGetRequest) Reset() {
	*x = ApiV1AnalyticsIncorrectAttachmentsGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_analytics_v1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1AnalyticsIncorrectAttachmentsGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1AnalyticsIncorrectAttachmentsGetRequest) ProtoMessage() {}

func (x *ApiV1AnalyticsIncorrectAttachmentsGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_analytics_v1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1AnalyticsIncorrectAttachmentsGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1AnalyticsIncorrectAttachmentsGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_analytics_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *ApiV1AnalyticsIncorrectAttachmentsGetRequest) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *ApiV1AnalyticsIncorrectAttachmentsGetRequest) GetDateTo() string {
	if x != nil {
		return x.DateTo
	}
	return ""
}

type ApiV1AnalyticsStorageCoefficientGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Дата, которая входит в отчётный период, `ГГГГ-ММ-ДД`
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *ApiV1AnalyticsStorageCoefficientGetRequest) Reset() {
	*x = ApiV1AnalyticsStorageCoefficientGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_analytics_v1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1AnalyticsStorageCoefficientGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1AnalyticsStorageCoefficientGetRequest) ProtoMessage() {}

func (x *ApiV1AnalyticsStorageCoefficientGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_analytics_v1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1AnalyticsStorageCoefficientGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1AnalyticsStorageCoefficientGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_analytics_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *ApiV1AnalyticsStorageCoefficientGetRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type ApiV1PaidStorageGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Начало отчётного периода в формате RFC3339. Можно передать дату или дату со временем. Примеры:    * `2019-06-20`   * `2019-06-20T23:59:59`   * `2019-06-20T00:00:00.12345`   * `2017-03-25T00:00:00` </ul>
	DateFrom string `protobuf:"bytes,1,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
	// Конец отчётного периода в формате RFC3339. Можно передать дату или дату со временем. Примеры:    * `2019-06-20`   * `2019-06-20T23:59:59`   * `2019-06-20T00:00:00.12345`   * `2017-03-25T00:00:00`
	DateTo string `protobuf:"bytes,2,opt,name=dateTo,proto3" json:"dateTo,omitempty"`
}

func (x *ApiV1PaidStorageGetRequest) Reset() {
	*x = ApiV1PaidStorageGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_analytics_v1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1PaidStorageGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1PaidStorageGetRequest) ProtoMessage() {}

func (x *ApiV1PaidStorageGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_analytics_v1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1PaidStorageGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1PaidStorageGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_analytics_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *ApiV1PaidStorageGetRequest) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *ApiV1PaidStorageGetRequest) GetDateTo() string {
	if x != nil {
		return x.DateTo
	}
	return ""
}

type ApiV1PaidStorageTasksTaskIdDownloadGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID задания на генерацию
	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *ApiV1PaidStorageTasksTaskIdDownloadGetRequest) Reset() {
	*x = ApiV1PaidStorageTasksTaskIdDownloadGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_analytics_v1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1PaidStorageTasksTaskIdDownloadGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1PaidStorageTasksTaskIdDownloadGetRequest) ProtoMessage() {}

func (x *ApiV1PaidStorageTasksTaskIdDownloadGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_analytics_v1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1PaidStorageTasksTaskIdDownloadGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1PaidStorageTasksTaskIdDownloadGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_analytics_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *ApiV1PaidStorageTasksTaskIdDownloadGetRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type ApiV1PaidStorageTasksTaskIdDownloadGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*ResponsePaidStorageInner `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ApiV1PaidStorageTasksTaskIdDownloadGetResponse) Reset() {
	*x = ApiV1PaidStorageTasksTaskIdDownloadGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_analytics_v1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1PaidStorageTasksTaskIdDownloadGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1PaidStorageTasksTaskIdDownloadGetResponse) ProtoMessage() {}

func (x *ApiV1PaidStorageTasksTaskIdDownloadGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wb_analytics_v1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1PaidStorageTasksTaskIdDownloadGetResponse.ProtoReflect.Descriptor instead.
func (*ApiV1PaidStorageTasksTaskIdDownloadGetResponse) Descriptor() ([]byte, []int) {
	return file_wb_analytics_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *ApiV1PaidStorageTasksTaskIdDownloadGetResponse) GetData() []*ResponsePaidStorageInner {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiV1PaidStorageTasksTaskIdStatusGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID задания на генерацию
	TaskId string `protobuf:"bytes,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *ApiV1PaidStorageTasksTaskIdStatusGetRequest) Reset() {
	*x = ApiV1PaidStorageTasksTaskIdStatusGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_analytics_v1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV1PaidStorageTasksTaskIdStatusGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV1PaidStorageTasksTaskIdStatusGetRequest) ProtoMessage() {}

func (x *ApiV1PaidStorageTasksTaskIdStatusGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_analytics_v1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV1PaidStorageTasksTaskIdStatusGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV1PaidStorageTasksTaskIdStatusGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_analytics_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *ApiV1PaidStorageTasksTaskIdStatusGetRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type ApiV2NmReportDetailHistoryPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NmReportDetailHistoryReq *NmReportDetailHistoryReq `protobuf:"bytes,1,opt,name=nmReportDetailHistoryReq,proto3" json:"nmReportDetailHistoryReq,omitempty"`
}

func (x *ApiV2NmReportDetailHistoryPostRequest) Reset() {
	*x = ApiV2NmReportDetailHistoryPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_analytics_v1_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV2NmReportDetailHistoryPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV2NmReportDetailHistoryPostRequest) ProtoMessage() {}

func (x *ApiV2NmReportDetailHistoryPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_analytics_v1_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV2NmReportDetailHistoryPostRequest.ProtoReflect.Descriptor instead.
func (*ApiV2NmReportDetailHistoryPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_analytics_v1_service_proto_rawDescGZIP(), []int{10}
}

func (x *ApiV2NmReportDetailHistoryPostRequest) GetNmReportDetailHistoryReq() *NmReportDetailHistoryReq {
	if x != nil {
		return x.NmReportDetailHistoryReq
	}
	return nil
}

type ApiV2NmReportDetailPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NmReportDetailReq *NmReportDetailReq `protobuf:"bytes,1,opt,name=nmReportDetailReq,proto3" json:"nmReportDetailReq,omitempty"`
}

func (x *ApiV2NmReportDetailPostRequest) Reset() {
	*x = ApiV2NmReportDetailPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_analytics_v1_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV2NmReportDetailPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV2NmReportDetailPostRequest) ProtoMessage() {}

func (x *ApiV2NmReportDetailPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_analytics_v1_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV2NmReportDetailPostRequest.ProtoReflect.Descriptor instead.
func (*ApiV2NmReportDetailPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_analytics_v1_service_proto_rawDescGZIP(), []int{11}
}

func (x *ApiV2NmReportDetailPostRequest) GetNmReportDetailReq() *NmReportDetailReq {
	if x != nil {
		return x.NmReportDetailReq
	}
	return nil
}

type ApiV2NmReportDownloadsFileDownloadIdGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID отчёта
	DownloadId string `protobuf:"bytes,1,opt,name=downloadId,proto3" json:"downloadId,omitempty"`
}

func (x *ApiV2NmReportDownloadsFileDownloadIdGetRequest) Reset() {
	*x = ApiV2NmReportDownloadsFileDownloadIdGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_analytics_v1_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV2NmReportDownloadsFileDownloadIdGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV2NmReportDownloadsFileDownloadIdGetRequest) ProtoMessage() {}

func (x *ApiV2NmReportDownloadsFileDownloadIdGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_analytics_v1_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV2NmReportDownloadsFileDownloadIdGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV2NmReportDownloadsFileDownloadIdGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_analytics_v1_service_proto_rawDescGZIP(), []int{12}
}

func (x *ApiV2NmReportDownloadsFileDownloadIdGetRequest) GetDownloadId() string {
	if x != nil {
		return x.DownloadId
	}
	return ""
}

type ApiV2NmReportDownloadsFileDownloadIdGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ApiV2NmReportDownloadsFileDownloadIdGetResponse) Reset() {
	*x = ApiV2NmReportDownloadsFileDownloadIdGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_analytics_v1_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV2NmReportDownloadsFileDownloadIdGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV2NmReportDownloadsFileDownloadIdGetResponse) ProtoMessage() {}

func (x *ApiV2NmReportDownloadsFileDownloadIdGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wb_analytics_v1_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV2NmReportDownloadsFileDownloadIdGetResponse.ProtoReflect.Descriptor instead.
func (*ApiV2NmReportDownloadsFileDownloadIdGetResponse) Descriptor() ([]byte, []int) {
	return file_wb_analytics_v1_service_proto_rawDescGZIP(), []int{13}
}

func (x *ApiV2NmReportDownloadsFileDownloadIdGetResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type ApiV2NmReportDownloadsGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID отчёта
	FilterLeft_Square_BracketdownloadIdsRight_Square_Bracket []string `protobuf:"bytes,1,rep,name=filterLeft_Square_BracketdownloadIdsRight_Square_Bracket,json=filterLeftSquareBracketdownloadIdsRightSquareBracket,proto3" json:"filterLeft_Square_BracketdownloadIdsRight_Square_Bracket,omitempty"`
}

func (x *ApiV2NmReportDownloadsGetRequest) Reset() {
	*x = ApiV2NmReportDownloadsGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_analytics_v1_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV2NmReportDownloadsGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV2NmReportDownloadsGetRequest) ProtoMessage() {}

func (x *ApiV2NmReportDownloadsGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_analytics_v1_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV2NmReportDownloadsGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV2NmReportDownloadsGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_analytics_v1_service_proto_rawDescGZIP(), []int{14}
}

func (x *ApiV2NmReportDownloadsGetRequest) GetFilterLeft_Square_BracketdownloadIdsRight_Square_Bracket() []string {
	if x != nil {
		return x.FilterLeft_Square_BracketdownloadIdsRight_Square_Bracket
	}
	return nil
}

type ApiV2NmReportDownloadsPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiV2NmReportDownloadsPostReq *ApiV2NmReportDownloadsPostReq `protobuf:"bytes,1,opt,name=apiV2NmReportDownloadsPostReq,proto3" json:"apiV2NmReportDownloadsPostReq,omitempty"`
}

func (x *ApiV2NmReportDownloadsPostRequest) Reset() {
	*x = ApiV2NmReportDownloadsPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_analytics_v1_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV2NmReportDownloadsPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV2NmReportDownloadsPostRequest) ProtoMessage() {}

func (x *ApiV2NmReportDownloadsPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_analytics_v1_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV2NmReportDownloadsPostRequest.ProtoReflect.Descriptor instead.
func (*ApiV2NmReportDownloadsPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_analytics_v1_service_proto_rawDescGZIP(), []int{15}
}

func (x *ApiV2NmReportDownloadsPostRequest) GetApiV2NmReportDownloadsPostReq() *ApiV2NmReportDownloadsPostReq {
	if x != nil {
		return x.ApiV2NmReportDownloadsPostReq
	}
	return nil
}

type ApiV2NmReportDownloadsRetryPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NmReportRetryReportReq *NmReportRetryReportReq `protobuf:"bytes,1,opt,name=nmReportRetryReportReq,proto3" json:"nmReportRetryReportReq,omitempty"`
}

func (x *ApiV2NmReportDownloadsRetryPostRequest) Reset() {
	*x = ApiV2NmReportDownloadsRetryPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_analytics_v1_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV2NmReportDownloadsRetryPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV2NmReportDownloadsRetryPostRequest) ProtoMessage() {}

func (x *ApiV2NmReportDownloadsRetryPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_analytics_v1_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV2NmReportDownloadsRetryPostRequest.ProtoReflect.Descriptor instead.
func (*ApiV2NmReportDownloadsRetryPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_analytics_v1_service_proto_rawDescGZIP(), []int{16}
}

func (x *ApiV2NmReportDownloadsRetryPostRequest) GetNmReportRetryReportReq() *NmReportRetryReportReq {
	if x != nil {
		return x.NmReportRetryReportReq
	}
	return nil
}

type ApiV2NmReportGroupedHistoryPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NmReportGroupedHistoryReq *NmReportGroupedHistoryReq `protobuf:"bytes,1,opt,name=nmReportGroupedHistoryReq,proto3" json:"nmReportGroupedHistoryReq,omitempty"`
}

func (x *ApiV2NmReportGroupedHistoryPostRequest) Reset() {
	*x = ApiV2NmReportGroupedHistoryPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_analytics_v1_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV2NmReportGroupedHistoryPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV2NmReportGroupedHistoryPostRequest) ProtoMessage() {}

func (x *ApiV2NmReportGroupedHistoryPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_analytics_v1_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV2NmReportGroupedHistoryPostRequest.ProtoReflect.Descriptor instead.
func (*ApiV2NmReportGroupedHistoryPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_analytics_v1_service_proto_rawDescGZIP(), []int{17}
}

func (x *ApiV2NmReportGroupedHistoryPostRequest) GetNmReportGroupedHistoryReq() *NmReportGroupedHistoryReq {
	if x != nil {
		return x.NmReportGroupedHistoryReq
	}
	return nil
}

type ApiV2NmReportGroupedPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NmReportGroupedReq *NmReportGroupedReq `protobuf:"bytes,1,opt,name=nmReportGroupedReq,proto3" json:"nmReportGroupedReq,omitempty"`
}

func (x *ApiV2NmReportGroupedPostRequest) Reset() {
	*x = ApiV2NmReportGroupedPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_analytics_v1_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV2NmReportGroupedPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV2NmReportGroupedPostRequest) ProtoMessage() {}

func (x *ApiV2NmReportGroupedPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_analytics_v1_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV2NmReportGroupedPostRequest.ProtoReflect.Descriptor instead.
func (*ApiV2NmReportGroupedPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_analytics_v1_service_proto_rawDescGZIP(), []int{18}
}

func (x *ApiV2NmReportGroupedPostRequest) GetNmReportGroupedReq() *NmReportGroupedReq {
	if x != nil {
		return x.NmReportGroupedReq
	}
	return nil
}

var File_wb_analytics_v1_service_proto protoreflect.FileDescriptor

var file_wb_analytics_v1_service_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x77, 0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x48, 0x77,
	0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x48, 0x77, 0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x34,
	0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x48, 0x77, 0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x72, 0x61, 0x75, 0x64, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x45, 0x77, 0x62, 0x2f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69,
	0x5f, 0x76, 0x31, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x65, 0x74,
	0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x4c, 0x77, 0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30,
	0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x4a, 0x77, 0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x31, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x65, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x51, 0x77, 0x62,
	0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70,
	0x69, 0x5f, 0x76, 0x32, 0x5f, 0x6e, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x67, 0x65, 0x74, 0x34, 0x32, 0x39,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x3d, 0x77, 0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x32, 0x5f, 0x6e, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a,
	0x77, 0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x77, 0x62, 0x2f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x77, 0x62, 0x2f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2b, 0x77, 0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x78, 0x63, 0x69, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x77, 0x62,
	0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78,
	0x63, 0x69, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x77, 0x62, 0x2f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x77, 0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x77, 0x62,
	0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6d,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x77, 0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x77,
	0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x77,
	0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34,
	0x77, 0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x6e, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x77, 0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x77,
	0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x77, 0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x77, 0x62, 0x2f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6d, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x77, 0x62, 0x2f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6d, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x35, 0x77, 0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x6e, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x77, 0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x34, 0x30, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x77, 0x62, 0x2f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x34, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x77,
	0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x77, 0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x61,
	0x69, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5e, 0x0a, 0x28, 0x41, 0x70, 0x69, 0x56, 0x31, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x22, 0x3e, 0x0a, 0x28, 0x41, 0x70, 0x69, 0x56, 0x31, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x6e, 0x74, 0x69, 0x66, 0x72, 0x61, 0x75,
	0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x25, 0x41, 0x70, 0x69, 0x56, 0x31,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x78, 0x63, 0x69, 0x73, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x12, 0x4a, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x69, 0x73, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x63, 0x69, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x52,
	0x0f, 0x65, 0x78, 0x63, 0x69, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x22, 0x5b, 0x0a, 0x25, 0x41, 0x70, 0x69, 0x56, 0x31, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x22, 0x62, 0x0a,
	0x2c, 0x41, 0x70, 0x69, 0x56, 0x31, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x49,
	0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x22, 0x40, 0x0a, 0x2a, 0x41, 0x70, 0x69, 0x56, 0x31, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x22, 0x50, 0x0a, 0x1a, 0x41, 0x70, 0x69, 0x56, 0x31, 0x50, 0x61, 0x69, 0x64,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x22, 0x47, 0x0a, 0x2d, 0x41, 0x70, 0x69, 0x56, 0x31, 0x50, 0x61,
	0x69, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x6f,
	0x0a, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x50, 0x61, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x69, 0x64, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x45, 0x0a, 0x2b, 0x41, 0x70, 0x69, 0x56, 0x31, 0x50, 0x61, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x25, 0x41, 0x70, 0x69, 0x56, 0x32,
	0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x65, 0x0a, 0x18, 0x6e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x52, 0x18, 0x6e,
	0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x22, 0x72, 0x0a, 0x1e, 0x41, 0x70, 0x69, 0x56, 0x32,
	0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x6e, 0x6d, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x52, 0x11, 0x6e, 0x6d, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x22, 0x50, 0x0a, 0x2e, 0x41,
	0x70, 0x69, 0x56, 0x32, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x22, 0x45, 0x0a,
	0x2f, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x9a, 0x01, 0x0a, 0x20, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4e, 0x6d,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x76, 0x0a, 0x38, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x5f, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x5f, 0x42,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64,
	0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x5f, 0x42, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x34, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x42, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x73, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x22, 0x99, 0x01, 0x0a, 0x21, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4e, 0x6d, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x50, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x74, 0x0a, 0x1d, 0x61, 0x70, 0x69, 0x56, 0x32,
	0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x1d,
	0x61, 0x70, 0x69, 0x56, 0x32, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x89, 0x01,
	0x0a, 0x26, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x16, 0x6e, 0x6d, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6d, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x52, 0x16, 0x6e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x22, 0x92, 0x01, 0x0a, 0x26, 0x41, 0x70,
	0x69, 0x56, 0x32, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x19, 0x6e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x52, 0x19, 0x6e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x22, 0x76,
	0x0a, 0x1f, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x53, 0x0a, 0x12, 0x6e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x65, 0x64, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x52, 0x12, 0x6e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x65, 0x64, 0x52, 0x65, 0x71, 0x32, 0x99, 0x13, 0x0a, 0x10, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x21,
	0x41, 0x70, 0x69, 0x56, 0x31, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65,
	0x74, 0x12, 0x39, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x77,
	0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x69, 0x56, 0x31, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65, 0x74,
	0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9d, 0x01, 0x0a, 0x21,
	0x41, 0x70, 0x69, 0x56, 0x31, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x6e,
	0x74, 0x69, 0x66, 0x72, 0x61, 0x75, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x47, 0x65,
	0x74, 0x12, 0x39, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x41, 0x6e, 0x74, 0x69, 0x66, 0x72, 0x61, 0x75, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x77,
	0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x69, 0x56, 0x31, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x6e, 0x74,
	0x69, 0x66, 0x72, 0x61, 0x75, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x47, 0x65, 0x74,
	0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x1e, 0x41,
	0x70, 0x69, 0x56, 0x31, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x78, 0x63,
	0x69, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x36, 0x2e,
	0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x69, 0x56, 0x31, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x78,
	0x63, 0x69, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x69, 0x73, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x94, 0x01, 0x0a,
	0x1e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x12,
	0x36, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x25, 0x41, 0x70, 0x69, 0x56, 0x31, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x47, 0x65, 0x74, 0x12, 0x3d, 0x2e,
	0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x69, 0x56, 0x31, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x77,
	0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x69, 0x56, 0x31, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0xa3, 0x01, 0x0a, 0x23, 0x41, 0x70, 0x69, 0x56, 0x31, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x12, 0x3b, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x13, 0x41, 0x70, 0x69, 0x56, 0x31, 0x50, 0x61,
	0x69, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x77,
	0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x69, 0x56, 0x31, 0x50, 0x61, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x77, 0x62, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa9,
	0x01, 0x0a, 0x26, 0x41, 0x70, 0x69, 0x56, 0x31, 0x50, 0x61, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x65, 0x74, 0x12, 0x3e, 0x2e, 0x77, 0x62, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56,
	0x31, 0x50, 0x61, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x77, 0x62, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56,
	0x31, 0x50, 0x61, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x24, 0x41,
	0x70, 0x69, 0x56, 0x31, 0x50, 0x61, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x47, 0x65, 0x74, 0x12, 0x3c, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x31, 0x50, 0x61, 0x69, 0x64, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x1e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4e, 0x6d,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x36, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4e,
	0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x73, 0x0a, 0x17, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x77, 0x62, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69,
	0x56, 0x32, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x77, 0x62,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6d,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x27, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4e, 0x6d,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x46,
	0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x47, 0x65, 0x74,
	0x12, 0x3f, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x40, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x19, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4e, 0x6d, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x47, 0x65, 0x74,
	0x12, 0x31, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7f, 0x0a, 0x1a, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x32,
	0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x88, 0x01, 0x0a, 0x1f, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4e, 0x6d, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x37, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4e, 0x6d, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a,
	0x1f, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x73, 0x74,
	0x12, 0x37, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x77, 0x62, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6d, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x18, 0x41, 0x70,
	0x69, 0x56, 0x32, 0x4e, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x30, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4e, 0x6d,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x77, 0x62, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6d, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x49, 0x4f, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x77,
	0x62, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x77,
	0x62, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_wb_analytics_v1_service_proto_rawDescOnce sync.Once
	file_wb_analytics_v1_service_proto_rawDescData = file_wb_analytics_v1_service_proto_rawDesc
)

func file_wb_analytics_v1_service_proto_rawDescGZIP() []byte {
	file_wb_analytics_v1_service_proto_rawDescOnce.Do(func() {
		file_wb_analytics_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_wb_analytics_v1_service_proto_rawDescData)
	})
	return file_wb_analytics_v1_service_proto_rawDescData
}

var file_wb_analytics_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_wb_analytics_v1_service_proto_goTypes = []interface{}{
	(*ApiV1AnalyticsAcceptanceReportGetRequest)(nil),         // 0: wb.analytics.v1.ApiV1AnalyticsAcceptanceReportGetRequest
	(*ApiV1AnalyticsAntifraudDetailsGetRequest)(nil),         // 1: wb.analytics.v1.ApiV1AnalyticsAntifraudDetailsGetRequest
	(*ApiV1AnalyticsExciseReportPostRequest)(nil),            // 2: wb.analytics.v1.ApiV1AnalyticsExciseReportPostRequest
	(*ApiV1AnalyticsGoodsLabelingGetRequest)(nil),            // 3: wb.analytics.v1.ApiV1AnalyticsGoodsLabelingGetRequest
	(*ApiV1AnalyticsIncorrectAttachmentsGetRequest)(nil),     // 4: wb.analytics.v1.ApiV1AnalyticsIncorrectAttachmentsGetRequest
	(*ApiV1AnalyticsStorageCoefficientGetRequest)(nil),       // 5: wb.analytics.v1.ApiV1AnalyticsStorageCoefficientGetRequest
	(*ApiV1PaidStorageGetRequest)(nil),                       // 6: wb.analytics.v1.ApiV1PaidStorageGetRequest
	(*ApiV1PaidStorageTasksTaskIdDownloadGetRequest)(nil),    // 7: wb.analytics.v1.ApiV1PaidStorageTasksTaskIdDownloadGetRequest
	(*ApiV1PaidStorageTasksTaskIdDownloadGetResponse)(nil),   // 8: wb.analytics.v1.ApiV1PaidStorageTasksTaskIdDownloadGetResponse
	(*ApiV1PaidStorageTasksTaskIdStatusGetRequest)(nil),      // 9: wb.analytics.v1.ApiV1PaidStorageTasksTaskIdStatusGetRequest
	(*ApiV2NmReportDetailHistoryPostRequest)(nil),            // 10: wb.analytics.v1.ApiV2NmReportDetailHistoryPostRequest
	(*ApiV2NmReportDetailPostRequest)(nil),                   // 11: wb.analytics.v1.ApiV2NmReportDetailPostRequest
	(*ApiV2NmReportDownloadsFileDownloadIdGetRequest)(nil),   // 12: wb.analytics.v1.ApiV2NmReportDownloadsFileDownloadIdGetRequest
	(*ApiV2NmReportDownloadsFileDownloadIdGetResponse)(nil),  // 13: wb.analytics.v1.ApiV2NmReportDownloadsFileDownloadIdGetResponse
	(*ApiV2NmReportDownloadsGetRequest)(nil),                 // 14: wb.analytics.v1.ApiV2NmReportDownloadsGetRequest
	(*ApiV2NmReportDownloadsPostRequest)(nil),                // 15: wb.analytics.v1.ApiV2NmReportDownloadsPostRequest
	(*ApiV2NmReportDownloadsRetryPostRequest)(nil),           // 16: wb.analytics.v1.ApiV2NmReportDownloadsRetryPostRequest
	(*ApiV2NmReportGroupedHistoryPostRequest)(nil),           // 17: wb.analytics.v1.ApiV2NmReportGroupedHistoryPostRequest
	(*ApiV2NmReportGroupedPostRequest)(nil),                  // 18: wb.analytics.v1.ApiV2NmReportGroupedPostRequest
	(*ExciseReportReq)(nil),                                  // 19: wb.analytics.v1.ExciseReportReq
	(*ResponsePaidStorageInner)(nil),                         // 20: wb.analytics.v1.ResponsePaidStorageInner
	(*NmReportDetailHistoryReq)(nil),                         // 21: wb.analytics.v1.NmReportDetailHistoryReq
	(*NmReportDetailReq)(nil),                                // 22: wb.analytics.v1.NmReportDetailReq
	(*ApiV2NmReportDownloadsPostReq)(nil),                    // 23: wb.analytics.v1.ApiV2NmReportDownloadsPostReq
	(*NmReportRetryReportReq)(nil),                           // 24: wb.analytics.v1.NmReportRetryReportReq
	(*NmReportGroupedHistoryReq)(nil),                        // 25: wb.analytics.v1.NmReportGroupedHistoryReq
	(*NmReportGroupedReq)(nil),                               // 26: wb.analytics.v1.NmReportGroupedReq
	(*ApiV1AnalyticsAcceptanceReportGet200Response)(nil),     // 27: wb.analytics.v1.ApiV1AnalyticsAcceptanceReportGet200Response
	(*ApiV1AnalyticsAntifraudDetailsGet200Response)(nil),     // 28: wb.analytics.v1.ApiV1AnalyticsAntifraudDetailsGet200Response
	(*ExciseReportResponse)(nil),                             // 29: wb.analytics.v1.ExciseReportResponse
	(*ApiV1AnalyticsGoodsLabelingGet200Response)(nil),        // 30: wb.analytics.v1.ApiV1AnalyticsGoodsLabelingGet200Response
	(*ApiV1AnalyticsIncorrectAttachmentsGet200Response)(nil), // 31: wb.analytics.v1.ApiV1AnalyticsIncorrectAttachmentsGet200Response
	(*ApiV1AnalyticsStorageCoefficientGet200Response)(nil),   // 32: wb.analytics.v1.ApiV1AnalyticsStorageCoefficientGet200Response
	(*CreateTaskResponse)(nil),                               // 33: wb.analytics.v1.CreateTaskResponse
	(*GetTasksResponse)(nil),                                 // 34: wb.analytics.v1.GetTasksResponse
	(*NmReportDetailHistoryResponse)(nil),                    // 35: wb.analytics.v1.NmReportDetailHistoryResponse
	(*NmReportDetailResponse)(nil),                           // 36: wb.analytics.v1.NmReportDetailResponse
	(*NmReportGetReportsResponse)(nil),                       // 37: wb.analytics.v1.NmReportGetReportsResponse
	(*NmReportCreateReportResponse)(nil),                     // 38: wb.analytics.v1.NmReportCreateReportResponse
	(*NmReportRetryReportResponse)(nil),                      // 39: wb.analytics.v1.NmReportRetryReportResponse
	(*NmReportGroupedHistoryResponse)(nil),                   // 40: wb.analytics.v1.NmReportGroupedHistoryResponse
	(*NmReportGroupedResponse)(nil),                          // 41: wb.analytics.v1.NmReportGroupedResponse
}
var file_wb_analytics_v1_service_proto_depIdxs = []int32{
	19, // 0: wb.analytics.v1.ApiV1AnalyticsExciseReportPostRequest.exciseReportReq:type_name -> wb.analytics.v1.ExciseReportReq
	20, // 1: wb.analytics.v1.ApiV1PaidStorageTasksTaskIdDownloadGetResponse.data:type_name -> wb.analytics.v1.ResponsePaidStorageInner
	21, // 2: wb.analytics.v1.ApiV2NmReportDetailHistoryPostRequest.nmReportDetailHistoryReq:type_name -> wb.analytics.v1.NmReportDetailHistoryReq
	22, // 3: wb.analytics.v1.ApiV2NmReportDetailPostRequest.nmReportDetailReq:type_name -> wb.analytics.v1.NmReportDetailReq
	23, // 4: wb.analytics.v1.ApiV2NmReportDownloadsPostRequest.apiV2NmReportDownloadsPostReq:type_name -> wb.analytics.v1.ApiV2NmReportDownloadsPostReq
	24, // 5: wb.analytics.v1.ApiV2NmReportDownloadsRetryPostRequest.nmReportRetryReportReq:type_name -> wb.analytics.v1.NmReportRetryReportReq
	25, // 6: wb.analytics.v1.ApiV2NmReportGroupedHistoryPostRequest.nmReportGroupedHistoryReq:type_name -> wb.analytics.v1.NmReportGroupedHistoryReq
	26, // 7: wb.analytics.v1.ApiV2NmReportGroupedPostRequest.nmReportGroupedReq:type_name -> wb.analytics.v1.NmReportGroupedReq
	0,  // 8: wb.analytics.v1.AnalyticsService.ApiV1AnalyticsAcceptanceReportGet:input_type -> wb.analytics.v1.ApiV1AnalyticsAcceptanceReportGetRequest
	1,  // 9: wb.analytics.v1.AnalyticsService.ApiV1AnalyticsAntifraudDetailsGet:input_type -> wb.analytics.v1.ApiV1AnalyticsAntifraudDetailsGetRequest
	2,  // 10: wb.analytics.v1.AnalyticsService.ApiV1AnalyticsExciseReportPost:input_type -> wb.analytics.v1.ApiV1AnalyticsExciseReportPostRequest
	3,  // 11: wb.analytics.v1.AnalyticsService.ApiV1AnalyticsGoodsLabelingGet:input_type -> wb.analytics.v1.ApiV1AnalyticsGoodsLabelingGetRequest
	4,  // 12: wb.analytics.v1.AnalyticsService.ApiV1AnalyticsIncorrectAttachmentsGet:input_type -> wb.analytics.v1.ApiV1AnalyticsIncorrectAttachmentsGetRequest
	5,  // 13: wb.analytics.v1.AnalyticsService.ApiV1AnalyticsStorageCoefficientGet:input_type -> wb.analytics.v1.ApiV1AnalyticsStorageCoefficientGetRequest
	6,  // 14: wb.analytics.v1.AnalyticsService.ApiV1PaidStorageGet:input_type -> wb.analytics.v1.ApiV1PaidStorageGetRequest
	7,  // 15: wb.analytics.v1.AnalyticsService.ApiV1PaidStorageTasksTaskIdDownloadGet:input_type -> wb.analytics.v1.ApiV1PaidStorageTasksTaskIdDownloadGetRequest
	9,  // 16: wb.analytics.v1.AnalyticsService.ApiV1PaidStorageTasksTaskIdStatusGet:input_type -> wb.analytics.v1.ApiV1PaidStorageTasksTaskIdStatusGetRequest
	10, // 17: wb.analytics.v1.AnalyticsService.ApiV2NmReportDetailHistoryPost:input_type -> wb.analytics.v1.ApiV2NmReportDetailHistoryPostRequest
	11, // 18: wb.analytics.v1.AnalyticsService.ApiV2NmReportDetailPost:input_type -> wb.analytics.v1.ApiV2NmReportDetailPostRequest
	12, // 19: wb.analytics.v1.AnalyticsService.ApiV2NmReportDownloadsFileDownloadIdGet:input_type -> wb.analytics.v1.ApiV2NmReportDownloadsFileDownloadIdGetRequest
	14, // 20: wb.analytics.v1.AnalyticsService.ApiV2NmReportDownloadsGet:input_type -> wb.analytics.v1.ApiV2NmReportDownloadsGetRequest
	15, // 21: wb.analytics.v1.AnalyticsService.ApiV2NmReportDownloadsPost:input_type -> wb.analytics.v1.ApiV2NmReportDownloadsPostRequest
	16, // 22: wb.analytics.v1.AnalyticsService.ApiV2NmReportDownloadsRetryPost:input_type -> wb.analytics.v1.ApiV2NmReportDownloadsRetryPostRequest
	17, // 23: wb.analytics.v1.AnalyticsService.ApiV2NmReportGroupedHistoryPost:input_type -> wb.analytics.v1.ApiV2NmReportGroupedHistoryPostRequest
	18, // 24: wb.analytics.v1.AnalyticsService.ApiV2NmReportGroupedPost:input_type -> wb.analytics.v1.ApiV2NmReportGroupedPostRequest
	27, // 25: wb.analytics.v1.AnalyticsService.ApiV1AnalyticsAcceptanceReportGet:output_type -> wb.analytics.v1.ApiV1AnalyticsAcceptanceReportGet200Response
	28, // 26: wb.analytics.v1.AnalyticsService.ApiV1AnalyticsAntifraudDetailsGet:output_type -> wb.analytics.v1.ApiV1AnalyticsAntifraudDetailsGet200Response
	29, // 27: wb.analytics.v1.AnalyticsService.ApiV1AnalyticsExciseReportPost:output_type -> wb.analytics.v1.ExciseReportResponse
	30, // 28: wb.analytics.v1.AnalyticsService.ApiV1AnalyticsGoodsLabelingGet:output_type -> wb.analytics.v1.ApiV1AnalyticsGoodsLabelingGet200Response
	31, // 29: wb.analytics.v1.AnalyticsService.ApiV1AnalyticsIncorrectAttachmentsGet:output_type -> wb.analytics.v1.ApiV1AnalyticsIncorrectAttachmentsGet200Response
	32, // 30: wb.analytics.v1.AnalyticsService.ApiV1AnalyticsStorageCoefficientGet:output_type -> wb.analytics.v1.ApiV1AnalyticsStorageCoefficientGet200Response
	33, // 31: wb.analytics.v1.AnalyticsService.ApiV1PaidStorageGet:output_type -> wb.analytics.v1.CreateTaskResponse
	8,  // 32: wb.analytics.v1.AnalyticsService.ApiV1PaidStorageTasksTaskIdDownloadGet:output_type -> wb.analytics.v1.ApiV1PaidStorageTasksTaskIdDownloadGetResponse
	34, // 33: wb.analytics.v1.AnalyticsService.ApiV1PaidStorageTasksTaskIdStatusGet:output_type -> wb.analytics.v1.GetTasksResponse
	35, // 34: wb.analytics.v1.AnalyticsService.ApiV2NmReportDetailHistoryPost:output_type -> wb.analytics.v1.NmReportDetailHistoryResponse
	36, // 35: wb.analytics.v1.AnalyticsService.ApiV2NmReportDetailPost:output_type -> wb.analytics.v1.NmReportDetailResponse
	13, // 36: wb.analytics.v1.AnalyticsService.ApiV2NmReportDownloadsFileDownloadIdGet:output_type -> wb.analytics.v1.ApiV2NmReportDownloadsFileDownloadIdGetResponse
	37, // 37: wb.analytics.v1.AnalyticsService.ApiV2NmReportDownloadsGet:output_type -> wb.analytics.v1.NmReportGetReportsResponse
	38, // 38: wb.analytics.v1.AnalyticsService.ApiV2NmReportDownloadsPost:output_type -> wb.analytics.v1.NmReportCreateReportResponse
	39, // 39: wb.analytics.v1.AnalyticsService.ApiV2NmReportDownloadsRetryPost:output_type -> wb.analytics.v1.NmReportRetryReportResponse
	40, // 40: wb.analytics.v1.AnalyticsService.ApiV2NmReportGroupedHistoryPost:output_type -> wb.analytics.v1.NmReportGroupedHistoryResponse
	41, // 41: wb.analytics.v1.AnalyticsService.ApiV2NmReportGroupedPost:output_type -> wb.analytics.v1.NmReportGroupedResponse
	25, // [25:42] is the sub-list for method output_type
	8,  // [8:25] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_wb_analytics_v1_service_proto_init() }
func file_wb_analytics_v1_service_proto_init() {
	if File_wb_analytics_v1_service_proto != nil {
		return
	}
	file_wb_analytics_v1_api_v1_analytics_acceptance_report_get200_response_proto_init()
	file_wb_analytics_v1_api_v1_analytics_acceptance_report_get400_response_proto_init()
	file_wb_analytics_v1_api_v1_analytics_antifraud_details_get200_response_proto_init()
	file_wb_analytics_v1_api_v1_analytics_goods_labeling_get200_response_proto_init()
	file_wb_analytics_v1_api_v1_analytics_incorrect_attachments_get200_response_proto_init()
	file_wb_analytics_v1_api_v1_analytics_storage_coefficient_get200_response_proto_init()
	file_wb_analytics_v1_api_v2_nm_report_downloads_file_download_id_get429_response_proto_init()
	file_wb_analytics_v1_api_v2_nm_report_downloads_post_request_proto_init()
	file_wb_analytics_v1_create_task_response_proto_init()
	file_wb_analytics_v1_error_internal_response_proto_init()
	file_wb_analytics_v1_error_response_proto_init()
	file_wb_analytics_v1_excise_report_request_proto_init()
	file_wb_analytics_v1_excise_report_response_proto_init()
	file_wb_analytics_v1_get_tasks_response_proto_init()
	file_wb_analytics_v1_nm_report_create_report_response_proto_init()
	file_wb_analytics_v1_nm_report_detail_history_request_proto_init()
	file_wb_analytics_v1_nm_report_detail_history_response_proto_init()
	file_wb_analytics_v1_nm_report_detail_request_proto_init()
	file_wb_analytics_v1_nm_report_detail_response_proto_init()
	file_wb_analytics_v1_nm_report_get_reports_response_proto_init()
	file_wb_analytics_v1_nm_report_grouped_history_request_proto_init()
	file_wb_analytics_v1_nm_report_grouped_history_response_proto_init()
	file_wb_analytics_v1_nm_report_grouped_request_proto_init()
	file_wb_analytics_v1_nm_report_grouped_response_proto_init()
	file_wb_analytics_v1_nm_report_retry_report_request_proto_init()
	file_wb_analytics_v1_nm_report_retry_report_response_proto_init()
	file_wb_analytics_v1_response401_proto_init()
	file_wb_analytics_v1_response429_proto_init()
	file_wb_analytics_v1_response_error_proto_init()
	file_wb_analytics_v1_response_paid_storage_inner_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_wb_analytics_v1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1AnalyticsAcceptanceReportGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_analytics_v1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1AnalyticsAntifraudDetailsGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_analytics_v1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1AnalyticsExciseReportPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_analytics_v1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1AnalyticsGoodsLabelingGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_analytics_v1_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1AnalyticsIncorrectAttachmentsGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_analytics_v1_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1AnalyticsStorageCoefficientGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_analytics_v1_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1PaidStorageGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_analytics_v1_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1PaidStorageTasksTaskIdDownloadGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_analytics_v1_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1PaidStorageTasksTaskIdDownloadGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_analytics_v1_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV1PaidStorageTasksTaskIdStatusGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_analytics_v1_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV2NmReportDetailHistoryPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_analytics_v1_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV2NmReportDetailPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_analytics_v1_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV2NmReportDownloadsFileDownloadIdGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_analytics_v1_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV2NmReportDownloadsFileDownloadIdGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_analytics_v1_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV2NmReportDownloadsGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_analytics_v1_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV2NmReportDownloadsPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_analytics_v1_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV2NmReportDownloadsRetryPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_analytics_v1_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV2NmReportGroupedHistoryPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_analytics_v1_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV2NmReportGroupedPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wb_analytics_v1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wb_analytics_v1_service_proto_goTypes,
		DependencyIndexes: file_wb_analytics_v1_service_proto_depIdxs,
		MessageInfos:      file_wb_analytics_v1_service_proto_msgTypes,
	}.Build()
	File_wb_analytics_v1_service_proto = out.File
	file_wb_analytics_v1_service_proto_rawDesc = nil
	file_wb_analytics_v1_service_proto_goTypes = nil
	file_wb_analytics_v1_service_proto_depIdxs = nil
}
