//
//API цен и скидок
//
//С помощью этих методов можно устанавливать цены и скидки. Максимум — 10 запросов за 6 секунд суммарно для всех методов.
//
//The version of the OpenAPI document:
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: wb/prices/v1/_service.proto

package wbPRICES

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApiV2BufferGoodsTaskGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Сколько элементов вывести на одной странице (пагинация). Максимум 1 000 элементов
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// ID загрузки
	UploadID int32 `protobuf:"varint,2,opt,name=uploadID,proto3" json:"uploadID,omitempty"`
	// Сколько элементов пропустить
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ApiV2BufferGoodsTaskGetRequest) Reset() {
	*x = ApiV2BufferGoodsTaskGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_prices_v1__service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV2BufferGoodsTaskGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV2BufferGoodsTaskGetRequest) ProtoMessage() {}

func (x *ApiV2BufferGoodsTaskGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_prices_v1__service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV2BufferGoodsTaskGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV2BufferGoodsTaskGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_prices_v1__service_proto_rawDescGZIP(), []int{0}
}

func (x *ApiV2BufferGoodsTaskGetRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ApiV2BufferGoodsTaskGetRequest) GetUploadID() int32 {
	if x != nil {
		return x.UploadID
	}
	return 0
}

func (x *ApiV2BufferGoodsTaskGetRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ApiV2BufferTasksGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID загрузки
	UploadID int32 `protobuf:"varint,1,opt,name=uploadID,proto3" json:"uploadID,omitempty"`
}

func (x *ApiV2BufferTasksGetRequest) Reset() {
	*x = ApiV2BufferTasksGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_prices_v1__service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV2BufferTasksGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV2BufferTasksGetRequest) ProtoMessage() {}

func (x *ApiV2BufferTasksGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_prices_v1__service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV2BufferTasksGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV2BufferTasksGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_prices_v1__service_proto_rawDescGZIP(), []int{1}
}

func (x *ApiV2BufferTasksGetRequest) GetUploadID() int32 {
	if x != nil {
		return x.UploadID
	}
	return 0
}

type ApiV2HistoryGoodsTaskGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Сколько элементов вывести на одной странице (пагинация). Максимум 1 000 элементов
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// ID загрузки
	UploadID int32 `protobuf:"varint,2,opt,name=uploadID,proto3" json:"uploadID,omitempty"`
	// Сколько элементов пропустить
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ApiV2HistoryGoodsTaskGetRequest) Reset() {
	*x = ApiV2HistoryGoodsTaskGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_prices_v1__service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV2HistoryGoodsTaskGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV2HistoryGoodsTaskGetRequest) ProtoMessage() {}

func (x *ApiV2HistoryGoodsTaskGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_prices_v1__service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV2HistoryGoodsTaskGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV2HistoryGoodsTaskGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_prices_v1__service_proto_rawDescGZIP(), []int{2}
}

func (x *ApiV2HistoryGoodsTaskGetRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ApiV2HistoryGoodsTaskGetRequest) GetUploadID() int32 {
	if x != nil {
		return x.UploadID
	}
	return 0
}

func (x *ApiV2HistoryGoodsTaskGetRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ApiV2HistoryTasksGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID загрузки
	UploadID int32 `protobuf:"varint,1,opt,name=uploadID,proto3" json:"uploadID,omitempty"`
}

func (x *ApiV2HistoryTasksGetRequest) Reset() {
	*x = ApiV2HistoryTasksGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_prices_v1__service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV2HistoryTasksGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV2HistoryTasksGetRequest) ProtoMessage() {}

func (x *ApiV2HistoryTasksGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_prices_v1__service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV2HistoryTasksGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV2HistoryTasksGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_prices_v1__service_proto_rawDescGZIP(), []int{3}
}

func (x *ApiV2HistoryTasksGetRequest) GetUploadID() int32 {
	if x != nil {
		return x.UploadID
	}
	return 0
}

type ApiV2ListGoodsFilterGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Сколько элементов вывести на одной странице (пагинация). Максимум 1 000 элементов
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Сколько элементов пропустить
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Артикул Wildberries, по которому искать товар
	FilterNmID int32 `protobuf:"varint,3,opt,name=filterNmID,proto3" json:"filterNmID,omitempty"`
}

func (x *ApiV2ListGoodsFilterGetRequest) Reset() {
	*x = ApiV2ListGoodsFilterGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_prices_v1__service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV2ListGoodsFilterGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV2ListGoodsFilterGetRequest) ProtoMessage() {}

func (x *ApiV2ListGoodsFilterGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_prices_v1__service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV2ListGoodsFilterGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV2ListGoodsFilterGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_prices_v1__service_proto_rawDescGZIP(), []int{4}
}

func (x *ApiV2ListGoodsFilterGetRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ApiV2ListGoodsFilterGetRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ApiV2ListGoodsFilterGetRequest) GetFilterNmID() int32 {
	if x != nil {
		return x.FilterNmID
	}
	return 0
}

type ApiV2ListGoodsSizeNmGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Сколько элементов вывести на одной странице (пагинация). Максимум 1 000 элементов
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Артикул Wildberries
	NmID int32 `protobuf:"varint,2,opt,name=nmID,proto3" json:"nmID,omitempty"`
	// Сколько элементов пропустить
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ApiV2ListGoodsSizeNmGetRequest) Reset() {
	*x = ApiV2ListGoodsSizeNmGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_prices_v1__service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV2ListGoodsSizeNmGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV2ListGoodsSizeNmGetRequest) ProtoMessage() {}

func (x *ApiV2ListGoodsSizeNmGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_prices_v1__service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV2ListGoodsSizeNmGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV2ListGoodsSizeNmGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_prices_v1__service_proto_rawDescGZIP(), []int{5}
}

func (x *ApiV2ListGoodsSizeNmGetRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ApiV2ListGoodsSizeNmGetRequest) GetNmID() int32 {
	if x != nil {
		return x.NmID
	}
	return 0
}

func (x *ApiV2ListGoodsSizeNmGetRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ApiV2UploadTaskPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiV2UploadTaskPostReq *ApiV2UploadTaskPostReq `protobuf:"bytes,1,opt,name=apiV2UploadTaskPostReq,proto3" json:"apiV2UploadTaskPostReq,omitempty"`
}

func (x *ApiV2UploadTaskPostRequest) Reset() {
	*x = ApiV2UploadTaskPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_prices_v1__service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV2UploadTaskPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV2UploadTaskPostRequest) ProtoMessage() {}

func (x *ApiV2UploadTaskPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_prices_v1__service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV2UploadTaskPostRequest.ProtoReflect.Descriptor instead.
func (*ApiV2UploadTaskPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_prices_v1__service_proto_rawDescGZIP(), []int{6}
}

func (x *ApiV2UploadTaskPostRequest) GetApiV2UploadTaskPostReq() *ApiV2UploadTaskPostReq {
	if x != nil {
		return x.ApiV2UploadTaskPostReq
	}
	return nil
}

type ApiV2UploadTaskSizePostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiV2UploadTaskSizePostReq *ApiV2UploadTaskSizePostReq `protobuf:"bytes,1,opt,name=apiV2UploadTaskSizePostReq,proto3" json:"apiV2UploadTaskSizePostReq,omitempty"`
}

func (x *ApiV2UploadTaskSizePostRequest) Reset() {
	*x = ApiV2UploadTaskSizePostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_prices_v1__service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV2UploadTaskSizePostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV2UploadTaskSizePostRequest) ProtoMessage() {}

func (x *ApiV2UploadTaskSizePostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_prices_v1__service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV2UploadTaskSizePostRequest.ProtoReflect.Descriptor instead.
func (*ApiV2UploadTaskSizePostRequest) Descriptor() ([]byte, []int) {
	return file_wb_prices_v1__service_proto_rawDescGZIP(), []int{7}
}

func (x *ApiV2UploadTaskSizePostRequest) GetApiV2UploadTaskSizePostReq() *ApiV2UploadTaskSizePostReq {
	if x != nil {
		return x.ApiV2UploadTaskSizePostReq
	}
	return nil
}

var File_wb_prices_v1__service_proto protoreflect.FileDescriptor

var file_wb_prices_v1__service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x77, 0x62, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x77,
	0x62, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x77, 0x62, 0x2f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x77, 0x62, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x32, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3c, 0x77,
	0x62, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f,
	0x76, 0x32, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x77, 0x62, 0x2f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x32,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x77, 0x62, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x32, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x34, 0x30, 0x30, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x77,
	0x62, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f,
	0x76, 0x32, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x5f, 0x67, 0x65, 0x74, 0x34, 0x30, 0x31, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x77, 0x62, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x32, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x34, 0x5f, 0x78,
	0x78, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x38, 0x77, 0x62, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x70, 0x69, 0x5f, 0x76, 0x32, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x35, 0x5f, 0x78, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x77, 0x62, 0x2f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x32, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3c, 0x77, 0x62, 0x2f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x32, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6e, 0x6d, 0x5f,
	0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x77, 0x62, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x32, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x77, 0x62, 0x2f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x32, 0x5f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x21, 0x77, 0x62, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x77, 0x62, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x77, 0x62, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6a, 0x0a, 0x1e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0x38, 0x0a, 0x1a, 0x41, 0x70, 0x69, 0x56, 0x32, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x22, 0x6b, 0x0a, 0x1f, 0x41, 0x70,
	0x69, 0x56, 0x32, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54,
	0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x39, 0x0a, 0x1b, 0x41, 0x70, 0x69, 0x56, 0x32,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x49, 0x44, 0x22, 0x6e, 0x0a, 0x1e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x6d, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x6d,
	0x49, 0x44, 0x22, 0x62, 0x0a, 0x1e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x4e, 0x6d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6d,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6e, 0x6d, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x7a, 0x0a, 0x1a, 0x41, 0x70, 0x69, 0x56, 0x32, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5c, 0x0a, 0x16, 0x61, 0x70, 0x69, 0x56, 0x32, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x77, 0x62, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x16, 0x61, 0x70, 0x69, 0x56,
	0x32, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x22, 0x8a, 0x01, 0x0a, 0x1e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x1a, 0x61, 0x70, 0x69, 0x56, 0x32, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x62, 0x2e, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x52, 0x1a, 0x61, 0x70, 0x69, 0x56, 0x32, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x32,
	0xa0, 0x07, 0x0a, 0x0e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x79, 0x0a, 0x17, 0x41, 0x70, 0x69, 0x56, 0x32, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x12, 0x2c, 0x2e,
	0x77, 0x62, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69,
	0x56, 0x32, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x61, 0x73,
	0x6b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x77, 0x62,
	0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x32,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x47,
	0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a,
	0x13, 0x41, 0x70, 0x69, 0x56, 0x32, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x47, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x77, 0x62, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x77, 0x62, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x69, 0x56, 0x32, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x47, 0x65,
	0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x18,
	0x41, 0x70, 0x69, 0x56, 0x32, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x12, 0x2d, 0x2e, 0x77, 0x62, 0x2e, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x77, 0x62, 0x2e, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x65, 0x74, 0x32,
	0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x14, 0x41, 0x70,
	0x69, 0x56, 0x32, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x47,
	0x65, 0x74, 0x12, 0x29, 0x2e, 0x77, 0x62, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x77, 0x62, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69,
	0x56, 0x32, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x47, 0x65,
	0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x17,
	0x41, 0x70, 0x69, 0x56, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x47, 0x65, 0x74, 0x12, 0x2c, 0x2e, 0x77, 0x62, 0x2e, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4c, 0x69, 0x73, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x77, 0x62, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x17, 0x41, 0x70, 0x69, 0x56, 0x32,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x4e, 0x6d, 0x47,
	0x65, 0x74, 0x12, 0x2c, 0x2e, 0x77, 0x62, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x53, 0x69, 0x7a, 0x65, 0x4e, 0x6d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x77, 0x62, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x69, 0x56, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x53, 0x69,
	0x7a, 0x65, 0x4e, 0x6d, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5a, 0x0a, 0x13, 0x41, 0x70, 0x69, 0x56, 0x32, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x77, 0x62, 0x2e, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x77, 0x62, 0x2e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x62,
	0x0a, 0x17, 0x41, 0x70, 0x69, 0x56, 0x32, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x77, 0x62, 0x2e, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x32, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x77, 0x62, 0x2e, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x43, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x49, 0x4f, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70,
	0x62, 0x2f, 0x77, 0x62, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x77,
	0x62, 0x50, 0x52, 0x49, 0x43, 0x45, 0x53, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wb_prices_v1__service_proto_rawDescOnce sync.Once
	file_wb_prices_v1__service_proto_rawDescData = file_wb_prices_v1__service_proto_rawDesc
)

func file_wb_prices_v1__service_proto_rawDescGZIP() []byte {
	file_wb_prices_v1__service_proto_rawDescOnce.Do(func() {
		file_wb_prices_v1__service_proto_rawDescData = protoimpl.X.CompressGZIP(file_wb_prices_v1__service_proto_rawDescData)
	})
	return file_wb_prices_v1__service_proto_rawDescData
}

var file_wb_prices_v1__service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_wb_prices_v1__service_proto_goTypes = []interface{}{
	(*ApiV2BufferGoodsTaskGetRequest)(nil),      // 0: wb.prices.v1.ApiV2BufferGoodsTaskGetRequest
	(*ApiV2BufferTasksGetRequest)(nil),          // 1: wb.prices.v1.ApiV2BufferTasksGetRequest
	(*ApiV2HistoryGoodsTaskGetRequest)(nil),     // 2: wb.prices.v1.ApiV2HistoryGoodsTaskGetRequest
	(*ApiV2HistoryTasksGetRequest)(nil),         // 3: wb.prices.v1.ApiV2HistoryTasksGetRequest
	(*ApiV2ListGoodsFilterGetRequest)(nil),      // 4: wb.prices.v1.ApiV2ListGoodsFilterGetRequest
	(*ApiV2ListGoodsSizeNmGetRequest)(nil),      // 5: wb.prices.v1.ApiV2ListGoodsSizeNmGetRequest
	(*ApiV2UploadTaskPostRequest)(nil),          // 6: wb.prices.v1.ApiV2UploadTaskPostRequest
	(*ApiV2UploadTaskSizePostRequest)(nil),      // 7: wb.prices.v1.ApiV2UploadTaskSizePostRequest
	(*ApiV2UploadTaskPostReq)(nil),              // 8: wb.prices.v1.ApiV2UploadTaskPostReq
	(*ApiV2UploadTaskSizePostReq)(nil),          // 9: wb.prices.v1.ApiV2UploadTaskSizePostReq
	(*ApiV2BufferGoodsTaskGet200Response)(nil),  // 10: wb.prices.v1.ApiV2BufferGoodsTaskGet200Response
	(*ApiV2BufferTasksGet200Response)(nil),      // 11: wb.prices.v1.ApiV2BufferTasksGet200Response
	(*ApiV2HistoryGoodsTaskGet200Response)(nil), // 12: wb.prices.v1.ApiV2HistoryGoodsTaskGet200Response
	(*ApiV2HistoryTasksGet200Response)(nil),     // 13: wb.prices.v1.ApiV2HistoryTasksGet200Response
	(*ApiV2ListGoodsFilterGet200Response)(nil),  // 14: wb.prices.v1.ApiV2ListGoodsFilterGet200Response
	(*ApiV2ListGoodsSizeNmGet200Response)(nil),  // 15: wb.prices.v1.ApiV2ListGoodsSizeNmGet200Response
	(*TaskCreated)(nil),                         // 16: wb.prices.v1.TaskCreated
}
var file_wb_prices_v1__service_proto_depIdxs = []int32{
	8,  // 0: wb.prices.v1.ApiV2UploadTaskPostRequest.apiV2UploadTaskPostReq:type_name -> wb.prices.v1.ApiV2UploadTaskPostReq
	9,  // 1: wb.prices.v1.ApiV2UploadTaskSizePostRequest.apiV2UploadTaskSizePostReq:type_name -> wb.prices.v1.ApiV2UploadTaskSizePostReq
	0,  // 2: wb.prices.v1.DefaultService.ApiV2BufferGoodsTaskGet:input_type -> wb.prices.v1.ApiV2BufferGoodsTaskGetRequest
	1,  // 3: wb.prices.v1.DefaultService.ApiV2BufferTasksGet:input_type -> wb.prices.v1.ApiV2BufferTasksGetRequest
	2,  // 4: wb.prices.v1.DefaultService.ApiV2HistoryGoodsTaskGet:input_type -> wb.prices.v1.ApiV2HistoryGoodsTaskGetRequest
	3,  // 5: wb.prices.v1.DefaultService.ApiV2HistoryTasksGet:input_type -> wb.prices.v1.ApiV2HistoryTasksGetRequest
	4,  // 6: wb.prices.v1.DefaultService.ApiV2ListGoodsFilterGet:input_type -> wb.prices.v1.ApiV2ListGoodsFilterGetRequest
	5,  // 7: wb.prices.v1.DefaultService.ApiV2ListGoodsSizeNmGet:input_type -> wb.prices.v1.ApiV2ListGoodsSizeNmGetRequest
	6,  // 8: wb.prices.v1.DefaultService.ApiV2UploadTaskPost:input_type -> wb.prices.v1.ApiV2UploadTaskPostRequest
	7,  // 9: wb.prices.v1.DefaultService.ApiV2UploadTaskSizePost:input_type -> wb.prices.v1.ApiV2UploadTaskSizePostRequest
	10, // 10: wb.prices.v1.DefaultService.ApiV2BufferGoodsTaskGet:output_type -> wb.prices.v1.ApiV2BufferGoodsTaskGet200Response
	11, // 11: wb.prices.v1.DefaultService.ApiV2BufferTasksGet:output_type -> wb.prices.v1.ApiV2BufferTasksGet200Response
	12, // 12: wb.prices.v1.DefaultService.ApiV2HistoryGoodsTaskGet:output_type -> wb.prices.v1.ApiV2HistoryGoodsTaskGet200Response
	13, // 13: wb.prices.v1.DefaultService.ApiV2HistoryTasksGet:output_type -> wb.prices.v1.ApiV2HistoryTasksGet200Response
	14, // 14: wb.prices.v1.DefaultService.ApiV2ListGoodsFilterGet:output_type -> wb.prices.v1.ApiV2ListGoodsFilterGet200Response
	15, // 15: wb.prices.v1.DefaultService.ApiV2ListGoodsSizeNmGet:output_type -> wb.prices.v1.ApiV2ListGoodsSizeNmGet200Response
	16, // 16: wb.prices.v1.DefaultService.ApiV2UploadTaskPost:output_type -> wb.prices.v1.TaskCreated
	16, // 17: wb.prices.v1.DefaultService.ApiV2UploadTaskSizePost:output_type -> wb.prices.v1.TaskCreated
	10, // [10:18] is the sub-list for method output_type
	2,  // [2:10] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_wb_prices_v1__service_proto_init() }
func file_wb_prices_v1__service_proto_init() {
	if File_wb_prices_v1__service_proto != nil {
		return
	}
	file_wb_prices_v1_api_v2_buffer_goods_task_get200_response_proto_init()
	file_wb_prices_v1_api_v2_buffer_tasks_get200_response_proto_init()
	file_wb_prices_v1_api_v2_history_goods_task_get200_response_proto_init()
	file_wb_prices_v1_api_v2_history_tasks_get200_response_proto_init()
	file_wb_prices_v1_api_v2_history_tasks_get400_response_proto_init()
	file_wb_prices_v1_api_v2_history_tasks_get401_response_proto_init()
	file_wb_prices_v1_api_v2_history_tasks_get4_xx_response_proto_init()
	file_wb_prices_v1_api_v2_history_tasks_get5_xx_response_proto_init()
	file_wb_prices_v1_api_v2_list_goods_filter_get200_response_proto_init()
	file_wb_prices_v1_api_v2_list_goods_size_nm_get200_response_proto_init()
	file_wb_prices_v1_api_v2_upload_task_post_request_proto_init()
	file_wb_prices_v1_api_v2_upload_task_size_post_request_proto_init()
	file_wb_prices_v1_response_error_proto_init()
	file_wb_prices_v1_task_already_exists_error_proto_init()
	file_wb_prices_v1_task_created_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_wb_prices_v1__service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV2BufferGoodsTaskGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_prices_v1__service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV2BufferTasksGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_prices_v1__service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV2HistoryGoodsTaskGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_prices_v1__service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV2HistoryTasksGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_prices_v1__service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV2ListGoodsFilterGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_prices_v1__service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV2ListGoodsSizeNmGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_prices_v1__service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV2UploadTaskPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_prices_v1__service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV2UploadTaskSizePostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wb_prices_v1__service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wb_prices_v1__service_proto_goTypes,
		DependencyIndexes: file_wb_prices_v1__service_proto_depIdxs,
		MessageInfos:      file_wb_prices_v1__service_proto_msgTypes,
	}.Build()
	File_wb_prices_v1__service_proto = out.File
	file_wb_prices_v1__service_proto_rawDesc = nil
	file_wb_prices_v1__service_proto_goTypes = nil
	file_wb_prices_v1__service_proto_depIdxs = nil
}
