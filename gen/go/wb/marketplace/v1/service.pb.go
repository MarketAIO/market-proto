//
//Описание API Marketplace
//
//No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
//
//The version of the OpenAPI document:
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: wb/marketplace/v1/service.proto

package wbMarketplace

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApiV3FilesOrdersExternalStickersPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiV3OrdersStickersPostReq *ApiV3OrdersStickersPostReq `protobuf:"bytes,1,opt,name=apiV3OrdersStickersPostReq,proto3" json:"apiV3OrdersStickersPostReq,omitempty"`
}

func (x *ApiV3FilesOrdersExternalStickersPostRequest) Reset() {
	*x = ApiV3FilesOrdersExternalStickersPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3FilesOrdersExternalStickersPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3FilesOrdersExternalStickersPostRequest) ProtoMessage() {}

func (x *ApiV3FilesOrdersExternalStickersPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3FilesOrdersExternalStickersPostRequest.ProtoReflect.Descriptor instead.
func (*ApiV3FilesOrdersExternalStickersPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *ApiV3FilesOrdersExternalStickersPostRequest) GetApiV3OrdersStickersPostReq() *ApiV3OrdersStickersPostReq {
	if x != nil {
		return x.ApiV3OrdersStickersPostReq
	}
	return nil
}

type ApiV3OfficesGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Office `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ApiV3OfficesGetResponse) Reset() {
	*x = ApiV3OfficesGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3OfficesGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3OfficesGetResponse) ProtoMessage() {}

func (x *ApiV3OfficesGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3OfficesGetResponse.ProtoReflect.Descriptor instead.
func (*ApiV3OfficesGetResponse) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *ApiV3OfficesGetResponse) GetData() []*Office {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiV3OrdersGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Параметр пагинации. Устанавливает предельное количество возвращаемых данных.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Параметр пагинации. Устанавливает значение, с которого надо получить следующий пакет данных. Для получения полного списка данных должен быть равен 0 в первом запросе. Для следующих запросов необходимо брать значения из одноимённого поля в ответе.
	Next int64 `protobuf:"varint,2,opt,name=next,proto3" json:"next,omitempty"`
	// Дата начала периода в формате Unix timestamp. Необязательный параметр.
	DateFrom int32 `protobuf:"varint,3,opt,name=dateFrom,proto3" json:"dateFrom,omitempty"`
	// Дата конца периода в формате Unix timestamp. Необязательный параметр.
	DateTo int32 `protobuf:"varint,4,opt,name=dateTo,proto3" json:"dateTo,omitempty"`
}

func (x *ApiV3OrdersGetRequest) Reset() {
	*x = ApiV3OrdersGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3OrdersGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3OrdersGetRequest) ProtoMessage() {}

func (x *ApiV3OrdersGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3OrdersGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV3OrdersGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *ApiV3OrdersGetRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ApiV3OrdersGetRequest) GetNext() int64 {
	if x != nil {
		return x.Next
	}
	return 0
}

func (x *ApiV3OrdersGetRequest) GetDateFrom() int32 {
	if x != nil {
		return x.DateFrom
	}
	return 0
}

func (x *ApiV3OrdersGetRequest) GetDateTo() int32 {
	if x != nil {
		return x.DateTo
	}
	return 0
}

type ApiV3OrdersOrderIdCancelPatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID сборочного задания
	OrderId int64 `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
}

func (x *ApiV3OrdersOrderIdCancelPatchRequest) Reset() {
	*x = ApiV3OrdersOrderIdCancelPatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3OrdersOrderIdCancelPatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3OrdersOrderIdCancelPatchRequest) ProtoMessage() {}

func (x *ApiV3OrdersOrderIdCancelPatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3OrdersOrderIdCancelPatchRequest.ProtoReflect.Descriptor instead.
func (*ApiV3OrdersOrderIdCancelPatchRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *ApiV3OrdersOrderIdCancelPatchRequest) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

type ApiV3OrdersOrderIdMetaDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID сборочного задания
	OrderId int64 `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	// Название метаданных для удаления (**imei**, **uin**, **gtin**, **sgtin**). Передается только одно значение.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ApiV3OrdersOrderIdMetaDeleteRequest) Reset() {
	*x = ApiV3OrdersOrderIdMetaDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3OrdersOrderIdMetaDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3OrdersOrderIdMetaDeleteRequest) ProtoMessage() {}

func (x *ApiV3OrdersOrderIdMetaDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3OrdersOrderIdMetaDeleteRequest.ProtoReflect.Descriptor instead.
func (*ApiV3OrdersOrderIdMetaDeleteRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *ApiV3OrdersOrderIdMetaDeleteRequest) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *ApiV3OrdersOrderIdMetaDeleteRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ApiV3OrdersOrderIdMetaGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID сборочного задания
	OrderId int64 `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
}

func (x *ApiV3OrdersOrderIdMetaGetRequest) Reset() {
	*x = ApiV3OrdersOrderIdMetaGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3OrdersOrderIdMetaGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3OrdersOrderIdMetaGetRequest) ProtoMessage() {}

func (x *ApiV3OrdersOrderIdMetaGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3OrdersOrderIdMetaGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV3OrdersOrderIdMetaGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{5}
}

func (x *ApiV3OrdersOrderIdMetaGetRequest) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

type ApiV3OrdersOrderIdMetaGtinPutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID сборочного задания
	OrderId                          int64                             `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	ApiV3OrdersOrderIdMetaGtinPutReq *ApiV3OrdersOrderIdMetaGtinPutReq `protobuf:"bytes,2,opt,name=apiV3OrdersOrderIdMetaGtinPutReq,proto3" json:"apiV3OrdersOrderIdMetaGtinPutReq,omitempty"`
}

func (x *ApiV3OrdersOrderIdMetaGtinPutRequest) Reset() {
	*x = ApiV3OrdersOrderIdMetaGtinPutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3OrdersOrderIdMetaGtinPutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3OrdersOrderIdMetaGtinPutRequest) ProtoMessage() {}

func (x *ApiV3OrdersOrderIdMetaGtinPutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3OrdersOrderIdMetaGtinPutRequest.ProtoReflect.Descriptor instead.
func (*ApiV3OrdersOrderIdMetaGtinPutRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{6}
}

func (x *ApiV3OrdersOrderIdMetaGtinPutRequest) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *ApiV3OrdersOrderIdMetaGtinPutRequest) GetApiV3OrdersOrderIdMetaGtinPutReq() *ApiV3OrdersOrderIdMetaGtinPutReq {
	if x != nil {
		return x.ApiV3OrdersOrderIdMetaGtinPutReq
	}
	return nil
}

type ApiV3OrdersOrderIdMetaImeiPutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID сборочного задания
	OrderId                          int64                             `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	ApiV3OrdersOrderIdMetaImeiPutReq *ApiV3OrdersOrderIdMetaImeiPutReq `protobuf:"bytes,2,opt,name=apiV3OrdersOrderIdMetaImeiPutReq,proto3" json:"apiV3OrdersOrderIdMetaImeiPutReq,omitempty"`
}

func (x *ApiV3OrdersOrderIdMetaImeiPutRequest) Reset() {
	*x = ApiV3OrdersOrderIdMetaImeiPutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3OrdersOrderIdMetaImeiPutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3OrdersOrderIdMetaImeiPutRequest) ProtoMessage() {}

func (x *ApiV3OrdersOrderIdMetaImeiPutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3OrdersOrderIdMetaImeiPutRequest.ProtoReflect.Descriptor instead.
func (*ApiV3OrdersOrderIdMetaImeiPutRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *ApiV3OrdersOrderIdMetaImeiPutRequest) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *ApiV3OrdersOrderIdMetaImeiPutRequest) GetApiV3OrdersOrderIdMetaImeiPutReq() *ApiV3OrdersOrderIdMetaImeiPutReq {
	if x != nil {
		return x.ApiV3OrdersOrderIdMetaImeiPutReq
	}
	return nil
}

type ApiV3OrdersOrderIdMetaSgtinPutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID сборочного задания
	OrderId                           int64                              `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	ApiV3OrdersOrderIdMetaSgtinPutReq *ApiV3OrdersOrderIdMetaSgtinPutReq `protobuf:"bytes,2,opt,name=apiV3OrdersOrderIdMetaSgtinPutReq,proto3" json:"apiV3OrdersOrderIdMetaSgtinPutReq,omitempty"`
}

func (x *ApiV3OrdersOrderIdMetaSgtinPutRequest) Reset() {
	*x = ApiV3OrdersOrderIdMetaSgtinPutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3OrdersOrderIdMetaSgtinPutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3OrdersOrderIdMetaSgtinPutRequest) ProtoMessage() {}

func (x *ApiV3OrdersOrderIdMetaSgtinPutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3OrdersOrderIdMetaSgtinPutRequest.ProtoReflect.Descriptor instead.
func (*ApiV3OrdersOrderIdMetaSgtinPutRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{8}
}

func (x *ApiV3OrdersOrderIdMetaSgtinPutRequest) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *ApiV3OrdersOrderIdMetaSgtinPutRequest) GetApiV3OrdersOrderIdMetaSgtinPutReq() *ApiV3OrdersOrderIdMetaSgtinPutReq {
	if x != nil {
		return x.ApiV3OrdersOrderIdMetaSgtinPutReq
	}
	return nil
}

type ApiV3OrdersOrderIdMetaUinPutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID сборочного задания
	OrderId                         int64                            `protobuf:"varint,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	ApiV3OrdersOrderIdMetaUinPutReq *ApiV3OrdersOrderIdMetaUinPutReq `protobuf:"bytes,2,opt,name=apiV3OrdersOrderIdMetaUinPutReq,proto3" json:"apiV3OrdersOrderIdMetaUinPutReq,omitempty"`
}

func (x *ApiV3OrdersOrderIdMetaUinPutRequest) Reset() {
	*x = ApiV3OrdersOrderIdMetaUinPutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3OrdersOrderIdMetaUinPutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3OrdersOrderIdMetaUinPutRequest) ProtoMessage() {}

func (x *ApiV3OrdersOrderIdMetaUinPutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3OrdersOrderIdMetaUinPutRequest.ProtoReflect.Descriptor instead.
func (*ApiV3OrdersOrderIdMetaUinPutRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *ApiV3OrdersOrderIdMetaUinPutRequest) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *ApiV3OrdersOrderIdMetaUinPutRequest) GetApiV3OrdersOrderIdMetaUinPutReq() *ApiV3OrdersOrderIdMetaUinPutReq {
	if x != nil {
		return x.ApiV3OrdersOrderIdMetaUinPutReq
	}
	return nil
}

type ApiV3OrdersStatusPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiV3OrdersStatusPostReq *ApiV3OrdersStatusPostReq `protobuf:"bytes,1,opt,name=apiV3OrdersStatusPostReq,proto3" json:"apiV3OrdersStatusPostReq,omitempty"`
}

func (x *ApiV3OrdersStatusPostRequest) Reset() {
	*x = ApiV3OrdersStatusPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3OrdersStatusPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3OrdersStatusPostRequest) ProtoMessage() {}

func (x *ApiV3OrdersStatusPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3OrdersStatusPostRequest.ProtoReflect.Descriptor instead.
func (*ApiV3OrdersStatusPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{10}
}

func (x *ApiV3OrdersStatusPostRequest) GetApiV3OrdersStatusPostReq() *ApiV3OrdersStatusPostReq {
	if x != nil {
		return x.ApiV3OrdersStatusPostReq
	}
	return nil
}

type ApiV3OrdersStickersPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Тип этикетки
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Ширина этикетки
	Width int32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	// Высота этикетки
	Height                     int32                       `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	ApiV3OrdersStickersPostReq *ApiV3OrdersStickersPostReq `protobuf:"bytes,4,opt,name=apiV3OrdersStickersPostReq,proto3" json:"apiV3OrdersStickersPostReq,omitempty"`
}

func (x *ApiV3OrdersStickersPostRequest) Reset() {
	*x = ApiV3OrdersStickersPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3OrdersStickersPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3OrdersStickersPostRequest) ProtoMessage() {}

func (x *ApiV3OrdersStickersPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3OrdersStickersPostRequest.ProtoReflect.Descriptor instead.
func (*ApiV3OrdersStickersPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{11}
}

func (x *ApiV3OrdersStickersPostRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ApiV3OrdersStickersPostRequest) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ApiV3OrdersStickersPostRequest) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ApiV3OrdersStickersPostRequest) GetApiV3OrdersStickersPostReq() *ApiV3OrdersStickersPostReq {
	if x != nil {
		return x.ApiV3OrdersStickersPostReq
	}
	return nil
}

type ApiV3PassesGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Pass `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ApiV3PassesGetResponse) Reset() {
	*x = ApiV3PassesGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3PassesGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3PassesGetResponse) ProtoMessage() {}

func (x *ApiV3PassesGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3PassesGetResponse.ProtoReflect.Descriptor instead.
func (*ApiV3PassesGetResponse) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{12}
}

func (x *ApiV3PassesGetResponse) GetData() []*Pass {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiV3PassesOfficesGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PassOffice `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ApiV3PassesOfficesGetResponse) Reset() {
	*x = ApiV3PassesOfficesGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3PassesOfficesGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3PassesOfficesGetResponse) ProtoMessage() {}

func (x *ApiV3PassesOfficesGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3PassesOfficesGetResponse.ProtoReflect.Descriptor instead.
func (*ApiV3PassesOfficesGetResponse) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{13}
}

func (x *ApiV3PassesOfficesGetResponse) GetData() []*PassOffice {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiV3PassesPassIdDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID пропуска
	PassId int64 `protobuf:"varint,1,opt,name=passId,proto3" json:"passId,omitempty"`
}

func (x *ApiV3PassesPassIdDeleteRequest) Reset() {
	*x = ApiV3PassesPassIdDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3PassesPassIdDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3PassesPassIdDeleteRequest) ProtoMessage() {}

func (x *ApiV3PassesPassIdDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3PassesPassIdDeleteRequest.ProtoReflect.Descriptor instead.
func (*ApiV3PassesPassIdDeleteRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{14}
}

func (x *ApiV3PassesPassIdDeleteRequest) GetPassId() int64 {
	if x != nil {
		return x.PassId
	}
	return 0
}

type ApiV3PassesPassIdPutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID пропуска
	PassId int64 `protobuf:"varint,1,opt,name=passId,proto3" json:"passId,omitempty"`
	// Общая длина ФИО ограничена от 6 до 100 символов. В номере машины могут быть только буквы и цифры.
	ApiV3PassesPassIdPutReq *ApiV3PassesPassIdPutReq `protobuf:"bytes,2,opt,name=apiV3PassesPassIdPutReq,proto3" json:"apiV3PassesPassIdPutReq,omitempty"`
}

func (x *ApiV3PassesPassIdPutRequest) Reset() {
	*x = ApiV3PassesPassIdPutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3PassesPassIdPutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3PassesPassIdPutRequest) ProtoMessage() {}

func (x *ApiV3PassesPassIdPutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3PassesPassIdPutRequest.ProtoReflect.Descriptor instead.
func (*ApiV3PassesPassIdPutRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{15}
}

func (x *ApiV3PassesPassIdPutRequest) GetPassId() int64 {
	if x != nil {
		return x.PassId
	}
	return 0
}

func (x *ApiV3PassesPassIdPutRequest) GetApiV3PassesPassIdPutReq() *ApiV3PassesPassIdPutReq {
	if x != nil {
		return x.ApiV3PassesPassIdPutReq
	}
	return nil
}

type ApiV3PassesPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Общая длина ФИО ограничена от 6 до 100 символов. В номере машины могут быть только буквы и цифры.
	ApiV3PassesPostReq *ApiV3PassesPostReq `protobuf:"bytes,1,opt,name=apiV3PassesPostReq,proto3" json:"apiV3PassesPostReq,omitempty"`
}

func (x *ApiV3PassesPostRequest) Reset() {
	*x = ApiV3PassesPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3PassesPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3PassesPostRequest) ProtoMessage() {}

func (x *ApiV3PassesPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3PassesPostRequest.ProtoReflect.Descriptor instead.
func (*ApiV3PassesPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{16}
}

func (x *ApiV3PassesPostRequest) GetApiV3PassesPostReq() *ApiV3PassesPostReq {
	if x != nil {
		return x.ApiV3PassesPostReq
	}
	return nil
}

type ApiV3StocksWarehouseIdDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID склада продавца
	WarehouseId                     int64                            `protobuf:"varint,1,opt,name=warehouseId,proto3" json:"warehouseId,omitempty"`
	ApiV3StocksWarehouseIdDeleteReq *ApiV3StocksWarehouseIdDeleteReq `protobuf:"bytes,2,opt,name=apiV3StocksWarehouseIdDeleteReq,proto3" json:"apiV3StocksWarehouseIdDeleteReq,omitempty"`
}

func (x *ApiV3StocksWarehouseIdDeleteRequest) Reset() {
	*x = ApiV3StocksWarehouseIdDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3StocksWarehouseIdDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3StocksWarehouseIdDeleteRequest) ProtoMessage() {}

func (x *ApiV3StocksWarehouseIdDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3StocksWarehouseIdDeleteRequest.ProtoReflect.Descriptor instead.
func (*ApiV3StocksWarehouseIdDeleteRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{17}
}

func (x *ApiV3StocksWarehouseIdDeleteRequest) GetWarehouseId() int64 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

func (x *ApiV3StocksWarehouseIdDeleteRequest) GetApiV3StocksWarehouseIdDeleteReq() *ApiV3StocksWarehouseIdDeleteReq {
	if x != nil {
		return x.ApiV3StocksWarehouseIdDeleteReq
	}
	return nil
}

type ApiV3StocksWarehouseIdPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID склада продавца
	WarehouseId                   int64                          `protobuf:"varint,1,opt,name=warehouseId,proto3" json:"warehouseId,omitempty"`
	ApiV3StocksWarehouseIdPostReq *ApiV3StocksWarehouseIdPostReq `protobuf:"bytes,2,opt,name=apiV3StocksWarehouseIdPostReq,proto3" json:"apiV3StocksWarehouseIdPostReq,omitempty"`
}

func (x *ApiV3StocksWarehouseIdPostRequest) Reset() {
	*x = ApiV3StocksWarehouseIdPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3StocksWarehouseIdPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3StocksWarehouseIdPostRequest) ProtoMessage() {}

func (x *ApiV3StocksWarehouseIdPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3StocksWarehouseIdPostRequest.ProtoReflect.Descriptor instead.
func (*ApiV3StocksWarehouseIdPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{18}
}

func (x *ApiV3StocksWarehouseIdPostRequest) GetWarehouseId() int64 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

func (x *ApiV3StocksWarehouseIdPostRequest) GetApiV3StocksWarehouseIdPostReq() *ApiV3StocksWarehouseIdPostReq {
	if x != nil {
		return x.ApiV3StocksWarehouseIdPostReq
	}
	return nil
}

type ApiV3StocksWarehouseIdPutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID склада продавца
	WarehouseId                  int64                         `protobuf:"varint,1,opt,name=warehouseId,proto3" json:"warehouseId,omitempty"`
	ApiV3StocksWarehouseIdPutReq *ApiV3StocksWarehouseIdPutReq `protobuf:"bytes,2,opt,name=apiV3StocksWarehouseIdPutReq,proto3" json:"apiV3StocksWarehouseIdPutReq,omitempty"`
}

func (x *ApiV3StocksWarehouseIdPutRequest) Reset() {
	*x = ApiV3StocksWarehouseIdPutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3StocksWarehouseIdPutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3StocksWarehouseIdPutRequest) ProtoMessage() {}

func (x *ApiV3StocksWarehouseIdPutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3StocksWarehouseIdPutRequest.ProtoReflect.Descriptor instead.
func (*ApiV3StocksWarehouseIdPutRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{19}
}

func (x *ApiV3StocksWarehouseIdPutRequest) GetWarehouseId() int64 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

func (x *ApiV3StocksWarehouseIdPutRequest) GetApiV3StocksWarehouseIdPutReq() *ApiV3StocksWarehouseIdPutReq {
	if x != nil {
		return x.ApiV3StocksWarehouseIdPutReq
	}
	return nil
}

type ApiV3SuppliesGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Параметр пагинации. Устанавливает предельное количество возвращаемых данных.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Параметр пагинации. Устанавливает значение, с которого надо получить следующий пакет данных. Для получения полного списка данных должен быть равен 0 в первом запросе. Для следующих запросов необходимо брать значения из одноимённого поля в ответе.
	Next int64 `protobuf:"varint,2,opt,name=next,proto3" json:"next,omitempty"`
}

func (x *ApiV3SuppliesGetRequest) Reset() {
	*x = ApiV3SuppliesGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3SuppliesGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3SuppliesGetRequest) ProtoMessage() {}

func (x *ApiV3SuppliesGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3SuppliesGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV3SuppliesGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{20}
}

func (x *ApiV3SuppliesGetRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ApiV3SuppliesGetRequest) GetNext() int64 {
	if x != nil {
		return x.Next
	}
	return 0
}

type ApiV3SuppliesPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiV3SuppliesPostReq *ApiV3SuppliesPostReq `protobuf:"bytes,1,opt,name=apiV3SuppliesPostReq,proto3" json:"apiV3SuppliesPostReq,omitempty"`
}

func (x *ApiV3SuppliesPostRequest) Reset() {
	*x = ApiV3SuppliesPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3SuppliesPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3SuppliesPostRequest) ProtoMessage() {}

func (x *ApiV3SuppliesPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3SuppliesPostRequest.ProtoReflect.Descriptor instead.
func (*ApiV3SuppliesPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{21}
}

func (x *ApiV3SuppliesPostRequest) GetApiV3SuppliesPostReq() *ApiV3SuppliesPostReq {
	if x != nil {
		return x.ApiV3SuppliesPostReq
	}
	return nil
}

type ApiV3SuppliesSupplyIdBarcodeGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID поставки
	SupplyId string `protobuf:"bytes,1,opt,name=supplyId,proto3" json:"supplyId,omitempty"`
	// Тип этикетки
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ApiV3SuppliesSupplyIdBarcodeGetRequest) Reset() {
	*x = ApiV3SuppliesSupplyIdBarcodeGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3SuppliesSupplyIdBarcodeGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3SuppliesSupplyIdBarcodeGetRequest) ProtoMessage() {}

func (x *ApiV3SuppliesSupplyIdBarcodeGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3SuppliesSupplyIdBarcodeGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV3SuppliesSupplyIdBarcodeGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{22}
}

func (x *ApiV3SuppliesSupplyIdBarcodeGetRequest) GetSupplyId() string {
	if x != nil {
		return x.SupplyId
	}
	return ""
}

func (x *ApiV3SuppliesSupplyIdBarcodeGetRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ApiV3SuppliesSupplyIdDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID поставки
	SupplyId string `protobuf:"bytes,1,opt,name=supplyId,proto3" json:"supplyId,omitempty"`
}

func (x *ApiV3SuppliesSupplyIdDeleteRequest) Reset() {
	*x = ApiV3SuppliesSupplyIdDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3SuppliesSupplyIdDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3SuppliesSupplyIdDeleteRequest) ProtoMessage() {}

func (x *ApiV3SuppliesSupplyIdDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3SuppliesSupplyIdDeleteRequest.ProtoReflect.Descriptor instead.
func (*ApiV3SuppliesSupplyIdDeleteRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{23}
}

func (x *ApiV3SuppliesSupplyIdDeleteRequest) GetSupplyId() string {
	if x != nil {
		return x.SupplyId
	}
	return ""
}

type ApiV3SuppliesSupplyIdDeliverPatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID поставки
	SupplyId string `protobuf:"bytes,1,opt,name=supplyId,proto3" json:"supplyId,omitempty"`
}

func (x *ApiV3SuppliesSupplyIdDeliverPatchRequest) Reset() {
	*x = ApiV3SuppliesSupplyIdDeliverPatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3SuppliesSupplyIdDeliverPatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3SuppliesSupplyIdDeliverPatchRequest) ProtoMessage() {}

func (x *ApiV3SuppliesSupplyIdDeliverPatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3SuppliesSupplyIdDeliverPatchRequest.ProtoReflect.Descriptor instead.
func (*ApiV3SuppliesSupplyIdDeliverPatchRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{24}
}

func (x *ApiV3SuppliesSupplyIdDeliverPatchRequest) GetSupplyId() string {
	if x != nil {
		return x.SupplyId
	}
	return ""
}

type ApiV3SuppliesSupplyIdGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID поставки
	SupplyId string `protobuf:"bytes,1,opt,name=supplyId,proto3" json:"supplyId,omitempty"`
}

func (x *ApiV3SuppliesSupplyIdGetRequest) Reset() {
	*x = ApiV3SuppliesSupplyIdGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3SuppliesSupplyIdGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3SuppliesSupplyIdGetRequest) ProtoMessage() {}

func (x *ApiV3SuppliesSupplyIdGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3SuppliesSupplyIdGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV3SuppliesSupplyIdGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{25}
}

func (x *ApiV3SuppliesSupplyIdGetRequest) GetSupplyId() string {
	if x != nil {
		return x.SupplyId
	}
	return ""
}

type ApiV3SuppliesSupplyIdOrdersGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID поставки
	SupplyId string `protobuf:"bytes,1,opt,name=supplyId,proto3" json:"supplyId,omitempty"`
}

func (x *ApiV3SuppliesSupplyIdOrdersGetRequest) Reset() {
	*x = ApiV3SuppliesSupplyIdOrdersGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3SuppliesSupplyIdOrdersGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3SuppliesSupplyIdOrdersGetRequest) ProtoMessage() {}

func (x *ApiV3SuppliesSupplyIdOrdersGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3SuppliesSupplyIdOrdersGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV3SuppliesSupplyIdOrdersGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{26}
}

func (x *ApiV3SuppliesSupplyIdOrdersGetRequest) GetSupplyId() string {
	if x != nil {
		return x.SupplyId
	}
	return ""
}

type ApiV3SuppliesSupplyIdOrdersOrderIdPatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID поставки
	SupplyId string `protobuf:"bytes,1,opt,name=supplyId,proto3" json:"supplyId,omitempty"`
	// ID сборочного задания
	OrderId int64 `protobuf:"varint,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
}

func (x *ApiV3SuppliesSupplyIdOrdersOrderIdPatchRequest) Reset() {
	*x = ApiV3SuppliesSupplyIdOrdersOrderIdPatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3SuppliesSupplyIdOrdersOrderIdPatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3SuppliesSupplyIdOrdersOrderIdPatchRequest) ProtoMessage() {}

func (x *ApiV3SuppliesSupplyIdOrdersOrderIdPatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3SuppliesSupplyIdOrdersOrderIdPatchRequest.ProtoReflect.Descriptor instead.
func (*ApiV3SuppliesSupplyIdOrdersOrderIdPatchRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{27}
}

func (x *ApiV3SuppliesSupplyIdOrdersOrderIdPatchRequest) GetSupplyId() string {
	if x != nil {
		return x.SupplyId
	}
	return ""
}

func (x *ApiV3SuppliesSupplyIdOrdersOrderIdPatchRequest) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

type ApiV3SuppliesSupplyIdTrbxDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID поставки
	SupplyId                           string                              `protobuf:"bytes,1,opt,name=supplyId,proto3" json:"supplyId,omitempty"`
	ApiV3SuppliesSupplyIdTrbxDeleteReq *ApiV3SuppliesSupplyIdTrbxDeleteReq `protobuf:"bytes,2,opt,name=apiV3SuppliesSupplyIdTrbxDeleteReq,proto3" json:"apiV3SuppliesSupplyIdTrbxDeleteReq,omitempty"`
}

func (x *ApiV3SuppliesSupplyIdTrbxDeleteRequest) Reset() {
	*x = ApiV3SuppliesSupplyIdTrbxDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3SuppliesSupplyIdTrbxDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3SuppliesSupplyIdTrbxDeleteRequest) ProtoMessage() {}

func (x *ApiV3SuppliesSupplyIdTrbxDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3SuppliesSupplyIdTrbxDeleteRequest.ProtoReflect.Descriptor instead.
func (*ApiV3SuppliesSupplyIdTrbxDeleteRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{28}
}

func (x *ApiV3SuppliesSupplyIdTrbxDeleteRequest) GetSupplyId() string {
	if x != nil {
		return x.SupplyId
	}
	return ""
}

func (x *ApiV3SuppliesSupplyIdTrbxDeleteRequest) GetApiV3SuppliesSupplyIdTrbxDeleteReq() *ApiV3SuppliesSupplyIdTrbxDeleteReq {
	if x != nil {
		return x.ApiV3SuppliesSupplyIdTrbxDeleteReq
	}
	return nil
}

type ApiV3SuppliesSupplyIdTrbxGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID поставки
	SupplyId string `protobuf:"bytes,1,opt,name=supplyId,proto3" json:"supplyId,omitempty"`
}

func (x *ApiV3SuppliesSupplyIdTrbxGetRequest) Reset() {
	*x = ApiV3SuppliesSupplyIdTrbxGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3SuppliesSupplyIdTrbxGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3SuppliesSupplyIdTrbxGetRequest) ProtoMessage() {}

func (x *ApiV3SuppliesSupplyIdTrbxGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3SuppliesSupplyIdTrbxGetRequest.ProtoReflect.Descriptor instead.
func (*ApiV3SuppliesSupplyIdTrbxGetRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{29}
}

func (x *ApiV3SuppliesSupplyIdTrbxGetRequest) GetSupplyId() string {
	if x != nil {
		return x.SupplyId
	}
	return ""
}

type ApiV3SuppliesSupplyIdTrbxPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID поставки
	SupplyId                         string                            `protobuf:"bytes,1,opt,name=supplyId,proto3" json:"supplyId,omitempty"`
	ApiV3SuppliesSupplyIdTrbxPostReq *ApiV3SuppliesSupplyIdTrbxPostReq `protobuf:"bytes,2,opt,name=apiV3SuppliesSupplyIdTrbxPostReq,proto3" json:"apiV3SuppliesSupplyIdTrbxPostReq,omitempty"`
}

func (x *ApiV3SuppliesSupplyIdTrbxPostRequest) Reset() {
	*x = ApiV3SuppliesSupplyIdTrbxPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3SuppliesSupplyIdTrbxPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3SuppliesSupplyIdTrbxPostRequest) ProtoMessage() {}

func (x *ApiV3SuppliesSupplyIdTrbxPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3SuppliesSupplyIdTrbxPostRequest.ProtoReflect.Descriptor instead.
func (*ApiV3SuppliesSupplyIdTrbxPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{30}
}

func (x *ApiV3SuppliesSupplyIdTrbxPostRequest) GetSupplyId() string {
	if x != nil {
		return x.SupplyId
	}
	return ""
}

func (x *ApiV3SuppliesSupplyIdTrbxPostRequest) GetApiV3SuppliesSupplyIdTrbxPostReq() *ApiV3SuppliesSupplyIdTrbxPostReq {
	if x != nil {
		return x.ApiV3SuppliesSupplyIdTrbxPostReq
	}
	return nil
}

type ApiV3SuppliesSupplyIdTrbxStickersPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID поставки
	SupplyId string `protobuf:"bytes,1,opt,name=supplyId,proto3" json:"supplyId,omitempty"`
	// Тип этикетки
	Type                                     string                                    `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	ApiV3SuppliesSupplyIdTrbxStickersPostReq *ApiV3SuppliesSupplyIdTrbxStickersPostReq `protobuf:"bytes,3,opt,name=apiV3SuppliesSupplyIdTrbxStickersPostReq,proto3" json:"apiV3SuppliesSupplyIdTrbxStickersPostReq,omitempty"`
}

func (x *ApiV3SuppliesSupplyIdTrbxStickersPostRequest) Reset() {
	*x = ApiV3SuppliesSupplyIdTrbxStickersPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3SuppliesSupplyIdTrbxStickersPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3SuppliesSupplyIdTrbxStickersPostRequest) ProtoMessage() {}

func (x *ApiV3SuppliesSupplyIdTrbxStickersPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3SuppliesSupplyIdTrbxStickersPostRequest.ProtoReflect.Descriptor instead.
func (*ApiV3SuppliesSupplyIdTrbxStickersPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{31}
}

func (x *ApiV3SuppliesSupplyIdTrbxStickersPostRequest) GetSupplyId() string {
	if x != nil {
		return x.SupplyId
	}
	return ""
}

func (x *ApiV3SuppliesSupplyIdTrbxStickersPostRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ApiV3SuppliesSupplyIdTrbxStickersPostRequest) GetApiV3SuppliesSupplyIdTrbxStickersPostReq() *ApiV3SuppliesSupplyIdTrbxStickersPostReq {
	if x != nil {
		return x.ApiV3SuppliesSupplyIdTrbxStickersPostReq
	}
	return nil
}

type ApiV3SuppliesSupplyIdTrbxTrbxIdOrdersOrderIdDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID поставки
	SupplyId string `protobuf:"bytes,1,opt,name=supplyId,proto3" json:"supplyId,omitempty"`
	// ID короба
	TrbxId string `protobuf:"bytes,2,opt,name=trbxId,proto3" json:"trbxId,omitempty"`
	// ID сборочного задания
	OrderId int64 `protobuf:"varint,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
}

func (x *ApiV3SuppliesSupplyIdTrbxTrbxIdOrdersOrderIdDeleteRequest) Reset() {
	*x = ApiV3SuppliesSupplyIdTrbxTrbxIdOrdersOrderIdDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3SuppliesSupplyIdTrbxTrbxIdOrdersOrderIdDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3SuppliesSupplyIdTrbxTrbxIdOrdersOrderIdDeleteRequest) ProtoMessage() {}

func (x *ApiV3SuppliesSupplyIdTrbxTrbxIdOrdersOrderIdDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3SuppliesSupplyIdTrbxTrbxIdOrdersOrderIdDeleteRequest.ProtoReflect.Descriptor instead.
func (*ApiV3SuppliesSupplyIdTrbxTrbxIdOrdersOrderIdDeleteRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{32}
}

func (x *ApiV3SuppliesSupplyIdTrbxTrbxIdOrdersOrderIdDeleteRequest) GetSupplyId() string {
	if x != nil {
		return x.SupplyId
	}
	return ""
}

func (x *ApiV3SuppliesSupplyIdTrbxTrbxIdOrdersOrderIdDeleteRequest) GetTrbxId() string {
	if x != nil {
		return x.TrbxId
	}
	return ""
}

func (x *ApiV3SuppliesSupplyIdTrbxTrbxIdOrdersOrderIdDeleteRequest) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

type ApiV3SuppliesSupplyIdTrbxTrbxIdPatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID поставки
	SupplyId string `protobuf:"bytes,1,opt,name=supplyId,proto3" json:"supplyId,omitempty"`
	// ID короба
	TrbxId                                  string                                   `protobuf:"bytes,2,opt,name=trbxId,proto3" json:"trbxId,omitempty"`
	ApiV3SuppliesSupplyIdTrbxTrbxIdPatchReq *ApiV3SuppliesSupplyIdTrbxTrbxIdPatchReq `protobuf:"bytes,3,opt,name=apiV3SuppliesSupplyIdTrbxTrbxIdPatchReq,proto3" json:"apiV3SuppliesSupplyIdTrbxTrbxIdPatchReq,omitempty"`
}

func (x *ApiV3SuppliesSupplyIdTrbxTrbxIdPatchRequest) Reset() {
	*x = ApiV3SuppliesSupplyIdTrbxTrbxIdPatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3SuppliesSupplyIdTrbxTrbxIdPatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3SuppliesSupplyIdTrbxTrbxIdPatchRequest) ProtoMessage() {}

func (x *ApiV3SuppliesSupplyIdTrbxTrbxIdPatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3SuppliesSupplyIdTrbxTrbxIdPatchRequest.ProtoReflect.Descriptor instead.
func (*ApiV3SuppliesSupplyIdTrbxTrbxIdPatchRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{33}
}

func (x *ApiV3SuppliesSupplyIdTrbxTrbxIdPatchRequest) GetSupplyId() string {
	if x != nil {
		return x.SupplyId
	}
	return ""
}

func (x *ApiV3SuppliesSupplyIdTrbxTrbxIdPatchRequest) GetTrbxId() string {
	if x != nil {
		return x.TrbxId
	}
	return ""
}

func (x *ApiV3SuppliesSupplyIdTrbxTrbxIdPatchRequest) GetApiV3SuppliesSupplyIdTrbxTrbxIdPatchReq() *ApiV3SuppliesSupplyIdTrbxTrbxIdPatchReq {
	if x != nil {
		return x.ApiV3SuppliesSupplyIdTrbxTrbxIdPatchReq
	}
	return nil
}

type ApiV3WarehousesGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Warehouse `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ApiV3WarehousesGetResponse) Reset() {
	*x = ApiV3WarehousesGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3WarehousesGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3WarehousesGetResponse) ProtoMessage() {}

func (x *ApiV3WarehousesGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3WarehousesGetResponse.ProtoReflect.Descriptor instead.
func (*ApiV3WarehousesGetResponse) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{34}
}

func (x *ApiV3WarehousesGetResponse) GetData() []*Warehouse {
	if x != nil {
		return x.Data
	}
	return nil
}

type ApiV3WarehousesPostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiV3WarehousesPostReq *ApiV3WarehousesPostReq `protobuf:"bytes,1,opt,name=apiV3WarehousesPostReq,proto3" json:"apiV3WarehousesPostReq,omitempty"`
}

func (x *ApiV3WarehousesPostRequest) Reset() {
	*x = ApiV3WarehousesPostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3WarehousesPostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3WarehousesPostRequest) ProtoMessage() {}

func (x *ApiV3WarehousesPostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3WarehousesPostRequest.ProtoReflect.Descriptor instead.
func (*ApiV3WarehousesPostRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{35}
}

func (x *ApiV3WarehousesPostRequest) GetApiV3WarehousesPostReq() *ApiV3WarehousesPostReq {
	if x != nil {
		return x.ApiV3WarehousesPostReq
	}
	return nil
}

type ApiV3WarehousesWarehouseIdDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID склада продавца
	WarehouseId int64 `protobuf:"varint,1,opt,name=warehouseId,proto3" json:"warehouseId,omitempty"`
}

func (x *ApiV3WarehousesWarehouseIdDeleteRequest) Reset() {
	*x = ApiV3WarehousesWarehouseIdDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3WarehousesWarehouseIdDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3WarehousesWarehouseIdDeleteRequest) ProtoMessage() {}

func (x *ApiV3WarehousesWarehouseIdDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3WarehousesWarehouseIdDeleteRequest.ProtoReflect.Descriptor instead.
func (*ApiV3WarehousesWarehouseIdDeleteRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{36}
}

func (x *ApiV3WarehousesWarehouseIdDeleteRequest) GetWarehouseId() int64 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

type ApiV3WarehousesWarehouseIdPutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID склада продавца
	WarehouseId                      int64                             `protobuf:"varint,1,opt,name=warehouseId,proto3" json:"warehouseId,omitempty"`
	ApiV3WarehousesWarehouseIdPutReq *ApiV3WarehousesWarehouseIdPutReq `protobuf:"bytes,2,opt,name=apiV3WarehousesWarehouseIdPutReq,proto3" json:"apiV3WarehousesWarehouseIdPutReq,omitempty"`
}

func (x *ApiV3WarehousesWarehouseIdPutRequest) Reset() {
	*x = ApiV3WarehousesWarehouseIdPutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wb_marketplace_v1_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiV3WarehousesWarehouseIdPutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiV3WarehousesWarehouseIdPutRequest) ProtoMessage() {}

func (x *ApiV3WarehousesWarehouseIdPutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wb_marketplace_v1_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiV3WarehousesWarehouseIdPutRequest.ProtoReflect.Descriptor instead.
func (*ApiV3WarehousesWarehouseIdPutRequest) Descriptor() ([]byte, []int) {
	return file_wb_marketplace_v1_service_proto_rawDescGZIP(), []int{37}
}

func (x *ApiV3WarehousesWarehouseIdPutRequest) GetWarehouseId() int64 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

func (x *ApiV3WarehousesWarehouseIdPutRequest) GetApiV3WarehousesWarehouseIdPutReq() *ApiV3WarehousesWarehouseIdPutReq {
	if x != nil {
		return x.ApiV3WarehousesWarehouseIdPutReq
	}
	return nil
}

var File_wb_marketplace_v1_service_proto protoreflect.FileDescriptor

var file_wb_marketplace_v1_service_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x4e, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x32,
	0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x35, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f,
	0x76, 0x33, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x67, 0x65,
	0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x43, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f,
	0x76, 0x33, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x67, 0x74, 0x69, 0x6e, 0x5f, 0x70, 0x75, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44,
	0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x69, 0x6d,
	0x65, 0x69, 0x5f, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x45, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x5f, 0x73, 0x67, 0x74, 0x69, 0x6e, 0x5f, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x43, 0x77, 0x62, 0x2f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x75, 0x69, 0x6e, 0x5f, 0x70,
	0x75, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x3d, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x32, 0x30, 0x30,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x39, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x77, 0x62, 0x2f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70,
	0x69, 0x5f, 0x76, 0x33, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x77, 0x62, 0x2f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x39, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f,
	0x76, 0x33, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x5f, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x32, 0x30, 0x31, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x77, 0x62, 0x2f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x41, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73,
	0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x43, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x73, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x5f, 0x70, 0x6f, 0x73, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76,
	0x33, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3e, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f,
	0x76, 0x33, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f,
	0x76, 0x33, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x32,
	0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x49, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x77, 0x62,
	0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f,
	0x70, 0x6f, 0x73, 0x74, 0x32, 0x30, 0x31, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x33,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x49, 0x77, 0x62,
	0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x48, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76,
	0x33, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x5f, 0x69, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x32,
	0x30, 0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x45, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x74,
	0x72, 0x62, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x46, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f,
	0x76, 0x33, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x72, 0x62, 0x78, 0x5f, 0x67, 0x65, 0x74, 0x32, 0x30,
	0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x47, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x72,
	0x62, 0x78, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x32, 0x30, 0x31, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x43, 0x77, 0x62, 0x2f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69,
	0x5f, 0x76, 0x33, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x72, 0x62, 0x78, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x50,
	0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x72, 0x62, 0x78,
	0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x32, 0x30,
	0x30, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x4c, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x72,
	0x62, 0x78, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4c,
	0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x72, 0x62, 0x78,
	0x5f, 0x74, 0x72, 0x62, 0x78, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x77, 0x62,
	0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x32, 0x30, 0x31, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f,
	0x76, 0x33, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x42, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x33, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x5f, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x23, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x01, 0x0a, 0x2b, 0x41, 0x70,
	0x69, 0x56, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6d, 0x0a, 0x1a, 0x61, 0x70, 0x69,
	0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x1a, 0x61, 0x70,
	0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x48, 0x0a, 0x17, 0x41, 0x70, 0x69, 0x56,
	0x33, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x75, 0x0a, 0x15, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x22, 0x40, 0x0a, 0x24, 0x41, 0x70, 0x69,
	0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x23, 0x41,
	0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x3c,
	0x0a, 0x20, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc1, 0x01, 0x0a,
	0x24, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x47, 0x74, 0x69, 0x6e, 0x50, 0x75, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x7f, 0x0a, 0x20, 0x61, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x47, 0x74, 0x69, 0x6e, 0x50, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x77, 0x62, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x4d, 0x65, 0x74, 0x61, 0x47, 0x74, 0x69, 0x6e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x52, 0x20,
	0x61, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x47, 0x74, 0x69, 0x6e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71,
	0x22, 0xc1, 0x01, 0x0a, 0x24, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6d, 0x65, 0x69, 0x50,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x7f, 0x0a, 0x20, 0x61, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6d, 0x65,
	0x69, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6d, 0x65, 0x69, 0x50, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x52, 0x20, 0x61, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6d, 0x65, 0x69, 0x50, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x22, 0xc6, 0x01, 0x0a, 0x25, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x53,
	0x67, 0x74, 0x69, 0x6e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x82, 0x01, 0x0a, 0x21, 0x61, 0x70, 0x69,
	0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x4d,
	0x65, 0x74, 0x61, 0x53, 0x67, 0x74, 0x69, 0x6e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x53,
	0x67, 0x74, 0x69, 0x6e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x52, 0x21, 0x61, 0x70, 0x69, 0x56,
	0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x65,
	0x74, 0x61, 0x53, 0x67, 0x74, 0x69, 0x6e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x22, 0xbd, 0x01,
	0x0a, 0x23, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x55, 0x69, 0x6e, 0x50, 0x75, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x7c, 0x0a, 0x1f, 0x61, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x55, 0x69, 0x6e, 0x50, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69,
	0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x4d,
	0x65, 0x74, 0x61, 0x55, 0x69, 0x6e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x52, 0x1f, 0x61, 0x70,
	0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x4d, 0x65, 0x74, 0x61, 0x55, 0x69, 0x6e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x22, 0x87, 0x01,
	0x0a, 0x1c, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67,
	0x0a, 0x18, 0x61, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x18, 0x61,
	0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0xd1, 0x01, 0x0a, 0x1e, 0x41, 0x70, 0x69, 0x56,
	0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x6d, 0x0a, 0x1a,
	0x61, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52,
	0x1a, 0x61, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x45, 0x0a, 0x16, 0x41,
	0x70, 0x69, 0x56, 0x33, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x52, 0x0a, 0x1d, 0x41, 0x70, 0x69, 0x56, 0x33, 0x50, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x38, 0x0a, 0x1e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x50,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x50, 0x61, 0x73, 0x73, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x49, 0x64,
	0x22, 0x9b, 0x01, 0x0a, 0x1b, 0x41, 0x70, 0x69, 0x56, 0x33, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x50, 0x61, 0x73, 0x73, 0x49, 0x64, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x17, 0x61, 0x70, 0x69, 0x56,
	0x33, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x50, 0x61, 0x73, 0x73, 0x49, 0x64, 0x50, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x62, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x69, 0x56, 0x33, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x50, 0x61, 0x73, 0x73, 0x49, 0x64, 0x50,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x52, 0x17, 0x61, 0x70, 0x69, 0x56, 0x33, 0x50, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x50, 0x61, 0x73, 0x73, 0x49, 0x64, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x22, 0x6f,
	0x0a, 0x16, 0x41, 0x70, 0x69, 0x56, 0x33, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x12, 0x61, 0x70, 0x69, 0x56,
	0x33, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x50, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x12, 0x61, 0x70, 0x69,
	0x56, 0x33, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22,
	0xc5, 0x01, 0x0a, 0x23, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x57,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x7c, 0x0a, 0x1f, 0x61, 0x70, 0x69,
	0x56, 0x33, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x73, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x52, 0x1f, 0x61, 0x70, 0x69, 0x56, 0x33, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x73, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x22, 0xbd, 0x01, 0x0a, 0x21, 0x41, 0x70, 0x69, 0x56,
	0x33, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x49, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x76, 0x0a, 0x1d, 0x61, 0x70, 0x69, 0x56, 0x33, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x57, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49,
	0x64, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x1d, 0x61, 0x70, 0x69, 0x56, 0x33, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x73, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0xb9, 0x01, 0x0a, 0x20, 0x41, 0x70, 0x69, 0x56,
	0x33, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x49, 0x64, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x73,
	0x0a, 0x1c, 0x61, 0x70, 0x69, 0x56, 0x33, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x57, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x73, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x50,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x52, 0x1c, 0x61, 0x70, 0x69, 0x56, 0x33, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x73, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x50, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x22, 0x43, 0x0a, 0x17, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x22, 0x77, 0x0a, 0x18, 0x41, 0x70, 0x69, 0x56,
	0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x14, 0x61, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x14, 0x61, 0x70, 0x69,
	0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x22, 0x58, 0x0a, 0x26, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x40, 0x0a, 0x22, 0x41,
	0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x22, 0x46, 0x0a,
	0x28, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x1f, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x25, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x2e, 0x41, 0x70, 0x69,
	0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x49, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xcc, 0x01, 0x0a, 0x26, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x54, 0x72, 0x62, 0x78, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x22, 0x61, 0x70, 0x69,
	0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x49, 0x64, 0x54, 0x72, 0x62, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x54,
	0x72, 0x62, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x52, 0x22, 0x61, 0x70,
	0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x49, 0x64, 0x54, 0x72, 0x62, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x22, 0x41, 0x0a, 0x23, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x54, 0x72, 0x62, 0x78, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x49, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x24, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x54, 0x72, 0x62,
	0x78, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x7f, 0x0a, 0x20, 0x61, 0x70, 0x69, 0x56,
	0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49,
	0x64, 0x54, 0x72, 0x62, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x54, 0x72, 0x62, 0x78,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x20, 0x61, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x54, 0x72,
	0x62, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0xf8, 0x01, 0x0a, 0x2c, 0x41, 0x70,
	0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x49, 0x64, 0x54, 0x72, 0x62, 0x78, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x28, 0x61,
	0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x49, 0x64, 0x54, 0x72, 0x62, 0x78, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x54, 0x72, 0x62, 0x78, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x52, 0x28, 0x61, 0x70, 0x69, 0x56,
	0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49,
	0x64, 0x54, 0x72, 0x62, 0x78, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x22, 0x89, 0x01, 0x0a, 0x39, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x54, 0x72,
	0x62, 0x78, 0x54, 0x72, 0x62, 0x78, 0x49, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x72, 0x62, 0x78, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x72, 0x62, 0x78, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xf8, 0x01, 0x0a, 0x2b, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x54, 0x72, 0x62, 0x78, 0x54, 0x72,
	0x62, 0x78, 0x49, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x72, 0x62, 0x78, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x72,
	0x62, 0x78, 0x49, 0x64, 0x12, 0x94, 0x01, 0x0a, 0x27, 0x61, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x54, 0x72,
	0x62, 0x78, 0x54, 0x72, 0x62, 0x78, 0x49, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64,
	0x54, 0x72, 0x62, 0x78, 0x54, 0x72, 0x62, 0x78, 0x49, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x52, 0x27, 0x61, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x54, 0x72, 0x62, 0x78, 0x54, 0x72, 0x62,
	0x78, 0x49, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x22, 0x4e, 0x0a, 0x1a, 0x41,
	0x70, 0x69, 0x56, 0x33, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7f, 0x0a, 0x1a, 0x41,
	0x70, 0x69, 0x56, 0x33, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x16, 0x61, 0x70, 0x69,
	0x56, 0x33, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x62, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x69, 0x56, 0x33, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x52, 0x16, 0x61, 0x70, 0x69, 0x56, 0x33, 0x57, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x22, 0x4b, 0x0a, 0x27,
	0x41, 0x70, 0x69, 0x56, 0x33, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x57,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x24, 0x41, 0x70,
	0x69, 0x56, 0x33, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x57, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x7f, 0x0a, 0x20, 0x61, 0x70, 0x69, 0x56, 0x33, 0x57, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x49, 0x64, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x73, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x50, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x52, 0x20, 0x61, 0x70, 0x69, 0x56, 0x33, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x73, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x50,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x32, 0x91, 0x26, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xaa, 0x01, 0x0a,
	0x24, 0x41, 0x70, 0x69, 0x56, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x3e, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x32, 0x30,
	0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x41, 0x70, 0x69,
	0x56, 0x33, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x73, 0x47, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2a, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x68, 0x0a, 0x0e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x47,
	0x65, 0x74, 0x12, 0x28, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x77,
	0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x32,
	0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x41, 0x70,
	0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4e, 0x65, 0x77, 0x47, 0x65, 0x74, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2f, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56,
	0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4e, 0x65, 0x77, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x1d, 0x41, 0x70, 0x69, 0x56,
	0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x37, 0x2e, 0x77, 0x62, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6e, 0x0a, 0x1c, 0x41, 0x70,
	0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x36, 0x2e, 0x77, 0x62, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x89, 0x01, 0x0a, 0x19, 0x41,
	0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x4d, 0x65, 0x74, 0x61, 0x47, 0x65, 0x74, 0x12, 0x33, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69,
	0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x4d,
	0x65, 0x74, 0x61, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x1d, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x65, 0x74, 0x61,
	0x47, 0x74, 0x69, 0x6e, 0x50, 0x75, 0x74, 0x12, 0x37, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56,
	0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x65,
	0x74, 0x61, 0x47, 0x74, 0x69, 0x6e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x70, 0x0a, 0x1d, 0x41, 0x70, 0x69, 0x56,
	0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x65,
	0x74, 0x61, 0x49, 0x6d, 0x65, 0x69, 0x50, 0x75, 0x74, 0x12, 0x37, 0x2e, 0x77, 0x62, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x4d, 0x65, 0x74, 0x61, 0x49, 0x6d, 0x65, 0x69, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x72, 0x0a, 0x1e, 0x41, 0x70,
	0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x4d, 0x65, 0x74, 0x61, 0x53, 0x67, 0x74, 0x69, 0x6e, 0x50, 0x75, 0x74, 0x12, 0x38, 0x2e, 0x77,
	0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x67, 0x74, 0x69, 0x6e, 0x50, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6e,
	0x0a, 0x1c, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x55, 0x69, 0x6e, 0x50, 0x75, 0x74, 0x12, 0x36,
	0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x55, 0x69, 0x6e, 0x50, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x7d,
	0x0a, 0x15, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56,
	0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69,
	0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x6f,
	0x73, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01,
	0x0a, 0x17, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x31, 0x2e, 0x77, 0x62, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x77,
	0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x50, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x47, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x29, 0x2e,
	0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x15, 0x41, 0x70, 0x69, 0x56,
	0x33, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x73, 0x47, 0x65,
	0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e, 0x77, 0x62, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x69, 0x56, 0x33, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x73,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x17, 0x41,
	0x70, 0x69, 0x56, 0x33, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x50, 0x61, 0x73, 0x73, 0x49, 0x64,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33,
	0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x50, 0x61, 0x73, 0x73, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x5e, 0x0a, 0x14, 0x41, 0x70, 0x69, 0x56, 0x33, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x50, 0x61, 0x73, 0x73, 0x49, 0x64, 0x50, 0x75, 0x74, 0x12, 0x2e, 0x2e, 0x77, 0x62, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x69, 0x56, 0x33, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x50, 0x61, 0x73, 0x73, 0x49, 0x64, 0x50,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x6b, 0x0a, 0x0f, 0x41, 0x70, 0x69, 0x56, 0x33, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x50, 0x6f, 0x73, 0x74, 0x12, 0x29, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x50, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x50,
	0x6f, 0x73, 0x74, 0x32, 0x30, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e,
	0x0a, 0x1c, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x57, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x36,
	0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x57, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x8c,
	0x01, 0x0a, 0x1a, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x57, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x34, 0x2e,
	0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x57, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x73, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x50, 0x6f,
	0x73, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a,
	0x19, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x57, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x50, 0x75, 0x74, 0x12, 0x33, 0x2e, 0x77, 0x62, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x69, 0x56, 0x33, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x49, 0x64, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6e, 0x0a, 0x10, 0x41, 0x70, 0x69, 0x56, 0x33,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x47, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x77, 0x62,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56,
	0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x20, 0x41, 0x70, 0x69, 0x56, 0x33,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x3e, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x11, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69,
	0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x32, 0x30, 0x31, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x1f, 0x41, 0x70, 0x69, 0x56, 0x33,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64,
	0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x74, 0x12, 0x39, 0x2e, 0x77, 0x62, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x49, 0x64, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x42,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x1b, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x35, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x78, 0x0a, 0x21, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3b, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56,
	0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49,
	0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x69, 0x0a, 0x18,
	0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x49, 0x64, 0x47, 0x65, 0x74, 0x12, 0x32, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69,
	0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x49, 0x64, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x77,
	0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x98, 0x01, 0x0a, 0x1e, 0x41, 0x70, 0x69, 0x56,
	0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x12, 0x38, 0x2e, 0x77, 0x62, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x49, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x27, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x41,
	0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x74, 0x0a, 0x1f, 0x41, 0x70, 0x69,
	0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x49, 0x64, 0x54, 0x72, 0x62, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x39, 0x2e, 0x77,
	0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x54, 0x72, 0x62, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x92, 0x01, 0x0a, 0x1c, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x54, 0x72, 0x62, 0x78, 0x47, 0x65, 0x74,
	0x12, 0x36, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x54, 0x72, 0x62, 0x78, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69,
	0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x49, 0x64, 0x54, 0x72, 0x62, 0x78, 0x47, 0x65, 0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x1d, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x54, 0x72,
	0x62, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x37, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64,
	0x54, 0x72, 0x62, 0x78, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x54, 0x72, 0x62, 0x78, 0x50, 0x6f, 0x73,
	0x74, 0x32, 0x30, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xad, 0x01, 0x0a,
	0x25, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x54, 0x72, 0x62, 0x78, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x3f, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64,
	0x54, 0x72, 0x62, 0x78, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56,
	0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49,
	0x64, 0x54, 0x72, 0x62, 0x78, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x50, 0x6f, 0x73,
	0x74, 0x32, 0x30, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x9a, 0x01, 0x0a,
	0x32, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x54, 0x72, 0x62, 0x78, 0x54, 0x72, 0x62, 0x78, 0x49, 0x64,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x4c, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x54, 0x72, 0x62,
	0x78, 0x54, 0x72, 0x62, 0x78, 0x49, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x7e, 0x0a, 0x24, 0x41, 0x70, 0x69,
	0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x49, 0x64, 0x54, 0x72, 0x62, 0x78, 0x54, 0x72, 0x62, 0x78, 0x49, 0x64, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x3e, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x53, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x54, 0x72, 0x62, 0x78, 0x54,
	0x72, 0x62, 0x78, 0x49, 0x64, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x12, 0x41, 0x70, 0x69,
	0x56, 0x33, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x47, 0x65, 0x74, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2d, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56,
	0x33, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x13, 0x41, 0x70, 0x69, 0x56, 0x33, 0x57,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x2d, 0x2e,
	0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x73, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x77,
	0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73,
	0x50, 0x6f, 0x73, 0x74, 0x32, 0x30, 0x31, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x76, 0x0a, 0x20, 0x41, 0x70, 0x69, 0x56, 0x33, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x73, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x3a, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x56, 0x33, 0x57, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x49, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x70, 0x0a, 0x1d, 0x41, 0x70, 0x69, 0x56, 0x33,
	0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x49, 0x64, 0x50, 0x75, 0x74, 0x12, 0x37, 0x2e, 0x77, 0x62, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69,
	0x56, 0x33, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x73, 0x57, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x4a, 0x5a, 0x48, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x49,
	0x4f, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x77, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x77, 0x62, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wb_marketplace_v1_service_proto_rawDescOnce sync.Once
	file_wb_marketplace_v1_service_proto_rawDescData = file_wb_marketplace_v1_service_proto_rawDesc
)

func file_wb_marketplace_v1_service_proto_rawDescGZIP() []byte {
	file_wb_marketplace_v1_service_proto_rawDescOnce.Do(func() {
		file_wb_marketplace_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_wb_marketplace_v1_service_proto_rawDescData)
	})
	return file_wb_marketplace_v1_service_proto_rawDescData
}

var file_wb_marketplace_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_wb_marketplace_v1_service_proto_goTypes = []interface{}{
	(*ApiV3FilesOrdersExternalStickersPostRequest)(nil),               // 0: wb.marketplace.v1.ApiV3FilesOrdersExternalStickersPostRequest
	(*ApiV3OfficesGetResponse)(nil),                                   // 1: wb.marketplace.v1.ApiV3OfficesGetResponse
	(*ApiV3OrdersGetRequest)(nil),                                     // 2: wb.marketplace.v1.ApiV3OrdersGetRequest
	(*ApiV3OrdersOrderIdCancelPatchRequest)(nil),                      // 3: wb.marketplace.v1.ApiV3OrdersOrderIdCancelPatchRequest
	(*ApiV3OrdersOrderIdMetaDeleteRequest)(nil),                       // 4: wb.marketplace.v1.ApiV3OrdersOrderIdMetaDeleteRequest
	(*ApiV3OrdersOrderIdMetaGetRequest)(nil),                          // 5: wb.marketplace.v1.ApiV3OrdersOrderIdMetaGetRequest
	(*ApiV3OrdersOrderIdMetaGtinPutRequest)(nil),                      // 6: wb.marketplace.v1.ApiV3OrdersOrderIdMetaGtinPutRequest
	(*ApiV3OrdersOrderIdMetaImeiPutRequest)(nil),                      // 7: wb.marketplace.v1.ApiV3OrdersOrderIdMetaImeiPutRequest
	(*ApiV3OrdersOrderIdMetaSgtinPutRequest)(nil),                     // 8: wb.marketplace.v1.ApiV3OrdersOrderIdMetaSgtinPutRequest
	(*ApiV3OrdersOrderIdMetaUinPutRequest)(nil),                       // 9: wb.marketplace.v1.ApiV3OrdersOrderIdMetaUinPutRequest
	(*ApiV3OrdersStatusPostRequest)(nil),                              // 10: wb.marketplace.v1.ApiV3OrdersStatusPostRequest
	(*ApiV3OrdersStickersPostRequest)(nil),                            // 11: wb.marketplace.v1.ApiV3OrdersStickersPostRequest
	(*ApiV3PassesGetResponse)(nil),                                    // 12: wb.marketplace.v1.ApiV3PassesGetResponse
	(*ApiV3PassesOfficesGetResponse)(nil),                             // 13: wb.marketplace.v1.ApiV3PassesOfficesGetResponse
	(*ApiV3PassesPassIdDeleteRequest)(nil),                            // 14: wb.marketplace.v1.ApiV3PassesPassIdDeleteRequest
	(*ApiV3PassesPassIdPutRequest)(nil),                               // 15: wb.marketplace.v1.ApiV3PassesPassIdPutRequest
	(*ApiV3PassesPostRequest)(nil),                                    // 16: wb.marketplace.v1.ApiV3PassesPostRequest
	(*ApiV3StocksWarehouseIdDeleteRequest)(nil),                       // 17: wb.marketplace.v1.ApiV3StocksWarehouseIdDeleteRequest
	(*ApiV3StocksWarehouseIdPostRequest)(nil),                         // 18: wb.marketplace.v1.ApiV3StocksWarehouseIdPostRequest
	(*ApiV3StocksWarehouseIdPutRequest)(nil),                          // 19: wb.marketplace.v1.ApiV3StocksWarehouseIdPutRequest
	(*ApiV3SuppliesGetRequest)(nil),                                   // 20: wb.marketplace.v1.ApiV3SuppliesGetRequest
	(*ApiV3SuppliesPostRequest)(nil),                                  // 21: wb.marketplace.v1.ApiV3SuppliesPostRequest
	(*ApiV3SuppliesSupplyIdBarcodeGetRequest)(nil),                    // 22: wb.marketplace.v1.ApiV3SuppliesSupplyIdBarcodeGetRequest
	(*ApiV3SuppliesSupplyIdDeleteRequest)(nil),                        // 23: wb.marketplace.v1.ApiV3SuppliesSupplyIdDeleteRequest
	(*ApiV3SuppliesSupplyIdDeliverPatchRequest)(nil),                  // 24: wb.marketplace.v1.ApiV3SuppliesSupplyIdDeliverPatchRequest
	(*ApiV3SuppliesSupplyIdGetRequest)(nil),                           // 25: wb.marketplace.v1.ApiV3SuppliesSupplyIdGetRequest
	(*ApiV3SuppliesSupplyIdOrdersGetRequest)(nil),                     // 26: wb.marketplace.v1.ApiV3SuppliesSupplyIdOrdersGetRequest
	(*ApiV3SuppliesSupplyIdOrdersOrderIdPatchRequest)(nil),            // 27: wb.marketplace.v1.ApiV3SuppliesSupplyIdOrdersOrderIdPatchRequest
	(*ApiV3SuppliesSupplyIdTrbxDeleteRequest)(nil),                    // 28: wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxDeleteRequest
	(*ApiV3SuppliesSupplyIdTrbxGetRequest)(nil),                       // 29: wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxGetRequest
	(*ApiV3SuppliesSupplyIdTrbxPostRequest)(nil),                      // 30: wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxPostRequest
	(*ApiV3SuppliesSupplyIdTrbxStickersPostRequest)(nil),              // 31: wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxStickersPostRequest
	(*ApiV3SuppliesSupplyIdTrbxTrbxIdOrdersOrderIdDeleteRequest)(nil), // 32: wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxTrbxIdOrdersOrderIdDeleteRequest
	(*ApiV3SuppliesSupplyIdTrbxTrbxIdPatchRequest)(nil),               // 33: wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxTrbxIdPatchRequest
	(*ApiV3WarehousesGetResponse)(nil),                                // 34: wb.marketplace.v1.ApiV3WarehousesGetResponse
	(*ApiV3WarehousesPostRequest)(nil),                                // 35: wb.marketplace.v1.ApiV3WarehousesPostRequest
	(*ApiV3WarehousesWarehouseIdDeleteRequest)(nil),                   // 36: wb.marketplace.v1.ApiV3WarehousesWarehouseIdDeleteRequest
	(*ApiV3WarehousesWarehouseIdPutRequest)(nil),                      // 37: wb.marketplace.v1.ApiV3WarehousesWarehouseIdPutRequest
	(*ApiV3OrdersStickersPostReq)(nil),                                // 38: wb.marketplace.v1.ApiV3OrdersStickersPostReq
	(*Office)(nil),                                                    // 39: wb.marketplace.v1.Office
	(*ApiV3OrdersOrderIdMetaGtinPutReq)(nil),                          // 40: wb.marketplace.v1.ApiV3OrdersOrderIdMetaGtinPutReq
	(*ApiV3OrdersOrderIdMetaImeiPutReq)(nil),                          // 41: wb.marketplace.v1.ApiV3OrdersOrderIdMetaImeiPutReq
	(*ApiV3OrdersOrderIdMetaSgtinPutReq)(nil),                         // 42: wb.marketplace.v1.ApiV3OrdersOrderIdMetaSgtinPutReq
	(*ApiV3OrdersOrderIdMetaUinPutReq)(nil),                           // 43: wb.marketplace.v1.ApiV3OrdersOrderIdMetaUinPutReq
	(*ApiV3OrdersStatusPostReq)(nil),                                  // 44: wb.marketplace.v1.ApiV3OrdersStatusPostReq
	(*Pass)(nil),                                                      // 45: wb.marketplace.v1.Pass
	(*PassOffice)(nil),                                                // 46: wb.marketplace.v1.PassOffice
	(*ApiV3PassesPassIdPutReq)(nil),                                   // 47: wb.marketplace.v1.ApiV3PassesPassIdPutReq
	(*ApiV3PassesPostReq)(nil),                                        // 48: wb.marketplace.v1.ApiV3PassesPostReq
	(*ApiV3StocksWarehouseIdDeleteReq)(nil),                           // 49: wb.marketplace.v1.ApiV3StocksWarehouseIdDeleteReq
	(*ApiV3StocksWarehouseIdPostReq)(nil),                             // 50: wb.marketplace.v1.ApiV3StocksWarehouseIdPostReq
	(*ApiV3StocksWarehouseIdPutReq)(nil),                              // 51: wb.marketplace.v1.ApiV3StocksWarehouseIdPutReq
	(*ApiV3SuppliesPostReq)(nil),                                      // 52: wb.marketplace.v1.ApiV3SuppliesPostReq
	(*ApiV3SuppliesSupplyIdTrbxDeleteReq)(nil),                        // 53: wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxDeleteReq
	(*ApiV3SuppliesSupplyIdTrbxPostReq)(nil),                          // 54: wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxPostReq
	(*ApiV3SuppliesSupplyIdTrbxStickersPostReq)(nil),                  // 55: wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxStickersPostReq
	(*ApiV3SuppliesSupplyIdTrbxTrbxIdPatchReq)(nil),                   // 56: wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxTrbxIdPatchReq
	(*Warehouse)(nil),                                                 // 57: wb.marketplace.v1.Warehouse
	(*ApiV3WarehousesPostReq)(nil),                                    // 58: wb.marketplace.v1.ApiV3WarehousesPostReq
	(*ApiV3WarehousesWarehouseIdPutReq)(nil),                          // 59: wb.marketplace.v1.ApiV3WarehousesWarehouseIdPutReq
	(*emptypb.Empty)(nil),                                             // 60: google.protobuf.Empty
	(*ApiV3FilesOrdersExternalStickersPost200Response)(nil),           // 61: wb.marketplace.v1.ApiV3FilesOrdersExternalStickersPost200Response
	(*ApiV3OrdersGet200Response)(nil),                                 // 62: wb.marketplace.v1.ApiV3OrdersGet200Response
	(*ApiV3OrdersNewGet200Response)(nil),                              // 63: wb.marketplace.v1.ApiV3OrdersNewGet200Response
	(*ApiV3OrdersOrderIdMetaGet200Response)(nil),                      // 64: wb.marketplace.v1.ApiV3OrdersOrderIdMetaGet200Response
	(*ApiV3OrdersStatusPost200Response)(nil),                          // 65: wb.marketplace.v1.ApiV3OrdersStatusPost200Response
	(*ApiV3OrdersStickersPost200Response)(nil),                        // 66: wb.marketplace.v1.ApiV3OrdersStickersPost200Response
	(*ApiV3PassesPost201Response)(nil),                                // 67: wb.marketplace.v1.ApiV3PassesPost201Response
	(*ApiV3StocksWarehouseIdPost200Response)(nil),                     // 68: wb.marketplace.v1.ApiV3StocksWarehouseIdPost200Response
	(*ApiV3SuppliesGet200Response)(nil),                               // 69: wb.marketplace.v1.ApiV3SuppliesGet200Response
	(*ApiV3SuppliesOrdersReshipmentGet200Response)(nil),               // 70: wb.marketplace.v1.ApiV3SuppliesOrdersReshipmentGet200Response
	(*ApiV3SuppliesPost201Response)(nil),                              // 71: wb.marketplace.v1.ApiV3SuppliesPost201Response
	(*ApiV3SuppliesSupplyIdBarcodeGet200Response)(nil),                // 72: wb.marketplace.v1.ApiV3SuppliesSupplyIdBarcodeGet200Response
	(*Supply)(nil), // 73: wb.marketplace.v1.Supply
	(*ApiV3SuppliesSupplyIdOrdersGet200Response)(nil),        // 74: wb.marketplace.v1.ApiV3SuppliesSupplyIdOrdersGet200Response
	(*ApiV3SuppliesSupplyIdTrbxGet200Response)(nil),          // 75: wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxGet200Response
	(*ApiV3SuppliesSupplyIdTrbxPost201Response)(nil),         // 76: wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxPost201Response
	(*ApiV3SuppliesSupplyIdTrbxStickersPost200Response)(nil), // 77: wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxStickersPost200Response
	(*ApiV3WarehousesPost201Response)(nil),                   // 78: wb.marketplace.v1.ApiV3WarehousesPost201Response
}
var file_wb_marketplace_v1_service_proto_depIdxs = []int32{
	38, // 0: wb.marketplace.v1.ApiV3FilesOrdersExternalStickersPostRequest.apiV3OrdersStickersPostReq:type_name -> wb.marketplace.v1.ApiV3OrdersStickersPostReq
	39, // 1: wb.marketplace.v1.ApiV3OfficesGetResponse.data:type_name -> wb.marketplace.v1.Office
	40, // 2: wb.marketplace.v1.ApiV3OrdersOrderIdMetaGtinPutRequest.apiV3OrdersOrderIdMetaGtinPutReq:type_name -> wb.marketplace.v1.ApiV3OrdersOrderIdMetaGtinPutReq
	41, // 3: wb.marketplace.v1.ApiV3OrdersOrderIdMetaImeiPutRequest.apiV3OrdersOrderIdMetaImeiPutReq:type_name -> wb.marketplace.v1.ApiV3OrdersOrderIdMetaImeiPutReq
	42, // 4: wb.marketplace.v1.ApiV3OrdersOrderIdMetaSgtinPutRequest.apiV3OrdersOrderIdMetaSgtinPutReq:type_name -> wb.marketplace.v1.ApiV3OrdersOrderIdMetaSgtinPutReq
	43, // 5: wb.marketplace.v1.ApiV3OrdersOrderIdMetaUinPutRequest.apiV3OrdersOrderIdMetaUinPutReq:type_name -> wb.marketplace.v1.ApiV3OrdersOrderIdMetaUinPutReq
	44, // 6: wb.marketplace.v1.ApiV3OrdersStatusPostRequest.apiV3OrdersStatusPostReq:type_name -> wb.marketplace.v1.ApiV3OrdersStatusPostReq
	38, // 7: wb.marketplace.v1.ApiV3OrdersStickersPostRequest.apiV3OrdersStickersPostReq:type_name -> wb.marketplace.v1.ApiV3OrdersStickersPostReq
	45, // 8: wb.marketplace.v1.ApiV3PassesGetResponse.data:type_name -> wb.marketplace.v1.Pass
	46, // 9: wb.marketplace.v1.ApiV3PassesOfficesGetResponse.data:type_name -> wb.marketplace.v1.PassOffice
	47, // 10: wb.marketplace.v1.ApiV3PassesPassIdPutRequest.apiV3PassesPassIdPutReq:type_name -> wb.marketplace.v1.ApiV3PassesPassIdPutReq
	48, // 11: wb.marketplace.v1.ApiV3PassesPostRequest.apiV3PassesPostReq:type_name -> wb.marketplace.v1.ApiV3PassesPostReq
	49, // 12: wb.marketplace.v1.ApiV3StocksWarehouseIdDeleteRequest.apiV3StocksWarehouseIdDeleteReq:type_name -> wb.marketplace.v1.ApiV3StocksWarehouseIdDeleteReq
	50, // 13: wb.marketplace.v1.ApiV3StocksWarehouseIdPostRequest.apiV3StocksWarehouseIdPostReq:type_name -> wb.marketplace.v1.ApiV3StocksWarehouseIdPostReq
	51, // 14: wb.marketplace.v1.ApiV3StocksWarehouseIdPutRequest.apiV3StocksWarehouseIdPutReq:type_name -> wb.marketplace.v1.ApiV3StocksWarehouseIdPutReq
	52, // 15: wb.marketplace.v1.ApiV3SuppliesPostRequest.apiV3SuppliesPostReq:type_name -> wb.marketplace.v1.ApiV3SuppliesPostReq
	53, // 16: wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxDeleteRequest.apiV3SuppliesSupplyIdTrbxDeleteReq:type_name -> wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxDeleteReq
	54, // 17: wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxPostRequest.apiV3SuppliesSupplyIdTrbxPostReq:type_name -> wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxPostReq
	55, // 18: wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxStickersPostRequest.apiV3SuppliesSupplyIdTrbxStickersPostReq:type_name -> wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxStickersPostReq
	56, // 19: wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxTrbxIdPatchRequest.apiV3SuppliesSupplyIdTrbxTrbxIdPatchReq:type_name -> wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxTrbxIdPatchReq
	57, // 20: wb.marketplace.v1.ApiV3WarehousesGetResponse.data:type_name -> wb.marketplace.v1.Warehouse
	58, // 21: wb.marketplace.v1.ApiV3WarehousesPostRequest.apiV3WarehousesPostReq:type_name -> wb.marketplace.v1.ApiV3WarehousesPostReq
	59, // 22: wb.marketplace.v1.ApiV3WarehousesWarehouseIdPutRequest.apiV3WarehousesWarehouseIdPutReq:type_name -> wb.marketplace.v1.ApiV3WarehousesWarehouseIdPutReq
	0,  // 23: wb.marketplace.v1.MarketplaceService.ApiV3FilesOrdersExternalStickersPost:input_type -> wb.marketplace.v1.ApiV3FilesOrdersExternalStickersPostRequest
	60, // 24: wb.marketplace.v1.MarketplaceService.ApiV3OfficesGet:input_type -> google.protobuf.Empty
	2,  // 25: wb.marketplace.v1.MarketplaceService.ApiV3OrdersGet:input_type -> wb.marketplace.v1.ApiV3OrdersGetRequest
	60, // 26: wb.marketplace.v1.MarketplaceService.ApiV3OrdersNewGet:input_type -> google.protobuf.Empty
	3,  // 27: wb.marketplace.v1.MarketplaceService.ApiV3OrdersOrderIdCancelPatch:input_type -> wb.marketplace.v1.ApiV3OrdersOrderIdCancelPatchRequest
	4,  // 28: wb.marketplace.v1.MarketplaceService.ApiV3OrdersOrderIdMetaDelete:input_type -> wb.marketplace.v1.ApiV3OrdersOrderIdMetaDeleteRequest
	5,  // 29: wb.marketplace.v1.MarketplaceService.ApiV3OrdersOrderIdMetaGet:input_type -> wb.marketplace.v1.ApiV3OrdersOrderIdMetaGetRequest
	6,  // 30: wb.marketplace.v1.MarketplaceService.ApiV3OrdersOrderIdMetaGtinPut:input_type -> wb.marketplace.v1.ApiV3OrdersOrderIdMetaGtinPutRequest
	7,  // 31: wb.marketplace.v1.MarketplaceService.ApiV3OrdersOrderIdMetaImeiPut:input_type -> wb.marketplace.v1.ApiV3OrdersOrderIdMetaImeiPutRequest
	8,  // 32: wb.marketplace.v1.MarketplaceService.ApiV3OrdersOrderIdMetaSgtinPut:input_type -> wb.marketplace.v1.ApiV3OrdersOrderIdMetaSgtinPutRequest
	9,  // 33: wb.marketplace.v1.MarketplaceService.ApiV3OrdersOrderIdMetaUinPut:input_type -> wb.marketplace.v1.ApiV3OrdersOrderIdMetaUinPutRequest
	10, // 34: wb.marketplace.v1.MarketplaceService.ApiV3OrdersStatusPost:input_type -> wb.marketplace.v1.ApiV3OrdersStatusPostRequest
	11, // 35: wb.marketplace.v1.MarketplaceService.ApiV3OrdersStickersPost:input_type -> wb.marketplace.v1.ApiV3OrdersStickersPostRequest
	60, // 36: wb.marketplace.v1.MarketplaceService.ApiV3PassesGet:input_type -> google.protobuf.Empty
	60, // 37: wb.marketplace.v1.MarketplaceService.ApiV3PassesOfficesGet:input_type -> google.protobuf.Empty
	14, // 38: wb.marketplace.v1.MarketplaceService.ApiV3PassesPassIdDelete:input_type -> wb.marketplace.v1.ApiV3PassesPassIdDeleteRequest
	15, // 39: wb.marketplace.v1.MarketplaceService.ApiV3PassesPassIdPut:input_type -> wb.marketplace.v1.ApiV3PassesPassIdPutRequest
	16, // 40: wb.marketplace.v1.MarketplaceService.ApiV3PassesPost:input_type -> wb.marketplace.v1.ApiV3PassesPostRequest
	17, // 41: wb.marketplace.v1.MarketplaceService.ApiV3StocksWarehouseIdDelete:input_type -> wb.marketplace.v1.ApiV3StocksWarehouseIdDeleteRequest
	18, // 42: wb.marketplace.v1.MarketplaceService.ApiV3StocksWarehouseIdPost:input_type -> wb.marketplace.v1.ApiV3StocksWarehouseIdPostRequest
	19, // 43: wb.marketplace.v1.MarketplaceService.ApiV3StocksWarehouseIdPut:input_type -> wb.marketplace.v1.ApiV3StocksWarehouseIdPutRequest
	20, // 44: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesGet:input_type -> wb.marketplace.v1.ApiV3SuppliesGetRequest
	60, // 45: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesOrdersReshipmentGet:input_type -> google.protobuf.Empty
	21, // 46: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesPost:input_type -> wb.marketplace.v1.ApiV3SuppliesPostRequest
	22, // 47: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdBarcodeGet:input_type -> wb.marketplace.v1.ApiV3SuppliesSupplyIdBarcodeGetRequest
	23, // 48: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdDelete:input_type -> wb.marketplace.v1.ApiV3SuppliesSupplyIdDeleteRequest
	24, // 49: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdDeliverPatch:input_type -> wb.marketplace.v1.ApiV3SuppliesSupplyIdDeliverPatchRequest
	25, // 50: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdGet:input_type -> wb.marketplace.v1.ApiV3SuppliesSupplyIdGetRequest
	26, // 51: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdOrdersGet:input_type -> wb.marketplace.v1.ApiV3SuppliesSupplyIdOrdersGetRequest
	27, // 52: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdOrdersOrderIdPatch:input_type -> wb.marketplace.v1.ApiV3SuppliesSupplyIdOrdersOrderIdPatchRequest
	28, // 53: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdTrbxDelete:input_type -> wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxDeleteRequest
	29, // 54: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdTrbxGet:input_type -> wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxGetRequest
	30, // 55: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdTrbxPost:input_type -> wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxPostRequest
	31, // 56: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdTrbxStickersPost:input_type -> wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxStickersPostRequest
	32, // 57: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdTrbxTrbxIdOrdersOrderIdDelete:input_type -> wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxTrbxIdOrdersOrderIdDeleteRequest
	33, // 58: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdTrbxTrbxIdPatch:input_type -> wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxTrbxIdPatchRequest
	60, // 59: wb.marketplace.v1.MarketplaceService.ApiV3WarehousesGet:input_type -> google.protobuf.Empty
	35, // 60: wb.marketplace.v1.MarketplaceService.ApiV3WarehousesPost:input_type -> wb.marketplace.v1.ApiV3WarehousesPostRequest
	36, // 61: wb.marketplace.v1.MarketplaceService.ApiV3WarehousesWarehouseIdDelete:input_type -> wb.marketplace.v1.ApiV3WarehousesWarehouseIdDeleteRequest
	37, // 62: wb.marketplace.v1.MarketplaceService.ApiV3WarehousesWarehouseIdPut:input_type -> wb.marketplace.v1.ApiV3WarehousesWarehouseIdPutRequest
	61, // 63: wb.marketplace.v1.MarketplaceService.ApiV3FilesOrdersExternalStickersPost:output_type -> wb.marketplace.v1.ApiV3FilesOrdersExternalStickersPost200Response
	1,  // 64: wb.marketplace.v1.MarketplaceService.ApiV3OfficesGet:output_type -> wb.marketplace.v1.ApiV3OfficesGetResponse
	62, // 65: wb.marketplace.v1.MarketplaceService.ApiV3OrdersGet:output_type -> wb.marketplace.v1.ApiV3OrdersGet200Response
	63, // 66: wb.marketplace.v1.MarketplaceService.ApiV3OrdersNewGet:output_type -> wb.marketplace.v1.ApiV3OrdersNewGet200Response
	60, // 67: wb.marketplace.v1.MarketplaceService.ApiV3OrdersOrderIdCancelPatch:output_type -> google.protobuf.Empty
	60, // 68: wb.marketplace.v1.MarketplaceService.ApiV3OrdersOrderIdMetaDelete:output_type -> google.protobuf.Empty
	64, // 69: wb.marketplace.v1.MarketplaceService.ApiV3OrdersOrderIdMetaGet:output_type -> wb.marketplace.v1.ApiV3OrdersOrderIdMetaGet200Response
	60, // 70: wb.marketplace.v1.MarketplaceService.ApiV3OrdersOrderIdMetaGtinPut:output_type -> google.protobuf.Empty
	60, // 71: wb.marketplace.v1.MarketplaceService.ApiV3OrdersOrderIdMetaImeiPut:output_type -> google.protobuf.Empty
	60, // 72: wb.marketplace.v1.MarketplaceService.ApiV3OrdersOrderIdMetaSgtinPut:output_type -> google.protobuf.Empty
	60, // 73: wb.marketplace.v1.MarketplaceService.ApiV3OrdersOrderIdMetaUinPut:output_type -> google.protobuf.Empty
	65, // 74: wb.marketplace.v1.MarketplaceService.ApiV3OrdersStatusPost:output_type -> wb.marketplace.v1.ApiV3OrdersStatusPost200Response
	66, // 75: wb.marketplace.v1.MarketplaceService.ApiV3OrdersStickersPost:output_type -> wb.marketplace.v1.ApiV3OrdersStickersPost200Response
	12, // 76: wb.marketplace.v1.MarketplaceService.ApiV3PassesGet:output_type -> wb.marketplace.v1.ApiV3PassesGetResponse
	13, // 77: wb.marketplace.v1.MarketplaceService.ApiV3PassesOfficesGet:output_type -> wb.marketplace.v1.ApiV3PassesOfficesGetResponse
	60, // 78: wb.marketplace.v1.MarketplaceService.ApiV3PassesPassIdDelete:output_type -> google.protobuf.Empty
	60, // 79: wb.marketplace.v1.MarketplaceService.ApiV3PassesPassIdPut:output_type -> google.protobuf.Empty
	67, // 80: wb.marketplace.v1.MarketplaceService.ApiV3PassesPost:output_type -> wb.marketplace.v1.ApiV3PassesPost201Response
	60, // 81: wb.marketplace.v1.MarketplaceService.ApiV3StocksWarehouseIdDelete:output_type -> google.protobuf.Empty
	68, // 82: wb.marketplace.v1.MarketplaceService.ApiV3StocksWarehouseIdPost:output_type -> wb.marketplace.v1.ApiV3StocksWarehouseIdPost200Response
	60, // 83: wb.marketplace.v1.MarketplaceService.ApiV3StocksWarehouseIdPut:output_type -> google.protobuf.Empty
	69, // 84: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesGet:output_type -> wb.marketplace.v1.ApiV3SuppliesGet200Response
	70, // 85: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesOrdersReshipmentGet:output_type -> wb.marketplace.v1.ApiV3SuppliesOrdersReshipmentGet200Response
	71, // 86: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesPost:output_type -> wb.marketplace.v1.ApiV3SuppliesPost201Response
	72, // 87: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdBarcodeGet:output_type -> wb.marketplace.v1.ApiV3SuppliesSupplyIdBarcodeGet200Response
	60, // 88: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdDelete:output_type -> google.protobuf.Empty
	60, // 89: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdDeliverPatch:output_type -> google.protobuf.Empty
	73, // 90: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdGet:output_type -> wb.marketplace.v1.Supply
	74, // 91: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdOrdersGet:output_type -> wb.marketplace.v1.ApiV3SuppliesSupplyIdOrdersGet200Response
	60, // 92: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdOrdersOrderIdPatch:output_type -> google.protobuf.Empty
	60, // 93: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdTrbxDelete:output_type -> google.protobuf.Empty
	75, // 94: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdTrbxGet:output_type -> wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxGet200Response
	76, // 95: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdTrbxPost:output_type -> wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxPost201Response
	77, // 96: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdTrbxStickersPost:output_type -> wb.marketplace.v1.ApiV3SuppliesSupplyIdTrbxStickersPost200Response
	60, // 97: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdTrbxTrbxIdOrdersOrderIdDelete:output_type -> google.protobuf.Empty
	60, // 98: wb.marketplace.v1.MarketplaceService.ApiV3SuppliesSupplyIdTrbxTrbxIdPatch:output_type -> google.protobuf.Empty
	34, // 99: wb.marketplace.v1.MarketplaceService.ApiV3WarehousesGet:output_type -> wb.marketplace.v1.ApiV3WarehousesGetResponse
	78, // 100: wb.marketplace.v1.MarketplaceService.ApiV3WarehousesPost:output_type -> wb.marketplace.v1.ApiV3WarehousesPost201Response
	60, // 101: wb.marketplace.v1.MarketplaceService.ApiV3WarehousesWarehouseIdDelete:output_type -> google.protobuf.Empty
	60, // 102: wb.marketplace.v1.MarketplaceService.ApiV3WarehousesWarehouseIdPut:output_type -> google.protobuf.Empty
	63, // [63:103] is the sub-list for method output_type
	23, // [23:63] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_wb_marketplace_v1_service_proto_init() }
func file_wb_marketplace_v1_service_proto_init() {
	if File_wb_marketplace_v1_service_proto != nil {
		return
	}
	file_wb_marketplace_v1_api_v3_files_orders_external_stickers_post200_response_proto_init()
	file_wb_marketplace_v1_api_v3_orders_get200_response_proto_init()
	file_wb_marketplace_v1_api_v3_orders_new_get200_response_proto_init()
	file_wb_marketplace_v1_api_v3_orders_order_id_meta_get200_response_proto_init()
	file_wb_marketplace_v1_api_v3_orders_order_id_meta_gtin_put_request_proto_init()
	file_wb_marketplace_v1_api_v3_orders_order_id_meta_imei_put_request_proto_init()
	file_wb_marketplace_v1_api_v3_orders_order_id_meta_sgtin_put_request_proto_init()
	file_wb_marketplace_v1_api_v3_orders_order_id_meta_uin_put_request_proto_init()
	file_wb_marketplace_v1_api_v3_orders_status_post200_response_proto_init()
	file_wb_marketplace_v1_api_v3_orders_status_post_request_proto_init()
	file_wb_marketplace_v1_api_v3_orders_stickers_post200_response_proto_init()
	file_wb_marketplace_v1_api_v3_orders_stickers_post_request_proto_init()
	file_wb_marketplace_v1_api_v3_passes_pass_id_put_request_proto_init()
	file_wb_marketplace_v1_api_v3_passes_post201_response_proto_init()
	file_wb_marketplace_v1_api_v3_passes_post_request_proto_init()
	file_wb_marketplace_v1_api_v3_stocks_warehouse_id_delete_request_proto_init()
	file_wb_marketplace_v1_api_v3_stocks_warehouse_id_post200_response_proto_init()
	file_wb_marketplace_v1_api_v3_stocks_warehouse_id_post_request_proto_init()
	file_wb_marketplace_v1_api_v3_stocks_warehouse_id_put_request_proto_init()
	file_wb_marketplace_v1_api_v3_supplies_get200_response_proto_init()
	file_wb_marketplace_v1_api_v3_supplies_orders_reshipment_get200_response_proto_init()
	file_wb_marketplace_v1_api_v3_supplies_post201_response_proto_init()
	file_wb_marketplace_v1_api_v3_supplies_post_request_proto_init()
	file_wb_marketplace_v1_api_v3_supplies_supply_id_barcode_get200_response_proto_init()
	file_wb_marketplace_v1_api_v3_supplies_supply_id_orders_get200_response_proto_init()
	file_wb_marketplace_v1_api_v3_supplies_supply_id_trbx_delete_request_proto_init()
	file_wb_marketplace_v1_api_v3_supplies_supply_id_trbx_get200_response_proto_init()
	file_wb_marketplace_v1_api_v3_supplies_supply_id_trbx_post201_response_proto_init()
	file_wb_marketplace_v1_api_v3_supplies_supply_id_trbx_post_request_proto_init()
	file_wb_marketplace_v1_api_v3_supplies_supply_id_trbx_stickers_post200_response_proto_init()
	file_wb_marketplace_v1_api_v3_supplies_supply_id_trbx_stickers_post_request_proto_init()
	file_wb_marketplace_v1_api_v3_supplies_supply_id_trbx_trbx_id_patch_request_proto_init()
	file_wb_marketplace_v1_api_v3_warehouses_post201_response_proto_init()
	file_wb_marketplace_v1_api_v3_warehouses_post_request_proto_init()
	file_wb_marketplace_v1_api_v3_warehouses_warehouse_id_put_request_proto_init()
	file_wb_marketplace_v1_error_proto_init()
	file_wb_marketplace_v1_office_proto_init()
	file_wb_marketplace_v1_pass_proto_init()
	file_wb_marketplace_v1_pass_office_proto_init()
	file_wb_marketplace_v1_supply_proto_init()
	file_wb_marketplace_v1_warehouse_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_wb_marketplace_v1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3FilesOrdersExternalStickersPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3OfficesGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3OrdersGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3OrdersOrderIdCancelPatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3OrdersOrderIdMetaDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3OrdersOrderIdMetaGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3OrdersOrderIdMetaGtinPutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3OrdersOrderIdMetaImeiPutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3OrdersOrderIdMetaSgtinPutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3OrdersOrderIdMetaUinPutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3OrdersStatusPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3OrdersStickersPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3PassesGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3PassesOfficesGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3PassesPassIdDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3PassesPassIdPutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3PassesPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3StocksWarehouseIdDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3StocksWarehouseIdPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3StocksWarehouseIdPutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3SuppliesGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3SuppliesPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3SuppliesSupplyIdBarcodeGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3SuppliesSupplyIdDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3SuppliesSupplyIdDeliverPatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3SuppliesSupplyIdGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3SuppliesSupplyIdOrdersGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3SuppliesSupplyIdOrdersOrderIdPatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3SuppliesSupplyIdTrbxDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3SuppliesSupplyIdTrbxGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3SuppliesSupplyIdTrbxPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3SuppliesSupplyIdTrbxStickersPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3SuppliesSupplyIdTrbxTrbxIdOrdersOrderIdDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3SuppliesSupplyIdTrbxTrbxIdPatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3WarehousesGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3WarehousesPostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3WarehousesWarehouseIdDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wb_marketplace_v1_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiV3WarehousesWarehouseIdPutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wb_marketplace_v1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wb_marketplace_v1_service_proto_goTypes,
		DependencyIndexes: file_wb_marketplace_v1_service_proto_depIdxs,
		MessageInfos:      file_wb_marketplace_v1_service_proto_msgTypes,
	}.Build()
	File_wb_marketplace_v1_service_proto = out.File
	file_wb_marketplace_v1_service_proto_rawDesc = nil
	file_wb_marketplace_v1_service_proto_goTypes = nil
	file_wb_marketplace_v1_service_proto_depIdxs = nil
}
