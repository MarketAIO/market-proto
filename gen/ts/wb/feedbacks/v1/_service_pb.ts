//
//Описание API Вопросов и Отзывов
//
//`Важно.` Допускается 1 запрос в секунду на методы вопросов и отзывов в целом. При превышении лимита до 3 запросов в секунду последует блокировка на 60 секунд. 
//
//The version of the OpenAPI document: 
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file wb/feedbacks/v1/_service.proto (package wb.feedbacks.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
    BinaryReadOptions,
    FieldList,
    JsonReadOptions,
    JsonValue,
    PartialMessage,
    PlainMessage
} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import {ApiV1FeedbacksOrderReturnPostReq} from "./api_v1_feedbacks_order_return_post_request_pb.js";
import {ApiV1FeedbacksPatchReq} from "./api_v1_feedbacks_patch_request_pb.js";
import {ApiV1QuestionsPatchReq} from "./api_v1_questions_patch_request_pb.js";
import {ApiV1TemplatesDeleteReq} from "./api_v1_templates_delete_request_pb.js";
import {ApiV1TemplatesPatchReq} from "./api_v1_templates_patch_request_pb.js";
import {ApiV1TemplatesPostReq} from "./api_v1_templates_post_request_pb.js";

/**
 * @generated from message wb.feedbacks.v1.ApiV1FeedbackGetRequest
 */
export class ApiV1FeedbackGetRequest extends Message<ApiV1FeedbackGetRequest> {
  /**
   * Идентификатор отзыва
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<ApiV1FeedbackGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.feedbacks.v1.ApiV1FeedbackGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiV1FeedbackGetRequest {
    return new ApiV1FeedbackGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiV1FeedbackGetRequest {
    return new ApiV1FeedbackGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiV1FeedbackGetRequest {
    return new ApiV1FeedbackGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApiV1FeedbackGetRequest | PlainMessage<ApiV1FeedbackGetRequest> | undefined, b: ApiV1FeedbackGetRequest | PlainMessage<ApiV1FeedbackGetRequest> | undefined): boolean {
    return proto3.util.equals(ApiV1FeedbackGetRequest, a, b);
  }
}

/**
 * @generated from message wb.feedbacks.v1.ApiV1FeedbacksArchiveGetRequest
 */
export class ApiV1FeedbacksArchiveGetRequest extends Message<ApiV1FeedbacksArchiveGetRequest> {
  /**
   * Количество отзывов (max. 5 000)
   *
   * @generated from field: int32 take = 1;
   */
  take = 0;

  /**
   * Количество отзывов для пропуска
   *
   * @generated from field: int32 skip = 2;
   */
  skip = 0;

  /**
   * Артикул WB
   *
   * @generated from field: int32 nmId = 3;
   */
  nmId = 0;

  /**
   * Сортировка отзывов по дате (dateAsc/dateDesc)
   *
   * @generated from field: string order = 4;
   */
  order = "";

  constructor(data?: PartialMessage<ApiV1FeedbacksArchiveGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.feedbacks.v1.ApiV1FeedbacksArchiveGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "take", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "skip", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "nmId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "order", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiV1FeedbacksArchiveGetRequest {
    return new ApiV1FeedbacksArchiveGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiV1FeedbacksArchiveGetRequest {
    return new ApiV1FeedbacksArchiveGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiV1FeedbacksArchiveGetRequest {
    return new ApiV1FeedbacksArchiveGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApiV1FeedbacksArchiveGetRequest | PlainMessage<ApiV1FeedbacksArchiveGetRequest> | undefined, b: ApiV1FeedbacksArchiveGetRequest | PlainMessage<ApiV1FeedbacksArchiveGetRequest> | undefined): boolean {
    return proto3.util.equals(ApiV1FeedbacksArchiveGetRequest, a, b);
  }
}

/**
 * @generated from message wb.feedbacks.v1.ApiV1FeedbacksCountGetRequest
 */
export class ApiV1FeedbacksCountGetRequest extends Message<ApiV1FeedbacksCountGetRequest> {
  /**
   * Дата начала периода в формате Unix timestamp
   *
   * @generated from field: int32 dateFrom = 1;
   */
  dateFrom = 0;

  /**
   * Дата конца периода в формате Unix timestamp
   *
   * @generated from field: int32 dateTo = 2;
   */
  dateTo = 0;

  /**
   * Обработанные отзывы(`true`) или необработанные отзывы(`false`).<br> Если не указать, вернутся обработанные отзывы. 
   *
   * @generated from field: bool isAnswered = 3;
   */
  isAnswered = false;

  constructor(data?: PartialMessage<ApiV1FeedbacksCountGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.feedbacks.v1.ApiV1FeedbacksCountGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dateFrom", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "dateTo", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "isAnswered", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiV1FeedbacksCountGetRequest {
    return new ApiV1FeedbacksCountGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiV1FeedbacksCountGetRequest {
    return new ApiV1FeedbacksCountGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiV1FeedbacksCountGetRequest {
    return new ApiV1FeedbacksCountGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApiV1FeedbacksCountGetRequest | PlainMessage<ApiV1FeedbacksCountGetRequest> | undefined, b: ApiV1FeedbacksCountGetRequest | PlainMessage<ApiV1FeedbacksCountGetRequest> | undefined): boolean {
    return proto3.util.equals(ApiV1FeedbacksCountGetRequest, a, b);
  }
}

/**
 * @generated from message wb.feedbacks.v1.ApiV1FeedbacksGetRequest
 */
export class ApiV1FeedbacksGetRequest extends Message<ApiV1FeedbacksGetRequest> {
  /**
   * Обработанные отзывы (`true`) или необработанные отзывы(`false`)
   *
   * @generated from field: bool isAnswered = 1;
   */
  isAnswered = false;

  /**
   * Количество отзывов (max. 5 000)
   *
   * @generated from field: int32 take = 2;
   */
  take = 0;

  /**
   * Количество отзывов для пропуска (max. 199990)
   *
   * @generated from field: int32 skip = 3;
   */
  skip = 0;

  /**
   * Артикул WB
   *
   * @generated from field: int32 nmId = 4;
   */
  nmId = 0;

  /**
   * Сортировка отзывов по дате (dateAsc/dateDesc)
   *
   * @generated from field: string order = 5;
   */
  order = "";

  /**
   * Дата начала периода в формате Unix timestamp
   *
   * @generated from field: int32 dateFrom = 6;
   */
  dateFrom = 0;

  /**
   * Дата конца периода в формате Unix timestamp
   *
   * @generated from field: int32 dateTo = 7;
   */
  dateTo = 0;

  constructor(data?: PartialMessage<ApiV1FeedbacksGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.feedbacks.v1.ApiV1FeedbacksGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "isAnswered", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "take", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "skip", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "nmId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "order", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "dateFrom", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "dateTo", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiV1FeedbacksGetRequest {
    return new ApiV1FeedbacksGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiV1FeedbacksGetRequest {
    return new ApiV1FeedbacksGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiV1FeedbacksGetRequest {
    return new ApiV1FeedbacksGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApiV1FeedbacksGetRequest | PlainMessage<ApiV1FeedbacksGetRequest> | undefined, b: ApiV1FeedbacksGetRequest | PlainMessage<ApiV1FeedbacksGetRequest> | undefined): boolean {
    return proto3.util.equals(ApiV1FeedbacksGetRequest, a, b);
  }
}

/**
 * @generated from message wb.feedbacks.v1.ApiV1FeedbacksOrderReturnPostRequest
 */
export class ApiV1FeedbacksOrderReturnPostRequest extends Message<ApiV1FeedbacksOrderReturnPostRequest> {
  /**
   * @generated from field: wb.feedbacks.v1.ApiV1FeedbacksOrderReturnPostReq apiV1FeedbacksOrderReturnPostReq = 1;
   */
  apiV1FeedbacksOrderReturnPostReq?: ApiV1FeedbacksOrderReturnPostReq;

  constructor(data?: PartialMessage<ApiV1FeedbacksOrderReturnPostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.feedbacks.v1.ApiV1FeedbacksOrderReturnPostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apiV1FeedbacksOrderReturnPostReq", kind: "message", T: ApiV1FeedbacksOrderReturnPostReq },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiV1FeedbacksOrderReturnPostRequest {
    return new ApiV1FeedbacksOrderReturnPostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiV1FeedbacksOrderReturnPostRequest {
    return new ApiV1FeedbacksOrderReturnPostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiV1FeedbacksOrderReturnPostRequest {
    return new ApiV1FeedbacksOrderReturnPostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApiV1FeedbacksOrderReturnPostRequest | PlainMessage<ApiV1FeedbacksOrderReturnPostRequest> | undefined, b: ApiV1FeedbacksOrderReturnPostRequest | PlainMessage<ApiV1FeedbacksOrderReturnPostRequest> | undefined): boolean {
    return proto3.util.equals(ApiV1FeedbacksOrderReturnPostRequest, a, b);
  }
}

/**
 * @generated from message wb.feedbacks.v1.ApiV1FeedbacksPatchRequest
 */
export class ApiV1FeedbacksPatchRequest extends Message<ApiV1FeedbacksPatchRequest> {
  /**
   * @generated from field: wb.feedbacks.v1.ApiV1FeedbacksPatchReq apiV1FeedbacksPatchReq = 1;
   */
  apiV1FeedbacksPatchReq?: ApiV1FeedbacksPatchReq;

  constructor(data?: PartialMessage<ApiV1FeedbacksPatchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.feedbacks.v1.ApiV1FeedbacksPatchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apiV1FeedbacksPatchReq", kind: "message", T: ApiV1FeedbacksPatchReq },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiV1FeedbacksPatchRequest {
    return new ApiV1FeedbacksPatchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiV1FeedbacksPatchRequest {
    return new ApiV1FeedbacksPatchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiV1FeedbacksPatchRequest {
    return new ApiV1FeedbacksPatchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApiV1FeedbacksPatchRequest | PlainMessage<ApiV1FeedbacksPatchRequest> | undefined, b: ApiV1FeedbacksPatchRequest | PlainMessage<ApiV1FeedbacksPatchRequest> | undefined): boolean {
    return proto3.util.equals(ApiV1FeedbacksPatchRequest, a, b);
  }
}

/**
 * @generated from message wb.feedbacks.v1.ApiV1FeedbacksProductsRatingGetRequest
 */
export class ApiV1FeedbacksProductsRatingGetRequest extends Message<ApiV1FeedbacksProductsRatingGetRequest> {
  /**
   * id категории товара
   *
   * @generated from field: int32 subjectId = 1;
   */
  subjectId = 0;

  constructor(data?: PartialMessage<ApiV1FeedbacksProductsRatingGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.feedbacks.v1.ApiV1FeedbacksProductsRatingGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subjectId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiV1FeedbacksProductsRatingGetRequest {
    return new ApiV1FeedbacksProductsRatingGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiV1FeedbacksProductsRatingGetRequest {
    return new ApiV1FeedbacksProductsRatingGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiV1FeedbacksProductsRatingGetRequest {
    return new ApiV1FeedbacksProductsRatingGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApiV1FeedbacksProductsRatingGetRequest | PlainMessage<ApiV1FeedbacksProductsRatingGetRequest> | undefined, b: ApiV1FeedbacksProductsRatingGetRequest | PlainMessage<ApiV1FeedbacksProductsRatingGetRequest> | undefined): boolean {
    return proto3.util.equals(ApiV1FeedbacksProductsRatingGetRequest, a, b);
  }
}

/**
 * @generated from message wb.feedbacks.v1.ApiV1FeedbacksProductsRatingNmidGetRequest
 */
export class ApiV1FeedbacksProductsRatingNmidGetRequest extends Message<ApiV1FeedbacksProductsRatingNmidGetRequest> {
  /**
   * Артикул WB
   *
   * @generated from field: int32 nmId = 1;
   */
  nmId = 0;

  constructor(data?: PartialMessage<ApiV1FeedbacksProductsRatingNmidGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.feedbacks.v1.ApiV1FeedbacksProductsRatingNmidGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nmId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiV1FeedbacksProductsRatingNmidGetRequest {
    return new ApiV1FeedbacksProductsRatingNmidGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiV1FeedbacksProductsRatingNmidGetRequest {
    return new ApiV1FeedbacksProductsRatingNmidGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiV1FeedbacksProductsRatingNmidGetRequest {
    return new ApiV1FeedbacksProductsRatingNmidGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApiV1FeedbacksProductsRatingNmidGetRequest | PlainMessage<ApiV1FeedbacksProductsRatingNmidGetRequest> | undefined, b: ApiV1FeedbacksProductsRatingNmidGetRequest | PlainMessage<ApiV1FeedbacksProductsRatingNmidGetRequest> | undefined): boolean {
    return proto3.util.equals(ApiV1FeedbacksProductsRatingNmidGetRequest, a, b);
  }
}

/**
 * @generated from message wb.feedbacks.v1.ApiV1FeedbacksProductsRatingTopGetRequest
 */
export class ApiV1FeedbacksProductsRatingTopGetRequest extends Message<ApiV1FeedbacksProductsRatingTopGetRequest> {
  /**
   * id категории товара
   *
   * @generated from field: int32 subjectId = 1;
   */
  subjectId = 0;

  constructor(data?: PartialMessage<ApiV1FeedbacksProductsRatingTopGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.feedbacks.v1.ApiV1FeedbacksProductsRatingTopGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subjectId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiV1FeedbacksProductsRatingTopGetRequest {
    return new ApiV1FeedbacksProductsRatingTopGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiV1FeedbacksProductsRatingTopGetRequest {
    return new ApiV1FeedbacksProductsRatingTopGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiV1FeedbacksProductsRatingTopGetRequest {
    return new ApiV1FeedbacksProductsRatingTopGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApiV1FeedbacksProductsRatingTopGetRequest | PlainMessage<ApiV1FeedbacksProductsRatingTopGetRequest> | undefined, b: ApiV1FeedbacksProductsRatingTopGetRequest | PlainMessage<ApiV1FeedbacksProductsRatingTopGetRequest> | undefined): boolean {
    return proto3.util.equals(ApiV1FeedbacksProductsRatingTopGetRequest, a, b);
  }
}

/**
 * @generated from message wb.feedbacks.v1.ApiV1FeedbacksReportGetRequest
 */
export class ApiV1FeedbacksReportGetRequest extends Message<ApiV1FeedbacksReportGetRequest> {
  /**
   * Необработанный(`false`) или в архиве(`true`)
   *
   * @generated from field: bool isAnswered = 1;
   */
  isAnswered = false;

  /**
   * Параметр пагинации, указывает сколько отзывов пропустить (max. 20 000)
   *
   * @generated from field: int32 skip = 2;
   */
  skip = 0;

  /**
   * Дата начала периода в формате Unix timestamp <br>
   *
   * @generated from field: int32 dateFrom = 3;
   */
  dateFrom = 0;

  /**
   * Дата конца периода в формате Unix timestamp <br>
   *
   * @generated from field: int32 dateTo = 4;
   */
  dateTo = 0;

  /**
   * Сортировка отзывов по дате (dateAsc/dateDesc) <br>
   *
   * @generated from field: string order = 5;
   */
  order = "";

  constructor(data?: PartialMessage<ApiV1FeedbacksReportGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.feedbacks.v1.ApiV1FeedbacksReportGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "isAnswered", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "skip", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "dateFrom", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "dateTo", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "order", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiV1FeedbacksReportGetRequest {
    return new ApiV1FeedbacksReportGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiV1FeedbacksReportGetRequest {
    return new ApiV1FeedbacksReportGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiV1FeedbacksReportGetRequest {
    return new ApiV1FeedbacksReportGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApiV1FeedbacksReportGetRequest | PlainMessage<ApiV1FeedbacksReportGetRequest> | undefined, b: ApiV1FeedbacksReportGetRequest | PlainMessage<ApiV1FeedbacksReportGetRequest> | undefined): boolean {
    return proto3.util.equals(ApiV1FeedbacksReportGetRequest, a, b);
  }
}

/**
 * @generated from message wb.feedbacks.v1.ApiV1QuestionGetRequest
 */
export class ApiV1QuestionGetRequest extends Message<ApiV1QuestionGetRequest> {
  /**
   * Идентификатор вопроса
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<ApiV1QuestionGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.feedbacks.v1.ApiV1QuestionGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiV1QuestionGetRequest {
    return new ApiV1QuestionGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiV1QuestionGetRequest {
    return new ApiV1QuestionGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiV1QuestionGetRequest {
    return new ApiV1QuestionGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApiV1QuestionGetRequest | PlainMessage<ApiV1QuestionGetRequest> | undefined, b: ApiV1QuestionGetRequest | PlainMessage<ApiV1QuestionGetRequest> | undefined): boolean {
    return proto3.util.equals(ApiV1QuestionGetRequest, a, b);
  }
}

/**
 * @generated from message wb.feedbacks.v1.ApiV1QuestionsCountGetRequest
 */
export class ApiV1QuestionsCountGetRequest extends Message<ApiV1QuestionsCountGetRequest> {
  /**
   * Дата начала периода в формате Unix timestamp
   *
   * @generated from field: int32 dateFrom = 1;
   */
  dateFrom = 0;

  /**
   * Дата конца периода в формате Unix timestamp
   *
   * @generated from field: int32 dateTo = 2;
   */
  dateTo = 0;

  /**
   * Обработанные вопросы (`true`) или необработанные вопросы (`false`).<br> Если не указать, вернутся обработанные вопросы. 
   *
   * @generated from field: bool isAnswered = 3;
   */
  isAnswered = false;

  constructor(data?: PartialMessage<ApiV1QuestionsCountGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.feedbacks.v1.ApiV1QuestionsCountGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dateFrom", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "dateTo", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "isAnswered", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiV1QuestionsCountGetRequest {
    return new ApiV1QuestionsCountGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiV1QuestionsCountGetRequest {
    return new ApiV1QuestionsCountGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiV1QuestionsCountGetRequest {
    return new ApiV1QuestionsCountGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApiV1QuestionsCountGetRequest | PlainMessage<ApiV1QuestionsCountGetRequest> | undefined, b: ApiV1QuestionsCountGetRequest | PlainMessage<ApiV1QuestionsCountGetRequest> | undefined): boolean {
    return proto3.util.equals(ApiV1QuestionsCountGetRequest, a, b);
  }
}

/**
 * @generated from message wb.feedbacks.v1.ApiV1QuestionsGetRequest
 */
export class ApiV1QuestionsGetRequest extends Message<ApiV1QuestionsGetRequest> {
  /**
   * Отвеченные вопросы (`true`) или неотвеченные вопросы(`false`) 
   *
   * @generated from field: bool isAnswered = 1;
   */
  isAnswered = false;

  /**
   * Количество запрашиваемых вопросов (максимально допустимое значение для параметра - 10 000,  при этом сумма значений параметров `take` и `skip` не должна превышать 10 000) 
   *
   * @generated from field: int32 take = 2;
   */
  take = 0;

  /**
   * Количество вопросов для пропуска (максимально допустимое значение для параметра - 10 000,  при этом сумма значений параметров `take` и `skip` не должна превышать 10 000) 
   *
   * @generated from field: int32 skip = 3;
   */
  skip = 0;

  /**
   * Артикул WB
   *
   * @generated from field: int32 nmId = 4;
   */
  nmId = 0;

  /**
   * Сортировка вопросов по дате (`dateAsc`/`dateDesc`)
   *
   * @generated from field: string order = 5;
   */
  order = "";

  /**
   * Дата начала периода в формате Unix timestamp
   *
   * @generated from field: int32 dateFrom = 6;
   */
  dateFrom = 0;

  /**
   * Дата конца периода в формате Unix timestamp
   *
   * @generated from field: int32 dateTo = 7;
   */
  dateTo = 0;

  constructor(data?: PartialMessage<ApiV1QuestionsGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.feedbacks.v1.ApiV1QuestionsGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "isAnswered", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "take", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "skip", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "nmId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "order", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "dateFrom", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "dateTo", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiV1QuestionsGetRequest {
    return new ApiV1QuestionsGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiV1QuestionsGetRequest {
    return new ApiV1QuestionsGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiV1QuestionsGetRequest {
    return new ApiV1QuestionsGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApiV1QuestionsGetRequest | PlainMessage<ApiV1QuestionsGetRequest> | undefined, b: ApiV1QuestionsGetRequest | PlainMessage<ApiV1QuestionsGetRequest> | undefined): boolean {
    return proto3.util.equals(ApiV1QuestionsGetRequest, a, b);
  }
}

/**
 * @generated from message wb.feedbacks.v1.ApiV1QuestionsPatchRequest
 */
export class ApiV1QuestionsPatchRequest extends Message<ApiV1QuestionsPatchRequest> {
  /**
   * @generated from field: wb.feedbacks.v1.ApiV1QuestionsPatchReq apiV1QuestionsPatchReq = 1;
   */
  apiV1QuestionsPatchReq?: ApiV1QuestionsPatchReq;

  constructor(data?: PartialMessage<ApiV1QuestionsPatchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.feedbacks.v1.ApiV1QuestionsPatchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apiV1QuestionsPatchReq", kind: "message", T: ApiV1QuestionsPatchReq },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiV1QuestionsPatchRequest {
    return new ApiV1QuestionsPatchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiV1QuestionsPatchRequest {
    return new ApiV1QuestionsPatchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiV1QuestionsPatchRequest {
    return new ApiV1QuestionsPatchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApiV1QuestionsPatchRequest | PlainMessage<ApiV1QuestionsPatchRequest> | undefined, b: ApiV1QuestionsPatchRequest | PlainMessage<ApiV1QuestionsPatchRequest> | undefined): boolean {
    return proto3.util.equals(ApiV1QuestionsPatchRequest, a, b);
  }
}

/**
 * @generated from message wb.feedbacks.v1.ApiV1QuestionsProductsRatingGetRequest
 */
export class ApiV1QuestionsProductsRatingGetRequest extends Message<ApiV1QuestionsProductsRatingGetRequest> {
  /**
   * Количество запрашиваемых товаров (max. 100)
   *
   * @generated from field: int32 size = 1;
   */
  size = 0;

  constructor(data?: PartialMessage<ApiV1QuestionsProductsRatingGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.feedbacks.v1.ApiV1QuestionsProductsRatingGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiV1QuestionsProductsRatingGetRequest {
    return new ApiV1QuestionsProductsRatingGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiV1QuestionsProductsRatingGetRequest {
    return new ApiV1QuestionsProductsRatingGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiV1QuestionsProductsRatingGetRequest {
    return new ApiV1QuestionsProductsRatingGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApiV1QuestionsProductsRatingGetRequest | PlainMessage<ApiV1QuestionsProductsRatingGetRequest> | undefined, b: ApiV1QuestionsProductsRatingGetRequest | PlainMessage<ApiV1QuestionsProductsRatingGetRequest> | undefined): boolean {
    return proto3.util.equals(ApiV1QuestionsProductsRatingGetRequest, a, b);
  }
}

/**
 * @generated from message wb.feedbacks.v1.ApiV1QuestionsReportGetRequest
 */
export class ApiV1QuestionsReportGetRequest extends Message<ApiV1QuestionsReportGetRequest> {
  /**
   * Обработанные вопросы (`true`) или необработанные вопросы(`false`) 
   *
   * @generated from field: bool isAnswered = 1;
   */
  isAnswered = false;

  constructor(data?: PartialMessage<ApiV1QuestionsReportGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.feedbacks.v1.ApiV1QuestionsReportGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "isAnswered", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiV1QuestionsReportGetRequest {
    return new ApiV1QuestionsReportGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiV1QuestionsReportGetRequest {
    return new ApiV1QuestionsReportGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiV1QuestionsReportGetRequest {
    return new ApiV1QuestionsReportGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApiV1QuestionsReportGetRequest | PlainMessage<ApiV1QuestionsReportGetRequest> | undefined, b: ApiV1QuestionsReportGetRequest | PlainMessage<ApiV1QuestionsReportGetRequest> | undefined): boolean {
    return proto3.util.equals(ApiV1QuestionsReportGetRequest, a, b);
  }
}

/**
 * @generated from message wb.feedbacks.v1.ApiV1SupplierValuationsGetRequest
 */
export class ApiV1SupplierValuationsGetRequest extends Message<ApiV1SupplierValuationsGetRequest> {
  /**
   * Выбор языка значений полей ответа (`ru` - русский, `en` - английский, `zh` - китайский)
   *
   * @generated from field: string xLocale = 1;
   */
  xLocale = "";

  constructor(data?: PartialMessage<ApiV1SupplierValuationsGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.feedbacks.v1.ApiV1SupplierValuationsGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "xLocale", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiV1SupplierValuationsGetRequest {
    return new ApiV1SupplierValuationsGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiV1SupplierValuationsGetRequest {
    return new ApiV1SupplierValuationsGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiV1SupplierValuationsGetRequest {
    return new ApiV1SupplierValuationsGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApiV1SupplierValuationsGetRequest | PlainMessage<ApiV1SupplierValuationsGetRequest> | undefined, b: ApiV1SupplierValuationsGetRequest | PlainMessage<ApiV1SupplierValuationsGetRequest> | undefined): boolean {
    return proto3.util.equals(ApiV1SupplierValuationsGetRequest, a, b);
  }
}

/**
 * @generated from message wb.feedbacks.v1.ApiV1TemplatesDeleteRequest
 */
export class ApiV1TemplatesDeleteRequest extends Message<ApiV1TemplatesDeleteRequest> {
  /**
   * @generated from field: wb.feedbacks.v1.ApiV1TemplatesDeleteReq apiV1TemplatesDeleteReq = 1;
   */
  apiV1TemplatesDeleteReq?: ApiV1TemplatesDeleteReq;

  constructor(data?: PartialMessage<ApiV1TemplatesDeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.feedbacks.v1.ApiV1TemplatesDeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apiV1TemplatesDeleteReq", kind: "message", T: ApiV1TemplatesDeleteReq },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiV1TemplatesDeleteRequest {
    return new ApiV1TemplatesDeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiV1TemplatesDeleteRequest {
    return new ApiV1TemplatesDeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiV1TemplatesDeleteRequest {
    return new ApiV1TemplatesDeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApiV1TemplatesDeleteRequest | PlainMessage<ApiV1TemplatesDeleteRequest> | undefined, b: ApiV1TemplatesDeleteRequest | PlainMessage<ApiV1TemplatesDeleteRequest> | undefined): boolean {
    return proto3.util.equals(ApiV1TemplatesDeleteRequest, a, b);
  }
}

/**
 * @generated from message wb.feedbacks.v1.ApiV1TemplatesGetRequest
 */
export class ApiV1TemplatesGetRequest extends Message<ApiV1TemplatesGetRequest> {
  /**
   * `1` - шаблоны для отзывов<br> `2` - шаблоны для вопросов 
   *
   * @generated from field: int32 templateType = 1;
   */
  templateType = 0;

  constructor(data?: PartialMessage<ApiV1TemplatesGetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.feedbacks.v1.ApiV1TemplatesGetRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "templateType", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiV1TemplatesGetRequest {
    return new ApiV1TemplatesGetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiV1TemplatesGetRequest {
    return new ApiV1TemplatesGetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiV1TemplatesGetRequest {
    return new ApiV1TemplatesGetRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApiV1TemplatesGetRequest | PlainMessage<ApiV1TemplatesGetRequest> | undefined, b: ApiV1TemplatesGetRequest | PlainMessage<ApiV1TemplatesGetRequest> | undefined): boolean {
    return proto3.util.equals(ApiV1TemplatesGetRequest, a, b);
  }
}

/**
 * @generated from message wb.feedbacks.v1.ApiV1TemplatesPatchRequest
 */
export class ApiV1TemplatesPatchRequest extends Message<ApiV1TemplatesPatchRequest> {
  /**
   * @generated from field: wb.feedbacks.v1.ApiV1TemplatesPatchReq apiV1TemplatesPatchReq = 1;
   */
  apiV1TemplatesPatchReq?: ApiV1TemplatesPatchReq;

  constructor(data?: PartialMessage<ApiV1TemplatesPatchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.feedbacks.v1.ApiV1TemplatesPatchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apiV1TemplatesPatchReq", kind: "message", T: ApiV1TemplatesPatchReq },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiV1TemplatesPatchRequest {
    return new ApiV1TemplatesPatchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiV1TemplatesPatchRequest {
    return new ApiV1TemplatesPatchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiV1TemplatesPatchRequest {
    return new ApiV1TemplatesPatchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApiV1TemplatesPatchRequest | PlainMessage<ApiV1TemplatesPatchRequest> | undefined, b: ApiV1TemplatesPatchRequest | PlainMessage<ApiV1TemplatesPatchRequest> | undefined): boolean {
    return proto3.util.equals(ApiV1TemplatesPatchRequest, a, b);
  }
}

/**
 * @generated from message wb.feedbacks.v1.ApiV1TemplatesPostRequest
 */
export class ApiV1TemplatesPostRequest extends Message<ApiV1TemplatesPostRequest> {
  /**
   * @generated from field: wb.feedbacks.v1.ApiV1TemplatesPostReq apiV1TemplatesPostReq = 1;
   */
  apiV1TemplatesPostReq?: ApiV1TemplatesPostReq;

  constructor(data?: PartialMessage<ApiV1TemplatesPostRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.feedbacks.v1.ApiV1TemplatesPostRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "apiV1TemplatesPostReq", kind: "message", T: ApiV1TemplatesPostReq },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiV1TemplatesPostRequest {
    return new ApiV1TemplatesPostRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiV1TemplatesPostRequest {
    return new ApiV1TemplatesPostRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiV1TemplatesPostRequest {
    return new ApiV1TemplatesPostRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApiV1TemplatesPostRequest | PlainMessage<ApiV1TemplatesPostRequest> | undefined, b: ApiV1TemplatesPostRequest | PlainMessage<ApiV1TemplatesPostRequest> | undefined): boolean {
    return proto3.util.equals(ApiV1TemplatesPostRequest, a, b);
  }
}

