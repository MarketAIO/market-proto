//
//Описание API Аналитика
//
//Сервис предоставляет публичный API для получения аналитических данных. С помощью этих методов вы можете получать аналитические отчёты. [Часть методов](./#tag/Voronka-prodazh-(Dzhem)/) доступна только с [подпиской на расширенную аналитику Джем](https://seller.wildberries.ru/dynamic-product-categories/jam). 
//
//The version of the OpenAPI document: 
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file wb/analytics/v1/by_selected_nm_id_req_params.proto (package wb.analytics.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message wb.analytics.v1.BySelectedNmIDReqParams
 */
export class BySelectedNmIDReqParams extends Message<BySelectedNmIDReqParams> {
  /**
   * `nmID `, по которым составить отчёт. Оставьте пустым, чтобы получить отчёт по всем товарам 
   *
   * @generated from field: repeated int64 nmIDs = 1;
   */
  nmIDs: bigint[] = [];

  /**
   * Идентификаторы предметов
   *
   * @generated from field: repeated int64 subjectIDs = 2;
   */
  subjectIDs: bigint[] = [];

  /**
   * Бренды
   *
   * @generated from field: repeated string brandNames = 3;
   */
  brandNames: string[] = [];

  /**
   * Идентификаторы тегов
   *
   * @generated from field: repeated int64 tagIDs = 4;
   */
  tagIDs: bigint[] = [];

  /**
   * Начало периода
   *
   * @generated from field: string startDate = 5;
   */
  startDate = "";

  /**
   * Конец периода
   *
   * @generated from field: string endDate = 6;
   */
  endDate = "";

  /**
   * Временная зона, по умолчанию Europe/Moscow 
   *
   * @generated from field: string timezone = 7;
   */
  timezone = "";

  /**
   * @generated from field: wb.analytics.v1.BySelectedNmIDReqParams.AggregationLevelEnum aggregationLevel = 8;
   */
  aggregationLevel = BySelectedNmIDReqParams_AggregationLevelEnum.AggregationLevelEnum_DAY;

  /**
   * Скрыть удалённые номенклатуры
   *
   * @generated from field: bool skipDeletedNm = 9;
   */
  skipDeletedNm = false;

  constructor(data?: PartialMessage<BySelectedNmIDReqParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.analytics.v1.BySelectedNmIDReqParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nmIDs", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 2, name: "subjectIDs", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 3, name: "brandNames", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "tagIDs", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 5, name: "startDate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "endDate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "timezone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "aggregationLevel", kind: "enum", T: proto3.getEnumType(BySelectedNmIDReqParams_AggregationLevelEnum) },
    { no: 9, name: "skipDeletedNm", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BySelectedNmIDReqParams {
    return new BySelectedNmIDReqParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BySelectedNmIDReqParams {
    return new BySelectedNmIDReqParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BySelectedNmIDReqParams {
    return new BySelectedNmIDReqParams().fromJsonString(jsonString, options);
  }

  static equals(a: BySelectedNmIDReqParams | PlainMessage<BySelectedNmIDReqParams> | undefined, b: BySelectedNmIDReqParams | PlainMessage<BySelectedNmIDReqParams> | undefined): boolean {
    return proto3.util.equals(BySelectedNmIDReqParams, a, b);
  }
}

/**
 * Как сгруппировать данные (по умолчанию по дням):    * `day` — по дням   * `week` — по неделям   * `month` — по месяцам 
 *
 * @generated from enum wb.analytics.v1.BySelectedNmIDReqParams.AggregationLevelEnum
 */
export enum BySelectedNmIDReqParams_AggregationLevelEnum {
  /**
   * @generated from enum value: AggregationLevelEnum_DAY = 0;
   */
  AggregationLevelEnum_DAY = 0,

  /**
   * @generated from enum value: AggregationLevelEnum_WEEK = 1;
   */
  AggregationLevelEnum_WEEK = 1,

  /**
   * @generated from enum value: AggregationLevelEnum_MONTH = 2;
   */
  AggregationLevelEnum_MONTH = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(BySelectedNmIDReqParams_AggregationLevelEnum)
proto3.util.setEnumType(BySelectedNmIDReqParams_AggregationLevelEnum, "wb.analytics.v1.BySelectedNmIDReqParams.AggregationLevelEnum", [
  { no: 0, name: "AggregationLevelEnum_DAY" },
  { no: 1, name: "AggregationLevelEnum_WEEK" },
  { no: 2, name: "AggregationLevelEnum_MONTH" },
]);

