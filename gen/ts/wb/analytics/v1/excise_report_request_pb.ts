//
//Описание API Аналитика
//
//Сервис предоставляет публичный API для получения аналитических данных. С помощью этих методов вы можете получать аналитические отчёты. [Часть методов](./#tag/Voronka-prodazh-(Dzhem)/) доступна только с [подпиской на расширенную аналитику Джем](https://seller.wildberries.ru/dynamic-product-categories/jam). 
//
//The version of the OpenAPI document: 
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file wb/analytics/v1/excise_report_request.proto (package wb.analytics.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message wb.analytics.v1.ExciseReportReq
 */
export class ExciseReportReq extends Message<ExciseReportReq> {
  /**
   * @generated from field: wb.analytics.v1.ExciseReportReq.CountriesEnum countries = 1;
   */
  countries = ExciseReportReq_CountriesEnum.CountriesEnum_AM;

  constructor(data?: PartialMessage<ExciseReportReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.analytics.v1.ExciseReportReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "countries", kind: "enum", T: proto3.getEnumType(ExciseReportReq_CountriesEnum) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExciseReportReq {
    return new ExciseReportReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExciseReportReq {
    return new ExciseReportReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExciseReportReq {
    return new ExciseReportReq().fromJsonString(jsonString, options);
  }

  static equals(a: ExciseReportReq | PlainMessage<ExciseReportReq> | undefined, b: ExciseReportReq | PlainMessage<ExciseReportReq> | undefined): boolean {
    return proto3.util.equals(ExciseReportReq, a, b);
  }
}

/**
 * Код стран по стандарту ISO 3166-2. Чтобы получить данные по всем странам, оставьте параметр пустым 
 *
 * @generated from enum wb.analytics.v1.ExciseReportReq.CountriesEnum
 */
export enum ExciseReportReq_CountriesEnum {
  /**
   * @generated from enum value: CountriesEnum_AM = 0;
   */
  CountriesEnum_AM = 0,

  /**
   * @generated from enum value: CountriesEnum_BY = 1;
   */
  CountriesEnum_BY = 1,

  /**
   * @generated from enum value: CountriesEnum_KG = 2;
   */
  CountriesEnum_KG = 2,

  /**
   * @generated from enum value: CountriesEnum_KZ = 3;
   */
  CountriesEnum_KZ = 3,

  /**
   * @generated from enum value: CountriesEnum_RU = 4;
   */
  CountriesEnum_RU = 4,

  /**
   * @generated from enum value: CountriesEnum_UZ = 5;
   */
  CountriesEnum_UZ = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(ExciseReportReq_CountriesEnum)
proto3.util.setEnumType(ExciseReportReq_CountriesEnum, "wb.analytics.v1.ExciseReportReq.CountriesEnum", [
  { no: 0, name: "CountriesEnum_AM" },
  { no: 1, name: "CountriesEnum_BY" },
  { no: 2, name: "CountriesEnum_KG" },
  { no: 3, name: "CountriesEnum_KZ" },
  { no: 4, name: "CountriesEnum_RU" },
  { no: 5, name: "CountriesEnum_UZ" },
]);

