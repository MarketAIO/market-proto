//
//Описание API Аналитика
//
//Сервис предоставляет публичный API для получения аналитических данных. С помощью этих методов вы можете получать аналитические отчёты. [Часть методов](./#tag/Voronka-prodazh-(Dzhem)/) доступна только с [подпиской на расширенную аналитику Джем](https://seller.wildberries.ru/dynamic-product-categories/jam). 
//
//The version of the OpenAPI document: 
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file wb/analytics/v1/response_paid_storage_inner.proto (package wb.analytics.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message wb.analytics.v1.ResponsePaidStorageInner
 */
export class ResponsePaidStorageInner extends Message<ResponsePaidStorageInner> {
  /**
   * Дата, за которую был расчёт или перерасчёт
   *
   * @generated from field: string date = 1;
   */
  date = "";

  /**
   * Коэффициент логистики и хранения
   *
   * @generated from field: float logWarehouseCoef = 2;
   */
  logWarehouseCoef = 0;

  /**
   * ID склада
   *
   * @generated from field: int32 officeId = 3;
   */
  officeId = 0;

  /**
   * Название склада
   *
   * @generated from field: string warehouse = 4;
   */
  warehouse = "";

  /**
   * Коэффициент склада
   *
   * @generated from field: float warehouseCoef = 5;
   */
  warehouseCoef = 0;

  /**
   * ID поставки
   *
   * @generated from field: int32 giId = 6;
   */
  giId = 0;

  /**
   * Идентификатор размера для этого артикула Wildberries
   *
   * @generated from field: int32 chrtId = 7;
   */
  chrtId = 0;

  /**
   * Размер (`techSize` в карточке товара)
   *
   * @generated from field: string size = 8;
   */
  size = "";

  /**
   * Баркод
   *
   * @generated from field: string barcode = 9;
   */
  barcode = "";

  /**
   * Предмет
   *
   * @generated from field: string subject = 10;
   */
  subject = "";

  /**
   * Бренд
   *
   * @generated from field: string brand = 11;
   */
  brand = "";

  /**
   * Артикул продавца
   *
   * @generated from field: string vendorCode = 12;
   */
  vendorCode = "";

  /**
   * Артикул Wildberries
   *
   * @generated from field: int32 nmId = 13;
   */
  nmId = 0;

  /**
   * Объём товара
   *
   * @generated from field: float volume = 14;
   */
  volume = 0;

  /**
   * Способ расчёта
   *
   * @generated from field: string calcType = 15;
   */
  calcType = "";

  /**
   * Сумма хранения
   *
   * @generated from field: float warehousePrice = 16;
   */
  warehousePrice = 0;

  /**
   * Количество единиц товара (штук), подлежащих тарифицированию за расчётные сутки
   *
   * @generated from field: int32 barcodesCount = 17;
   */
  barcodesCount = 0;

  /**
   * Код палетоместа
   *
   * @generated from field: int32 palletPlaceCode = 18;
   */
  palletPlaceCode = 0;

  /**
   * Количество палет
   *
   * @generated from field: float palletCount = 19;
   */
  palletCount = 0;

  /**
   * Если был перерасчёт, это дата первоначального расчёта. Если перерасчёта не было, совпадает с `date`
   *
   * @generated from field: string originalDate = 20;
   */
  originalDate = "";

  /**
   * Скидка программы лояльности, ₽
   *
   * @generated from field: float loyaltyDiscount = 21;
   */
  loyaltyDiscount = 0;

  /**
   * Дата поставки. Значение доступно только для поставок с фиксацией тарифа
   *
   * @generated from field: string giDate = 22;
   */
  giDate = "";

  /**
   * Дата начала фиксации тарифа
   *
   * @generated from field: string giFixDateFrom = 23;
   */
  giFixDateFrom = "";

  /**
   * Дата конца фиксации тарифа
   *
   * @generated from field: string giFixDateTill = 24;
   */
  giFixDateTill = "";

  constructor(data?: PartialMessage<ResponsePaidStorageInner>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.analytics.v1.ResponsePaidStorageInner";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "logWarehouseCoef", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 3, name: "officeId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "warehouse", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "warehouseCoef", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 6, name: "giId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "chrtId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "size", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "barcode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "brand", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "vendorCode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "nmId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 14, name: "volume", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 15, name: "calcType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "warehousePrice", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 17, name: "barcodesCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 18, name: "palletPlaceCode", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 19, name: "palletCount", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 20, name: "originalDate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "loyaltyDiscount", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 22, name: "giDate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "giFixDateFrom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "giFixDateTill", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponsePaidStorageInner {
    return new ResponsePaidStorageInner().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponsePaidStorageInner {
    return new ResponsePaidStorageInner().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponsePaidStorageInner {
    return new ResponsePaidStorageInner().fromJsonString(jsonString, options);
  }

  static equals(a: ResponsePaidStorageInner | PlainMessage<ResponsePaidStorageInner> | undefined, b: ResponsePaidStorageInner | PlainMessage<ResponsePaidStorageInner> | undefined): boolean {
    return proto3.util.equals(ResponsePaidStorageInner, a, b);
  }
}

