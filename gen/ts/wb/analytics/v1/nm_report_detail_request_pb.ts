//
//Описание API Аналитика
//
//Сервис предоставляет публичный API для получения аналитических данных. С помощью этих методов вы можете получать аналитические отчёты. [Часть методов](./#tag/Voronka-prodazh-(Dzhem)/) доступна только с [подпиской на расширенную аналитику Джем](https://seller.wildberries.ru/dynamic-product-categories/jam). 
//
//The version of the OpenAPI document: 
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file wb/analytics/v1/nm_report_detail_request.proto (package wb.analytics.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { NmReportDetailReqPeriod } from "./nm_report_detail_request_period_pb.js";
import { NmReportDetailReqOrderBy } from "./nm_report_detail_request_order_by_pb.js";

/**
 * @generated from message wb.analytics.v1.NmReportDetailReq
 */
export class NmReportDetailReq extends Message<NmReportDetailReq> {
  /**
   * Название бренда
   *
   * @generated from field: repeated string brandNames = 1;
   */
  brandNames: string[] = [];

  /**
   * Идентификатор предмета
   *
   * @generated from field: repeated int32 objectIDs = 2;
   */
  objectIDs: number[] = [];

  /**
   * Идентификатор тега
   *
   * @generated from field: repeated int32 tagIDs = 3;
   */
  tagIDs: number[] = [];

  /**
   * Артикул WB
   *
   * @generated from field: repeated int32 nmIDs = 4;
   */
  nmIDs: number[] = [];

  /**
   * Временная зона.<br> Если не указано, то по умолчанию используется Europe/Moscow. 
   *
   * @generated from field: string timezone = 5;
   */
  timezone = "";

  /**
   * @generated from field: wb.analytics.v1.NmReportDetailReqPeriod period = 6;
   */
  period?: NmReportDetailReqPeriod;

  /**
   * @generated from field: wb.analytics.v1.NmReportDetailReqOrderBy orderBy = 7;
   */
  orderBy?: NmReportDetailReqOrderBy;

  /**
   * Страница
   *
   * @generated from field: int32 page = 8;
   */
  page = 0;

  constructor(data?: PartialMessage<NmReportDetailReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.analytics.v1.NmReportDetailReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "brandNames", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "objectIDs", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 3, name: "tagIDs", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 4, name: "nmIDs", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 5, name: "timezone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "period", kind: "message", T: NmReportDetailReqPeriod },
    { no: 7, name: "orderBy", kind: "message", T: NmReportDetailReqOrderBy },
    { no: 8, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NmReportDetailReq {
    return new NmReportDetailReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NmReportDetailReq {
    return new NmReportDetailReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NmReportDetailReq {
    return new NmReportDetailReq().fromJsonString(jsonString, options);
  }

  static equals(a: NmReportDetailReq | PlainMessage<NmReportDetailReq> | undefined, b: NmReportDetailReq | PlainMessage<NmReportDetailReq> | undefined): boolean {
    return proto3.util.equals(NmReportDetailReq, a, b);
  }
}

