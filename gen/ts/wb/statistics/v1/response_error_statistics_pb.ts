//
//Описание API Статистики
//
//С помощью этих методов можно получить отчёты.
//
//The version of the OpenAPI document: 
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file wb/statistics/v1/response_error_statistics.proto (package wb.statistics.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message wb.statistics.v1.ResponseErrorStatistics
 */
export class ResponseErrorStatistics extends Message<ResponseErrorStatistics> {
  /**
   * @generated from field: repeated string errors = 1;
   */
  errors: string[] = [];

  constructor(data?: PartialMessage<ResponseErrorStatistics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.statistics.v1.ResponseErrorStatistics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "errors", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResponseErrorStatistics {
    return new ResponseErrorStatistics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResponseErrorStatistics {
    return new ResponseErrorStatistics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResponseErrorStatistics {
    return new ResponseErrorStatistics().fromJsonString(jsonString, options);
  }

  static equals(a: ResponseErrorStatistics | PlainMessage<ResponseErrorStatistics> | undefined, b: ResponseErrorStatistics | PlainMessage<ResponseErrorStatistics> | undefined): boolean {
    return proto3.util.equals(ResponseErrorStatistics, a, b);
  }
}

