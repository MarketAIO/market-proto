//
//Описание API Статистики
//
//С помощью этих методов можно получить отчёты.
//
//The version of the OpenAPI document: 
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file wb/statistics/v1/stocks_item.proto (package wb.statistics.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message wb.statistics.v1.StocksItem
 */
export class StocksItem extends Message<StocksItem> {
  /**
   * Дата и время обновления информации в сервисе. Это поле соответствует параметру `dateFrom` в запросе. Если часовой пояс не указан, то берется Московское время (UTC+3)
   *
   * @generated from field: string lastChangeDate = 1;
   */
  lastChangeDate = "";

  /**
   * Название склада
   *
   * @generated from field: string warehouseName = 2;
   */
  warehouseName = "";

  /**
   * Артикул продавца
   *
   * @generated from field: string supplierArticle = 3;
   */
  supplierArticle = "";

  /**
   * Артикул WB
   *
   * @generated from field: int32 nmId = 4;
   */
  nmId = 0;

  /**
   * Баркод
   *
   * @generated from field: string barcode = 5;
   */
  barcode = "";

  /**
   * Количество, доступное для продажи (сколько можно добавить в корзину)
   *
   * @generated from field: int32 quantity = 6;
   */
  quantity = 0;

  /**
   * В пути к клиенту
   *
   * @generated from field: int32 inWayToClient = 7;
   */
  inWayToClient = 0;

  /**
   * В пути от клиента
   *
   * @generated from field: int32 inWayFromClient = 8;
   */
  inWayFromClient = 0;

  /**
   * Полное (непроданное) количество, которое числится за складом (= `quantity` + в пути)
   *
   * @generated from field: int32 quantityFull = 9;
   */
  quantityFull = 0;

  /**
   * Категория
   *
   * @generated from field: string category = 10;
   */
  category = "";

  /**
   * Предмет
   *
   * @generated from field: string subject = 11;
   */
  subject = "";

  /**
   * Бренд
   *
   * @generated from field: string brand = 12;
   */
  brand = "";

  /**
   * Размер
   *
   * @generated from field: string techSize = 13;
   */
  techSize = "";

  /**
   * Цена
   *
   * @generated from field: float Price = 14;
   */
  Price = 0;

  /**
   * Скидка
   *
   * @generated from field: float Discount = 15;
   */
  Discount = 0;

  /**
   * Договор поставки (внутренние технологические данные)
   *
   * @generated from field: bool isSupply = 16;
   */
  isSupply = false;

  /**
   * Договор реализации (внутренние технологические данные)
   *
   * @generated from field: bool isRealization = 17;
   */
  isRealization = false;

  /**
   * Код контракта (внутренние технологические данные)
   *
   * @generated from field: string SCCode = 18;
   */
  SCCode = "";

  constructor(data?: PartialMessage<StocksItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.statistics.v1.StocksItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lastChangeDate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "warehouseName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "supplierArticle", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "nmId", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "barcode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "quantity", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "inWayToClient", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "inWayFromClient", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "quantityFull", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "category", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "subject", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "brand", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "techSize", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "Price", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 15, name: "Discount", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 16, name: "isSupply", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "isRealization", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 18, name: "SCCode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StocksItem {
    return new StocksItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StocksItem {
    return new StocksItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StocksItem {
    return new StocksItem().fromJsonString(jsonString, options);
  }

  static equals(a: StocksItem | PlainMessage<StocksItem> | undefined, b: StocksItem | PlainMessage<StocksItem> | undefined): boolean {
    return proto3.util.equals(StocksItem, a, b);
  }
}

