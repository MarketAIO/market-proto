//
//Описание API Продвижение
//
//Синхронизация данных из бд происходит раз в 3 минуты.  <br>Изменение статуса происходит раз в 1 минуту. Внутри этого интервала будет сохранено последнее действие по изменению статуса. <br>Изменение ставки происходит раз в 30 секунд. Внутри этого интервала будет сохранено последнее действие по изменению ставки.
//
//The version of the OpenAPI document: 
//
//Generated by OpenAPI Generator: https://openapi-generator.tech

// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file wb/promotion/v1/stats_blok1.proto (package wb.promotion.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { DailyStats1Inner } from "./daily_stats1_inner_pb.js";

/**
 * @generated from message wb.promotion.v1.StatsBlok1
 */
export class StatsBlok1 extends Message<StatsBlok1> {
  /**
   * ID баннера
   *
   * @generated from field: int32 item_id = 1;
   */
  itemId = 0;

  /**
   * Название бренда
   *
   * @generated from field: string item_name = 2;
   */
  itemName = "";

  /**
   * Название категории
   *
   * @generated from field: string category_name = 3;
   */
  categoryName = "";

  /**
   * <dl> <dt>Тип медиакампании:</dt> <dd><code>1</code> - размещение по дням</dd> <dd><code>2</code> - размещение по просмотрам</dd> </dl> 
   *
   * @generated from field: int32 advert_type = 4;
   */
  advertType = 0;

  /**
   * Место на странице
   *
   * @generated from field: int32 place = 5;
   */
  place = 0;

  /**
   * Количество просмотров
   *
   * @generated from field: int32 views = 6;
   */
  views = 0;

  /**
   * Количество кликов
   *
   * @generated from field: int32 clicks = 7;
   */
  clicks = 0;

  /**
   * CR(conversion rate) — это отношение количества заказов к общему количеству посещений медиакампании 
   *
   * @generated from field: float cr = 8;
   */
  cr = 0;

  /**
   * CTR (click-through rate) — показатель кликабельности, отношение числа кликов к количеству показов в рамках медиакампании 
   *
   * @generated from field: float ctr = 9;
   */
  ctr = 0;

  /**
   * Время начала размещения
   *
   * @generated from field: string date_from = 10;
   */
  dateFrom = "";

  /**
   * Время завершения размещения
   *
   * @generated from field: string date_to = 11;
   */
  dateTo = "";

  /**
   * Родительская категория предмета
   *
   * @generated from field: string subject_name = 12;
   */
  subjectName = "";

  /**
   * Количество добавлений товаров в корзину
   *
   * @generated from field: int32 atbs = 13;
   */
  atbs = 0;

  /**
   * Количество заказов
   *
   * @generated from field: int32 orders = 14;
   */
  orders = 0;

  /**
   * Стоимость размещения
   *
   * @generated from field: int32 price = 15;
   */
  price = 0;

  /**
   * (cost per click) - цена клика по продвигаемому товару
   *
   * @generated from field: float cpc = 16;
   */
  cpc = 0;

  /**
   * Статус медиакампании
   *
   * @generated from field: int32 status = 17;
   */
  status = 0;

  /**
   * @generated from field: repeated wb.promotion.v1.DailyStats1Inner daily_stats = 18;
   */
  dailyStats: DailyStats1Inner[] = [];

  /**
   * Стоимость размещения баннера
   *
   * @generated from field: int32 expenses = 19;
   */
  expenses = 0;

  /**
   * Отношение количества добавлений в корзину к количеству кликов
   *
   * @generated from field: float cr1 = 20;
   */
  cr1 = 0;

  /**
   * Отношение количества заказов к количеству добавлений в корзину
   *
   * @generated from field: int32 cr2 = 21;
   */
  cr2 = 0;

  constructor(data?: PartialMessage<StatsBlok1>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wb.promotion.v1.StatsBlok1";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "item_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "category_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "advert_type", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "place", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "views", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "clicks", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "cr", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 9, name: "ctr", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 10, name: "date_from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "date_to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "subject_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "atbs", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 14, name: "orders", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 15, name: "price", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 16, name: "cpc", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 17, name: "status", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 18, name: "daily_stats", kind: "message", T: DailyStats1Inner, repeated: true },
    { no: 19, name: "expenses", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 20, name: "cr1", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 21, name: "cr2", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StatsBlok1 {
    return new StatsBlok1().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StatsBlok1 {
    return new StatsBlok1().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StatsBlok1 {
    return new StatsBlok1().fromJsonString(jsonString, options);
  }

  static equals(a: StatsBlok1 | PlainMessage<StatsBlok1> | undefined, b: StatsBlok1 | PlainMessage<StatsBlok1> | undefined): boolean {
    return proto3.util.equals(StatsBlok1, a, b);
  }
}

